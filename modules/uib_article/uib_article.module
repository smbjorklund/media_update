<?php
/**
 * @file
 * Code for the UiB Feature Article feature.
 */

include_once 'uib_article.features.inc';

/**
 * Implements hook_form_alter
 */

function uib_article_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == "uib_article_node_form") {
    // Extra save button
    $form['extra_save'] = $form['actions']['submit'];
    $form['extra_save']['#weight'] = -1;

    // Hiding $form['language']
    hide($form['language']);
    if (strstr($form['#action'], 'uib-article?translation')) {
      hide($form['field_uib_area']);
    }

    //Fields to be hidden/required if event is not chosen
    $form['field_uib_event_type']['#states'] = array(
      'visible' => array(
        ':input[name="field_uib_article_type[und]"]' => array('value' => 'event'),
       ),
      'required' => array(
        ':input[name="field_uib_article_type[und]"]' => array('value' => 'event'),
       ),
    );

    $form['field_uib_date']['#states'] = array(
      'visible' => array(
        ':input[name="field_uib_article_type[und]"]' => array('value' => 'event'),
       ),
      'required' => array(
        ':input[name="field_uib_article_type[und]"]' => array('value' => 'event'),
       ),
    );

    $form['field_uib_contacts']['#states'] = array(
      'visible' => array(
        ':input[name="field_uib_article_type[und]"]' => array('value' => 'event'),
       ),
    );

    $form['field_uib_location']['#states'] = array(
      'visible' => array(
        ':input[name="field_uib_article_type[und]"]' => array('value' => 'event'),
       ),
    );

    // Hide all fields with "w2" in name
    foreach ($form as $field_key => $field_value) {
      if (mb_stripos($field_key, 'w2', 0, 'utf-8') !== FALSE) {
        hide($form[$field_key]);
      }
      if ($field_key ==  'field_uib_nav_weight') {
        hide($form[$field_key]);
      }
    }
    if ($form['#node_edit_form']) {
      if (!empty($form['menu']['#weight']) AND !empty($form['scheduler_settings']['#weight'])) {
        // Reordering tabs by switching their weights. cf. RTS-1016
        $tmp_weight = $form['menu']['#weight'];
        $form['menu']['#weight'] = $form['scheduler_settings']['#weight'];
        $form['scheduler_settings']['#weight'] = $tmp_weight;
      }
    }

    if (empty($form['nid']['#value'])) {
      // For new articles (but not infopages), add anti-bubbling checkbox
      $form['anti_bubbling'] = array(
        '#title' => t('Do not show on other areas'),
        '#type' => 'checkbox',
        '#description' => t('Check this if you do not want this article to automatically show on other areas'),
        '#weight' => 6,
        // Do not show when infopage article type is selected
        '#states' => array(
          'invisible' => array(
            ':input[name="field_uib_article_type[und]"]' => array(
              'value' => 'infopage'
            ),
          ),
        ),
      );
      $form['#group_children']['anti_bubbling'] = 'group_information';
    }
  }
}

/**
 * Implements hook_node_submit
 *
 * todo: Dont set language if field_uib_area has not changed
 */

function uib_article_node_submit($node, $form, &$form_state) {
  if ($form["#form_id"] == "uib_article_node_form") {
    if(isset($_GET['destination'])) {
          unset($_GET['destination']);
    }

    $areanid = $node->field_uib_area['und'][0]['target_id'];
    if (isset($areanid)) {
      $area = node_load($areanid);
      if (isset($area->language))
        $node->language = $area->language;
        if (strstr($form['#action'], 'uib-article?translation')) {
          $translatesets = translation_node_get_translations($area->tnid);
          if ($area->language == 'en') {
            $translatedid = $translatesets['nb']->nid;
            $node->language = 'nb';
          }
          else if ($area->language == 'nb') {
            $translatedid = $translatesets['en']->nid;
            $node->language = 'en';
          }
        $node->field_uib_area['und'][0]['target_id'] = $translatedid;
        }
    }
  }
}

/**
 * Implements hook_node_validate
 *
 */

function uib_article_node_validate($node, $form, &$form_state) {
  if ($form["#form_id"] == "uib_article_node_form") {
    if ($form['field_uib_article_type']['und']['#value'] == 'event') {
      if ($form['field_uib_event_type']['und']['#value'] == '_none') {
        form_set_error('field_uib_event_type[und]', t('Event type is required'));
      }
      if ($node->field_uib_date['und'][0]['value'] === NULL or $node->field_uib_date['und'][0]['value2'] === NULL) {
        form_set_error('field_uib_date', t('A start and an end date is required'));
      }
    }
  }
}

/**
* Create redirect for a node entity.
*
* This is only relevant for nodes migrated from w2.
* If the attached field_uib_w2_path contains a string, the
* redirect will be setup to our node.
*
* @param entity $entity
* The node entity that is the target for the redirect
*
*/
function uib_article__set_redirect($entity) {
  if (!empty($entity->field_uib_w2_path['und'][0]['value'])) {
    $redirect = new stdClass();
    redirect_object_prepare($redirect);
    $redirect->source = $entity->field_uib_w2_path['und'][0]['value'];
    $redirect->redirect = 'node/' . $entity->nid;
    // Check if the redirect exists before saving.
    $hash = redirect_hash($redirect);
    if (!redirect_load_by_hash($hash)) {
      redirect_save($redirect);
      uibx_log('Redirect created for ' . $redirect->source . ' -> ' . $redirect->redirect);
    } else {
      uibx_log('Redirect ' . $redirect->source . ' -> ' . $redirect->redirect . ' already existed');
    }
  }
}

/**
 * Implements hook_node_presave
 *
 */
function uib_article_node_presave($node) {
  if ($node->is_new) {
    if ($node->field_uib_article_type['und'][0]['value'] != 'infopage') {
      if (!$node->anti_bubbling) {
        // Upon creation of an article,
        // add all area parents to field_uib_area. RTS-914
        $parent_trail = array();
        uib_area__get_parentage($node->field_uib_area['und'][0]['target_id'], $parent_trail);
        $node_areas = array();
        foreach ($node->field_uib_area['und'] as $area) {
          $node_areas[] = $area['target_id'];
        }
        foreach($parent_trail as $pt) {
          if (!in_array($pt, $node_areas)) {
            $node->field_uib_area['und'][]['target_id'] = $pt;
            $node_areas[] = $pt;
          }
        }
      }
    }
  }
}
