<?php
/**
 * @file
 * Code for the UiB Feature Article feature.
 */

include_once 'uib_article.features.inc';


/**
 * Implements hook_menu().
 */
function uib_article_menu() {
  $items['node/%node/menu'] = array(
    'title' => 'Menu',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uib_article_menu_form', 1),
    'access callback' => 'uib_article__access_check',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%/share'] = array(
      'title' => 'Share',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('uib_article__share'),
      'access callback' => 'uib_article__share_access',
      'type' => MENU_LOCAL_TASK,
    );
  return $items;
}

function uib_article__share($form, &$form_state) {
  $article = node_load(arg(1));
  global $user;

  $form['header'] = array(
    '#type' => 'html_tag',
    '#tag' => 'h1',
    '#value' => $article->title,
  );

  $query = new EntityFieldQuery;
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'area')
    ->propertyCondition('language', $article->language)
    ->fieldCondition('field_uib_content_manager', 'target_id', $user->uid)
    ->propertyOrderBy('title')
    ->execute();

  if ($result) {
    $form['check'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Share this article on the following areas'),
      '#description' => t('Articles can be shared to all the areas you are content manger for.  Please select the areas you want to share this article on.'),
      '#options' => array(),
      '#default_value' => array(),
    );

    $areas = node_load_multiple(array_keys($result['node']));
    $owner = $article->field_uib_area['und'][0]['target_id'];
    foreach ($areas as $area) {
      if ($area->nid != $owner)
        $form['check']['#options'][$area->nid] = $area->title;
    }

    foreach (array_slice($article->field_uib_area['und'], 1) as $value) {
      $form['check']['#default_value'][] = $value['target_id'];
    }

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Update',
    );
  }
  return $form;
}

function uib_article__share_submit($form, &$form_state) {
  $article = node_load(arg(1));
  if ($article) {
    //dpm(array($form, $form_state, $article));
    $old = $article->field_uib_area['und'];
    $new = array();
    $checks = $form_state['values']['check'];

    // remove those not present any more
    $seen = array();
    foreach ($old as $i => $v) {
      $nid = $v['target_id'];
      if ($i == 0 || !array_key_exists($nid, $checks) || $checks[$nid]) {
        $new[] = $v;
        $seen[$nid]++;
      }
      else {
        drupal_set_message(t('Article not shared with area "@area" any more', array('@area' => node_load($nid)->title)));
      }
    }

    // add the new ones
    foreach ($checks as $nid => $checked) {
      if ($checked && !$seen[$nid]) {
        $new[] = array( 'target_id' => $nid );
        drupal_set_message(t('Article now shared with area "@area"', array('@area' => node_load($nid)->title)));
      }
    }

    //dpm(array('old' => $old, 'checks' => $checks, 'new' => $new));

    if ($new != $old) {
      $article->field_uib_area['und'] = $new;
      node_save($article);
    }
    else {
      drupal_set_message(t('Article still shared to the same areas'));
    }
  }
  $form_state['redirect'] = 'node/' . arg(1);
}

function uib_article__share_access() {
  if (!user_access('edit any uib_article content'))
    return FALSE;
  $node = node_load(arg(1));
  if ($node && $node->type == 'uib_article') {
    $atype = $node->field_uib_article_type['und'][0]['value'];
    if ($atype == 'news' || $atype == 'event') {
      return TRUE;
    }
  }
  return FALSE;
}


/**
 * Implements hook_form_alter().
 */
function uib_article_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == "uib_article_node_form") {
    // Disable possibility for changing main area if node has connection to menu
    if (isset($form_state['node']->field_uib_area['und'])) {
      $menu_name = 'menu-area-' . $form_state['node']->field_uib_area['und'][0]['target_id'];
      if (menu_link_get_preferred('node/' . $form_state['node']->nid, $menu_name)) {
        $form['field_uib_area']['und'][0]['target_id']['#disabled'] = TRUE;
      }
    }

    // Extra save button
    $form['extra_save'] = $form['actions']['submit'];
    $form['extra_save']['#weight'] = -1;

    // Hiding $form['language']
    hide($form['language']);
    if (strstr($form['#action'], 'uib-article?translation')) {
      hide($form['field_uib_area']);
    }

    //Fields to be hidden/required if event is not chosen
    $form['field_uib_event_type']['#states'] = array(
      'visible' => array(
        ':input[name="field_uib_article_type[und]"]' => array('value' => 'event'),
       ),
      'required' => array(
        ':input[name="field_uib_article_type[und]"]' => array('value' => 'event'),
       ),
    );

    $form['field_uib_date']['#states'] = array(
      'visible' => array(
        ':input[name="field_uib_article_type[und]"]' => array('value' => 'event'),
       ),
      'required' => array(
        ':input[name="field_uib_article_type[und]"]' => array('value' => 'event'),
       ),
    );

    $form['field_uib_contacts']['#states'] = array(
      'visible' => array(
        ':input[name="field_uib_article_type[und]"]' => array('value' => 'event'),
       ),
    );

    $form['field_uib_location']['#states'] = array(
      'visible' => array(
        ':input[name="field_uib_article_type[und]"]' => array('value' => 'event'),
       ),
    );

    // Hide all fields with "w2" in name
    foreach ($form as $field_key => $field_value) {
      if (mb_stripos($field_key, 'w2', 0, 'utf-8') !== FALSE) {
        hide($form[$field_key]);
      }
      if ($field_key ==  'field_uib_nav_weight') {
        hide($form[$field_key]);
      }
    }
    if ($form['#node_edit_form']) {
      if (!empty($form['menu']['#weight']) AND !empty($form['scheduler_settings']['#weight'])) {
        // Reordering tabs by switching their weights. cf. RTS-1016
        $tmp_weight = $form['menu']['#weight'];
        $form['menu']['#weight'] = $form['scheduler_settings']['#weight'];
        $form['scheduler_settings']['#weight'] = $tmp_weight;
      }
    }

    if (empty($form['nid']['#value'])) {
      // For new articles (but not infopages), add anti-bubbling checkbox
      $form['anti_bubbling'] = array(
        '#title' => t('Do not show on parent areas.'),
        '#type' => 'checkbox',
        '#description' => t('Check this if you do not want this article to automatically show on other areas. You will still be able to add other areas later.'),
        '#weight' => 6,
        // Do not show when infopage article type is selected
        '#states' => array(
          'invisible' => array(
            ':input[name="field_uib_article_type[und]"]' => array(
              'value' => 'infopage'
            ),
          ),
        ),
      );
      $form['#group_children']['anti_bubbling'] = 'group_information';
    }
  }
}

/**
 * Implements hook_node_submit().
 *
 * todo: Dont set language if field_uib_area has not changed.
 */
function uib_article_node_submit($node, $form, &$form_state) {
  if ($form["#form_id"] == "uib_article_node_form") {
    if(isset($_GET['destination'])) {
          unset($_GET['destination']);
    }

    $areanid = $node->field_uib_area['und'][0]['target_id'];
    if (isset($areanid)) {
      $area = node_load($areanid);
      if (isset($area->language))
        $node->language = $area->language;
        if (strstr($form['#action'], 'uib-article?translation')) {
          $translatesets = translation_node_get_translations($area->tnid);
          if ($area->language == 'en') {
            $translatedid = $translatesets['nb']->nid;
            $node->language = 'nb';
          }
          else if ($area->language == 'nb') {
            $translatedid = $translatesets['en']->nid;
            $node->language = 'en';
          }
        $node->field_uib_area['und'][0]['target_id'] = $translatedid;
        }
    }
  }
}

/**
 * Implements hook_node_validate().
 *
 */
function uib_article_node_validate($node, $form, &$form_state) {
  if ($form["#form_id"] == "uib_article_node_form") {
    if ($form['field_uib_article_type']['und']['#value'] == 'event') {
      if ($form['field_uib_event_type']['und']['#value'] == '_none') {
        form_set_error('field_uib_event_type[und]', t('Event type is required'));
      }
      if ($node->field_uib_date['und'][0]['value'] === NULL or $node->field_uib_date['und'][0]['value2'] === NULL) {
        form_set_error('field_uib_date', t('A start and an end date is required'));
      }
    }
  }
}

/**
 * Create redirect for a node entity.
 *
 * This is only relevant for nodes migrated from w2.
 * If the attached field_uib_w2_path contains a string, the
 * redirect will be setup to our node.
 * @param entity $entity.
 */
function uib_article__set_redirect($entity) {
  if (!empty($entity->field_uib_w2_path['und'][0]['value'])) {
    $redirect = new stdClass();
    redirect_object_prepare($redirect);
    $redirect->source = $entity->field_uib_w2_path['und'][0]['value'];
    $redirect->redirect = 'node/' . $entity->nid;
    // Check if the redirect exists before saving.
    $hash = redirect_hash($redirect);
    if (!redirect_load_by_hash($hash)) {
      redirect_save($redirect);
      uibx_log('Redirect created for ' . $redirect->source . ' -> ' . $redirect->redirect);
    } else {
      uibx_log('Redirect ' . $redirect->source . ' -> ' . $redirect->redirect . ' already existed');
    }
  }
}

/**
 * Implements hook_node_presave().
 *
 */
function uib_article_node_presave($node) {
  if ($node->is_new) {
    if ($node->type == 'uib_article' && $node->field_uib_article_type['und'][0]['value'] != 'infopage') {
      if (!$node->anti_bubbling) {
        // Upon creation of an article,
        // add all area parents to field_uib_area. RTS-914
        $parent_trail = array();
        uib_area__get_parentage($node->field_uib_area['und'][0]['target_id'], $parent_trail);
        $node_areas = array();
        foreach ($node->field_uib_area['und'] as $area) {
          $node_areas[] = $area['target_id'];
        }
        foreach($parent_trail as $pt) {
          if (!in_array($pt, $node_areas)) {
            $node->field_uib_area['und'][]['target_id'] = $pt;
            $node_areas[] = $pt;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function uib_article_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['short_teaser'] = array(
    'label' => t('Short teaser'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_theme_registry_alter().
 */
function uib_article_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['field_multiple_value_form'])) {
    $theme_registry['field_multiple_value_form']['type'] = 'module';
    $theme_registry['field_multiple_value_form']['theme path'] = drupal_get_path('module', 'uib_article');
    $theme_registry['field_multiple_value_form']['function'] = 'uib_article_theme_field_multiple_value_form';
  }
}

/**
 * Implements theme_field_multiple_value_form().
 * @param  [type] $variables [description]
 * @return [type]            [description]
 */
function uib_article_theme_field_multiple_value_form($variables) {
  $element = $variables['element'];
  $output = '';

  if ($element['#cardinality'] > 1 || $element['#cardinality'] == FIELD_CARDINALITY_UNLIMITED) {
    $table_id = drupal_html_id($element['#field_name'] . '_values');
    $order_class = $element['#field_name'] . '-delta-order';
    $required = !empty($element['#required']) ? theme('form_required_marker', $variables) : '';

    $header = array(
      array(
        'data' => '<label>' . t('!title !required', array('!title' => $element['#title'], '!required' => $required)) . "</label>",
        'colspan' => 2,
        'class' => array('field-label'),
      ),
      t('Order'),
    );
    $rows = array();

    // Sort items according to '_weight' (needed when the form comes back after
    // preview or failed validation)
    $items = array();
    foreach (element_children($element) as $key) {
      if ($key === 'add_more') {
        $add_more_button = &$element[$key];
      }
      else {
        $items[] = &$element[$key];
      }
    }
    usort($items, '_field_sort_items_value_helper');

    // Add the items as table rows.
    foreach ($items as $key => $item) {
      $item['_weight']['#attributes']['class'] = array($order_class);
      $delta_element = drupal_render($item['_weight']);
      $cells = array(
        array(
          'data' => '',
          'class' => array('field-multiple-drag'),
        ),
        drupal_render($item),
        array(
          'data' => $delta_element,
          'class' => array('delta-order'),
        ),
      );
      $rows[] = array(
        'data' => $cells,
        'class' => array('draggable'),
      );
      if (!empty($item['target_id'])) {
        if ($item['target_id']['#field_name'] == 'field_uib_area') {
          $rows[0]['class'][0] = 'nodrag';
          $rows[0]['class'][1] = 'area';
        }
      }
    }

    $output = '<div class="form-item">';
    $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => $table_id, 'class' => array('field-multiple-table'))));
    $output .= $element['#description'] ? '<div class="description">' . $element['#description'] . '</div>' : '';
    $output .= '<div class="clearfix">' . drupal_render($add_more_button) . '</div>';
    $output .= '</div>';

    drupal_add_tabledrag($table_id, 'order', 'sibling', $order_class);
  }
  else {
    foreach (element_children($element) as $key) {
      $output .= drupal_render($element[$key]);
    }
  }
  return $output;
}

function uib_article__access_check($node) {
  if (!empty($node)) {
    if ($node->type == 'uib_article' && node_access('update', $node)) {
      if (!empty($node->field_uib_area['und'][0]['target_id'])) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

function uib_article_menu_form($form, &$form_state, $node) {
  if (!isset($form_state['uib_article']['confirm'])) {
    $menu_name = uib_area__get_current_menu();
    $menu = menu_load($menu_name);
    $menu_link = menu_link_get_preferred('node/' . $node->nid, $menu_name);
    $form_state['uib_article']['node'] = $node;
    $form_state['uib_article']['menu_name'] = $menu_name;
    if (!empty($menu_link)) {
      $form_state['uib_article']['menu_link'] = $menu_link;
    }

    $form['uib_area_menu_formtext'] = array(
      '#type' => 'item',
      '#title' => $menu['description'] . ' ' . t('options'),
    );

    if (!empty($menu_link)) {
      $form['uib_area_menu_formtext']['#description'] = t('Currently in menu');
    }
    else {
      $form['uib_area_menu_formtext']['#description'] = t('Not in menu');
    }

    $form['uib_area_menu_settings'] = array(
      '#type' => 'container',
    );

    if (!empty($node->field_uib_area['und'][0]['target_id'])) {
      $form['uib_area_menu_settings']['area_menu_item_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Menu item title'),
        '#required' => 'true',
      );

      if (!empty($menu_link['link_title'])) {
        $form['uib_area_menu_settings']['area_menu_item_title']['#value'] = $menu_link['link_title'];
      }

      $form['uib_area_menu_settings']['area_menu_select'] = array(
        '#type' => 'select',
        '#title' => t('Select menu item'),
        '#options' => uib_area__get_menu($menu_name),
      );

      if (!empty($menu_link['mlid'])) {
        $form['uib_area_menu_settings']['area_menu_select']['#value'] = $menu_link['mlid'];
      }

      $form['uib_area_menu_settings']['relations'] = array(
        '#type' => 'radios',
        '#title' => t('Specify relationship to selected menu item'),
        '#default_value' => 0,
        '#options' => array(
          0 => t('Sibling to (after)'),
          1 => t('Sibling to (before)'),
          2 => t('Child to'),
        ),
      );

      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Save'),
        '#name' => 'save_button',
      );

      $form['delete'] = array(
        '#type' => 'submit',
        '#value' => t('Delete'),
        '#name' => 'delete_button',
        '#disabled' => FALSE,
      );
      if (empty($menu_link['mlid'])) {
        $form['delete']['#disabled'] = TRUE;
      }
    }
    else {
      $form['uib_area_menu_formtext']['#description'] = t('This article does not belong to an area.');
    }
    return $form;
  }
  else {
    $path = current_path();
    return confirm_form(
      $form,
      t('Delete menu link for this article?'),
      $path,
      t('Removing menu link can not be undone.'),
      t('Confirm'),
      t('Cancel')
    );
  }
}

function uib_article_menu_form_submit($form, &$form_state) {
  if ($form_state['clicked_button']['#name'] == 'delete_button' && !isset($form_state['uib_article']['confirm'])) {
    $form_state['uib_article']['confirm'] = TRUE;
    $form_state['rebuild'] = TRUE;
  }
  else {
    if ($form_state['clicked_button']['#name'] == 'save_button') {
      // Save action
      if (!empty($form_state['uib_article']['menu_link']) && ($form_state['input']['area_menu_item_title'] == $form_state['values']['area_menu_item_title']) && ($form_state['input']['area_menu_select'] == $form_state['values']['area_menu_select'])) {
        drupal_set_message(t('Menu link unchanged.'), 'status', FALSE);
      }
      else {
        if ($form_state['input']['relations'] == 2) {
          // Child to selected
          $parent = $form_state['input']['area_menu_select'];
          $expanded = 0;
          $menu_tree = menu_tree_all_data($form_state['uib_article']['menu_name'], NULL);
          $existing_weights = _get_weights(_get_subtree($menu_tree, $parent));
          // Determine weight to use (put item last)
          $weight = NULL;
          foreach ($existing_weights as $wht) {
            if ($weight === NULL) {
              $weight = $wht;
            }
            elseif ($wht > $weight) {
              $weight = $wht;
            }
          }
          $weight++;
        }
        else {
          // Sibling to selected
          $sibling = menu_link_load($form_state['input']['area_menu_select']);
          $parent = $sibling['plid'];
          if ($sibling['depth'] > 0) {
            $expanded = 0;
          }
          else {
            $expanded = 1;
          }
          $menu_tree = menu_tree_all_data($form_state['uib_article']['menu_name'], NULL);
          $existing_weights = _get_weights(_get_subtree($menu_tree, $parent));
          // Determine weight to use (halfway in between items)
          unset($prev);
          unset($next);
          unset($sibl);
          foreach($existing_weights as $key => $wht) {
            if ($key == $sibling['mlid']) {
              $sibl = $sibling['mlid'];
              continue;
            }
            if (!isset($sibl)) {
              $prev = $wht;
            }
            if (!isset($next) && isset($sibl)) {
              $next = $wht;
              break;
            }
          }
          if (!isset($prev)) {
            $prev = $sibling['weight'];
          }
          if (!isset($next)) {
            $next = $sibling['weight'];
          }
          if ($form_state['input']['relations'] == 0) {
            // Put after sibling
            $weight = round(($sibling['weight'] + $next) / 2);
          }
          else {
            // Put before sibling
            $weight = round(($sibling['weight'] + $prev) / 2);
          }
        }
        if (empty($form_state['uib_article']['menu_link'])) {
          $mlid = NULL;
        }
        else {
          $mlid = $form_state['uib_article']['menu_link']['mlid'];
        }

        // Save menu link
        $new_menu_link = array(
          'link_path' => 'node/' . $form_state['uib_article']['node']->nid,
          'link_title' => $form_state['input']['area_menu_item_title'],
          'menu_name' => $form_state['uib_article']['menu_name'],
          'expanded' => $expanded,
          'mlid' => $mlid,
          'plid' => $parent,
          'weight' => $weight,
        );
        menu_link_save($new_menu_link);
        drupal_set_message(t('Menu link saved.'), 'status', FALSE);

      }
    }
    else {
      // Delete action
      menu_link_delete($form_state['uib_article']['menu_link']['mlid']);
      drupal_set_message(t('Menu link deleted.'), 'status', FALSE);
    }
  }
}

function _get_subtree($tree, $mlid) {
  foreach ($tree as $tree_link) {
    if ($tree_link['link']['mlid'] == $mlid) {
      return $tree_link['below'];
    }
    elseif (!empty($tree_link['below'])) {
      _get_subtree($tree_link['below'], $mlid);
    }
  }
}

function _get_weights($tree) {
  $weightset = array();
  foreach ($tree as $tree_link) {
    $weightset[$tree_link['link']['mlid']] = $tree_link['link']['weight'];
  }
  return $weightset;
}

/**
 * Fetch a header to display on a relations list
 **/
function uib_article__relation_title($node) {
  if (!empty($node)) {
    $node_url = 'node/' . $node->nid;
    $node_alias = drupal_get_path_alias($node_url, $node->language);
    if (stripos($node_alias, 'foransatte') !== FALSE OR stripos($node_alias, 'foremployees') !== FALSE) {
      $menu_name = uib_area__get_current_menu();
      $menu_link = menu_link_get_preferred($node_url, $menu_name);
      if (!empty($menu_link)) {
        return $menu_link['link_title'];
      }
      else {
        return $node->title;
      }
    }
  }
  return NULL;
}
