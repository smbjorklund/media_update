<?php
/**
 * @file
 * Code for the UiB Feature User feature.
 */

include_once 'uib_user.features.inc';

/**
 * Implements hook_username_alter().
 *
 * The UiB user names are too ugly to show to regular people, so we want
 * users to be presented by their "<first name> <last name>".
 */

function uib_user_username_alter(&$name, $account) {
  if (isset($account->uid)) {
    $user = user_load($account->uid);
    if (!empty($user->field_uib_first_name)) {
      $name = $user->field_uib_first_name['und'][0]['safe_value'];
      if (!empty($user->field_uib_last_name)) {
        $name = "$name " . $user->field_uib_last_name['und'][0]['safe_value'];
      }
    }
    else {
      $name = "[$name]";
    }
  }
}

function uib_user_user_login(&$edit, $account) {
  if ( (in_array('level 1', $account->roles, TRUE)) || ($account->uid == 1) || (in_array('level 2', $account->roles, TRUE)) || (in_array('level 3', $account->roles, TRUE)) ) {
    $edit['redirect'] = 'webdesk';
  }
  else {
    $edit['redirect'] = 'user';
  }
}

/**
 * Implements hook_theme().
 *
 */
function uib_user_theme($existing, $type, $theme, $path) {
  return array(
    'views_view_field__user_block__edit_node' => array(
      'arguments' => array('view' => FALSE, 'field' => FALSE, 'row' => FALSE),
      'original hook' => 'views_view_field',
    ),
  );
}

function theme_views_view_field__user_block__edit_node($view) {
  global $user;
  global $language;
  $alias = drupal_get_path_alias('user/' . $user->uid);

  if ('user/' . $user->uid != $alias) {
    $url = '<a href=http://uib.no/' . $alias . '>' . t('Edit account') . '</a';
    return $url;
  }
}

/**
 * Implements hook_form_alter().
 *
 */
function uib_user_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_login') {
    array_unshift($form['#validate'], 'uib_user__username_lc');
  }
  if ($form['#form_id'] == 'user_profile_form') {
    field_group_hide_field_groups($form, array('group_uib_hidden'));
  }

  // Disable fields that are synchronized with SEBRA
  $synchronized_properties = array(
    'name',
    'mail',
    // 'status', // These are synchronized but Level 1 wants to be able to edit them
    // 'roles',
    );
  foreach ($synchronized_properties as $item) {
    $form['account'][$item]['#disabled'] = TRUE;
  }
  $synchronized_fields = array(
    'field_uib_first_name',
    'field_uib_last_name',
    'field_uib_sort_name',
    'field_uib_phone',
    'field_uib_position',
    'field_uib_position_code',
    'field_uib_position_category',
    'field_uib_user_domain',
    );
  foreach ($synchronized_fields as $item) {
    $form[$item]['#disabled'] = TRUE;
  }
}

/**
 * Always lowercase username.
 *
 */
function uib_user__username_lc($form, &$form_state) {
  if (!empty($form_state['values']['name'])) {
    $form_state['values']['name'] = drupal_strtolower($form_state['values']['name']);
  }
}

/**
 * Implements hook_custom_theme().
 */
function uib_user_custom_theme() {
  $arg = arg();
  if (isset($arg[2])) {
    if ($arg[0] == 'user' && $arg[2] == 'edit') {
      return 'uib_zen';
    }
  }
}

/**
 * Implements hook_block_info().
 *
 */
function uib_user_block_info() {
  return array(
    'research_groups' => array(
      'info' => t("User's research groups"),
      'status' => TRUE,
    ),
  );
}

function uib_user_block_view($delta='') {
  $block = array();
  switch ($delta) {
    case 'research_groups':
      if (arg(0) == 'user') {
        $uid = arg(1);
        // Find research groups that this user belongs to
        $query = new EntityFieldQuery;
        $result = $query
          ->entityCondition('entity_type', 'node')
          ->entityCondition('bundle', 'area')
          ->fieldCondition('field_uib_staff', 'target_id', $uid)
          ->fieldCondition('field_uib_area_type', 'value', 'research group')
          ->execute();
        if (!empty($result)) {
          $areas = entity_load('node', array_keys($result['node']));
          $block['subject'] = t('Research groups');
          foreach ($areas as $nid => $research_grp) {
            $block['content'][]['#markup'] = '<div>' . l($research_grp->title, "node/$nid") . '</div>';
          }
        }
      }
    break;
  }
  return $block;
}
