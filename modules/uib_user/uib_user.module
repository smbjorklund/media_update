<?php
/**
 * @file
 * Code for the UiB Feature User feature.
 */

include_once 'uib_user.features.inc';

/**
 * Implements hook_username_alter().
 *
 * The UiB user names are too ugly to show to regular people, so we want
 * users to be presented by their "<first name> <last name>".
 */

function uib_user_username_alter(&$name, $account) {
  if (isset($account->uid)) {
    $user = user_load($account->uid);
    if (!empty($user->field_uib_first_name)) {
      $name = $user->field_uib_first_name['und'][0]['safe_value'];
      if (!empty($user->field_uib_last_name)) {
        $name = "$name " . $user->field_uib_last_name['und'][0]['safe_value'];
      }
    }
    else {
      $name = "[$name]";
    }
  }
}

function uib_user_user_login(&$edit, $account) {
  if ( (in_array('level 1', $account->roles, TRUE)) || ($account->uid == 1) || (in_array('level 2', $account->roles, TRUE)) || (in_array('level 3', $account->roles, TRUE)) ) {
    $edit['redirect'] = 'webdesk';
  }
  else {
    $edit['redirect'] = 'user';
  }
}

/**
 * Implements hook_theme().
 *
 */
function uib_user_theme($existing, $type, $theme, $path) {
  return array(
    'views_view_field__user_block__edit_node' => array(
      'arguments' => array('view' => FALSE, 'field' => FALSE, 'row' => FALSE),
      'original hook' => 'views_view_field',
    ),
  );
}

function theme_views_view_field__user_block__edit_node($view) {
  global $user;
  global $language;
  $alias = drupal_get_path_alias('user/' . $user->uid);

  if ('user/' . $user->uid != $alias) {
    $url = '<a href=http://uib.no/' . $alias . '>' . t('Edit account') . '</a';
    return $url;
  }
}

/**
 * Implements hook_form_alter().
 *
 */
function uib_user_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_login') {
    array_unshift($form['#validate'], 'uib_user__username_lc');
  }
  if ($form['#form_id'] == 'user_profile_form') {
    field_group_hide_field_groups($form, array('group_uib_hidden'));
    $profile_user = entity_metadata_wrapper('user', $form['#user']);
    if ($profile_user->field_uib_position_category->value() == 'faculty') {
      $form['field_uib_user_field'][$form['field_uib_user_field']['#language']][0]['#title'] = t('Research');
    }
    elseif ($profile_user->field_uib_position_category->value() == 'staff') {
      $form['field_uib_user_field'][$form['field_uib_user_field']['#language']][0]['#title'] = t('Work');
    }

    // Disable fields that are synchronized with SEBRA
    $synchronized_properties = array(
      'name',
      'mail',
      // 'status', // These are synchronized but Level 1 wants to be able to edit them
      // 'roles',
      );
    foreach ($synchronized_properties as $item) {
      $form['account'][$item]['#disabled'] = TRUE;
    }
    $synchronized_fields = array(
      'field_uib_first_name',
      'field_uib_last_name',
      'field_uib_sort_name',
      'field_uib_phone',
      'field_uib_position',
      'field_uib_position_code',
      'field_uib_position_category',
      'field_uib_user_domain',
      );
    foreach ($synchronized_fields as $item) {
      $form[$item]['#disabled'] = TRUE;
    }
  }
}

/**
 * Always lowercase username.
 *
 */
function uib_user__username_lc($form, &$form_state) {
  if (!empty($form_state['values']['name'])) {
    $form_state['values']['name'] = drupal_strtolower($form_state['values']['name']);
  }
}

/**
 * Implements hook_custom_theme().
 */
function uib_user_custom_theme() {
  $arg = arg();
  if (isset($arg[2])) {
    if ($arg[0] == 'user' && $arg[2] == 'edit') {
      return 'uib_zen';
    }
  }
}

/**
 * Implements hook_block_info().
 *
 */
function uib_user_block_info() {
  return array(
    'research_groups' => array(
      'info' => t("User's research groups"),
      'status' => TRUE,
    ),
  );
}

function uib_user_block_view($delta='') {
  global $language;
  $block = array();
  switch ($delta) {
    case 'research_groups':
      if (arg(0) == 'user') {
        $uid = arg(1);
        // Find research groups that this user belongs to
        $query = new EntityFieldQuery;
        $result = $query
          ->entityCondition('entity_type', 'node')
          ->entityCondition('bundle', 'area')
          ->fieldCondition('field_uib_staff', 'target_id', $uid)
          ->fieldCondition('field_uib_area_type', 'value', 'research group')
          ->execute();
        if (!empty($result)) {
          $areas = entity_load('node', array_keys($result['node']));
          foreach ($areas as $nid => $research_grp) {
            if ($research_grp->language == $language->language) {
              $block['content'][]['#markup'] = '<div>' . l($research_grp->title, "node/$nid") . '</div>';
            }
          }
          if ($block) {
            $block['subject'] = t('Research groups');
          }
        }
      }
    break;
  }
  return $block;
}

/**
 * Implements hook_user_view_alter().
 */
function uib_user_user_view_alter(&$build) {
  drupal_add_library('system' , 'ui.tabs');
  drupal_add_js(drupal_get_path('theme', 'uib_zen') . '/js/tabs.js', array('group' => JS_THEME, ));

  $profile_user = entity_metadata_wrapper('user', $build['#account']);

  // Add email address with markup as if it was a field
  $build['user_email'] = array(
    '#weight' => 32,
    '#markup' => uib_user_add_field_markup(t('E-mail'), 'uib-user-email', l($profile_user->mail->value(), 'mailto:' . $profile_user->mail->value(), array('absolute' => TRUE))),
  );

  // Add a link to edit the profile
  global $user;
  $options = array();
  $options['attributes']['class'] = 'button uib-user-edit-button';
  $button_url = 'user/' . $profile_user->getIdentifier() . '/edit';
  if ($user->uid == 0) {
    $options['query']['destination'] = $button_url;
    $button_url = 'user';
  }
  $build['user_edit_link'] = array(
    '#weight' => 99,
    '#markup' => l(t('Edit your profile'), $button_url, $options),
  );

  // Add a vcard download link
  if ($build['#account']->field_uib_user_domain['und'][0]['value'] == 'uib') {
    $vcard_url = 'user/' . $build['#account']->uid . '/card.vcf';
    $build['user_vcard_link'] = array(
      '#weight' => 37,
      '#markup' => l(t('Download vCard'), $vcard_url, array(
        'attributes' => array('class' => 'uib-user-vcard'),
      )),
    );
  }

  // Move stuff into field groups
  $build['#group_children']['user_picture'] = 'group_user_media';
  $build['#group_children']['user_email'] = 'group_user_contact';
  $build['#group_children']['user_vcard_link'] = 'group_user_contact';

  // Manage field overrides
  $safe_value = array('sanitize' => TRUE);
  if ($profile_user->__isset('field_uib_user_alt_firstname')) {
    $alt_name = trim($profile_user->field_uib_user_alt_firstname->value($safe_value));
    if (!empty($alt_name)) {
      $build['field_uib_first_name'][0]['#markup'] = $alt_name;
    }
  }
  if ($profile_user->__isset('field_uib_user_alt_lastname')) {
    $alt_name =  trim($profile_user->field_uib_user_alt_lastname->value($safe_value));
    if (!empty($alt_name)) {
      $build['field_uib_last_name'][0]['#markup'] = $alt_name;
    }
  }
  global $language;
  if (!empty($build['#account']->field_uib_user_alt_address[$language->language][0]['thoroughfare'])) {
    foreach ($build['#account']->field_uib_user_alt_address[$language->language][0] as $item_name => $item) {
      if (isset($build['field_uib_user_ou'][0]['node'][$build['field_uib_user_ou']['#items'][0]['target_id']]['field_uib_visit_address'][0]['#address'][$item_name])) {
        $build['field_uib_user_ou'][0]['node'][$build['field_uib_user_ou']['#items'][0]['target_id']]['field_uib_visit_address'][0]['#address'][$item_name] = $item;
      }
    }
  }
  if (!empty($build['field_uib_user_field'])) {
    if ($profile_user->field_uib_position_category->value() == 'faculty') {
      $build['field_uib_user_field']['#title'] = t('Research');
    }
    elseif ($profile_user->field_uib_position_category->value() == 'staff') {
      $build['field_uib_user_field']['#title'] = t('Work');
    }
  }

  // Tabs
  $tabs_field_list = array();
  foreach ($build['#group_children'] as $field_name => $group_name) {
    if ($group_name == 'group_user_work_1' && isset($build[$field_name]['#weight'])) {
      $tabs_field_list[$field_name] = $build[$field_name]['#weight'];
    }
  }
  asort($tabs_field_list);
  foreach ($tabs_field_list as $field_name => $weight) {
    unset($tabs_field_list[$field_name]);
    $tabs_field_list[$field_name]['weight'] = $weight;
    $tabs_field_list[$field_name]['title'] = $build[$field_name]['#title'];
    $tabs_field_list[$field_name]['htmltitle'] = 'uib-tabs-' . mb_ereg_replace('[^a-z0-9]+', '-', drupal_strtolower($build[$field_name]['#title']));
  }
  // Manage the optional tab if it has a name
  if (isset($tabs_field_list['field_uib_user_opt_title'])) {
    $tabs_field_list['field_uib_user_opt_content']['title'] = $build['field_uib_user_opt_title']['#items'][0]['safe_value'];
    hide($build['field_uib_user_opt_title']);
    unset($tabs_field_list['field_uib_user_opt_title']);
    $tabs_field_list['field_uib_user_opt_content']['htmltitle'] = 'uib-tabs-' . mb_ereg_replace('[^a-z0-9]+', '-', drupal_strtolower($tabs_field_list['field_uib_user_opt_content']['title']));
    $build['field_uib_user_opt_content']['#title'] = $tabs_field_list['field_uib_user_opt_content']['title'];
  }
  else {
    hide($build['field_uib_user_opt_title']);
    unset($tabs_field_list['field_uib_user_opt_title']);
    hide($build['field_uib_user_opt_content']);
    unset($tabs_field_list['field_uib_user_opt_content']);
  }
  $tabs_list_markup = '<ul class="uib-tabs-list">';
  foreach ($tabs_field_list as $field_name => $tabs_item) {
    $tabs_list_markup .= '<li><a href="#' . $tabs_item['htmltitle'] . '">' . $tabs_item['title'] . '</a></li>';
    $build[$field_name]['#prefix'] = '<div id="' . $tabs_item['htmltitle'] . '">';
    $build[$field_name]['#suffix'] = '</div>';
  }
  $tabs_list_markup .= '</ul>';
  $build['uib_tabs'] = array(
    '#weight' => 24,
    '#markup' => $tabs_list_markup,
    );
  $build['#group_children']['uib_tabs'] = 'group_user_work_1';

  // Do not show user history
  hide($build['summary']);
}

/**
 * Adds markup to a piece of html to make it look like a field
 */
function uib_user_add_field_markup($label, $class, $data) {
  return uib_zen_field(array(
    'label' => $label,
    'label_hidden' => FALSE,
    'classes' => $class,
    'element' => array('#field_name' => ''),
    'items' => array(
      array(
        '#markup' => $data,
        ),
      ),
    'attributes' => '',
    'title_attributes' => '',
    'content_attributes' => '',
    'item_attributes' => array(0 => ''),
    )
  );
}

/**
 * Implements hook_menu().
 */
function uib_user_menu() {
  $items = array();

  $items['user/uib/%'] = array(
    'page callback' => 'uib_user__uname_lookup',
    'page arguments' => array(2),
    'access callback' => TRUE,
  );

  $items['user/%user/card.vcf'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'uib_user__vcard_page',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Generate user redirect.
 */
function uib_user__uname_lookup($uname) {
  $u = user_load_by_name($uname);
  if ($u) {
    drupal_goto('user/' . $u->uid);
  }
  return MENU_NOT_FOUND;
}

/**
 * Generate vCard response for the given user.
 */
function uib_user__vcard_page($user_entity = NULL) {
  if (!empty($user_entity)) {
    drupal_add_http_header('Content-Type', 'application/vcard');
    $vcard = uib_user__vcard($user_entity);
    echo $vcard;
    return;
  }
  return MENU_NOT_FOUND;
}

/**
 * Generate the vCard for the given user.
 *
 * @param object $user_entity
 *
 * @return string
 * Vcard formatted data
 *
 */
function uib_user__vcard($user_entity) {
  $vc_user = entity_metadata_wrapper('user', $user_entity);
  // Name
  $first_name = $vc_user->field_uib_first_name->value();
  $last_name = $vc_user->field_uib_last_name->value();
  $full_name = "$first_name $last_name";

  // Position
  $title = $vc_user->field_uib_position->value();
  $title_alt = $vc_user->field_uib_user_alt_position->value();
  if (!empty($title_alt)) {
    $title .= ", $title_alt";
  }

  // Address
  $ou_address = $vc_user->field_uib_user_ou->field_uib_visit_address->value();
  $address_override = $vc_user->field_uib_user_alt_address->value();
  if (!empty($address_override)) {
    foreach ($address_override as $item => $value) {
      if (!empty($value) && $value != $ou_address[$item]) {
        $ou_address[$item] = $value;
      }
    }
  }

  $vcard = array();
  $vcard[] = 'BEGIN:VCARD';
  $vcard[] = 'VERSION:3.0';
  $vcard[] = "N:$last_name;$first_name;";
  $vcard[] = "FN:$full_name";
  $vcard[] = 'ORG:University of Bergen, ' . $vc_user->field_uib_user_ou->label();
  $vcard[] = "TITLE:$title";
  // $vcard[] = 'TEL;TYPE=WORK,VOICE:' . $vc_user->field_uib_phone->value();
  $vcard[] = 'TEL;TYPE=WORK,VOICE:' . $user_entity->field_uib_phone['und'][0]['value'];

  $adr = array();
  if (!empty($ou_address['thoroughfare'])) {
    $adr[] = $ou_address['thoroughfare'];
  }
  if (!empty($ou_address['postal_code'])) {
    $adr[] = $ou_address['postal_code'];
  }
  if (!empty($ou_address['locality'])) {
    $adr[] = $ou_address['locality'];
  }
  if ($ou_address['country'] == 'NO') {
    $adr[] = t('Norway');
  }
  $vcard[] = 'ADR;TYPE=WORK:;;' . implode(';', $adr);

  $vcard[] = 'EMAIL;TYPE=PREF,INTERNET:' . $vc_user->mail->value();
  $vcard[] = 'REV:' . date('c');
  $vcard[] = 'END:VCARD';
  $vcard[] = '';
  return implode("\n", $vcard);
}

/**
 * Implements hook_entity_info_alter()
 */
function uib_user_entity_info_alter(&$entity_info) {
  $entity_info['user']['view modes']['uib_user_teaser'] = array(
    'label' => t('User teaser'),
    'custom settings' => TRUE,
  );
}
