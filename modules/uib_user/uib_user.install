<?php

/**
 * Delete the uib_position_en field
 */
function uib_user_update_7000() {
  /* Must also explictly delete fields that are gone from the feature */
  field_delete_field('field_uib_position_en');
}

/**
* Update the collation used to sort employees by their last name
*/
function uib_user_update_7001() {
  if (db_driver() == 'pgsql') {
    db_query('ALTER TABLE field_data_field_uib_last_name ALTER COLUMN field_uib_last_name_value TYPE character varying(255) COLLATE "no_NO"');
  }
}

/**
* Update the collation used to sort employees by their last name (again).
*/
function uib_user_update_7002() {
  if (db_driver() == 'pgsql') {
    db_query('ALTER TABLE field_data_field_uib_last_name ALTER COLUMN field_uib_last_name_value TYPE character varying(255) COLLATE "nb_NO"');
  }
}

/**
* Populate the sort field with sortable last names
*/
function uib_user_update_7003() {
  if (field_info_field('field_uib_sort_name')) {
    if (db_driver() == 'pgsql') {
      db_query('ALTER TABLE field_data_field_uib_sort_name ALTER COLUMN field_uib_sort_name_value TYPE character varying(255) COLLATE "nb_NO"');
    }

    $result = db_select('field_data_field_uib_last_name', 'ln')
      ->fields('ln', array('entity_id', 'field_uib_last_name_value'))
      ->execute();

    foreach ($result as $item) {
      $sort_name = $item->field_uib_last_name_value;
      if (substr($sort_name, 0, 2) == 'Aa') {
        $sort_name = substr_replace($sort_name, 'Ã…', 0, 2);
      }
      db_insert('field_data_field_uib_sort_name')
        ->fields(array(
            'entity_type' => 'user',
            'bundle' => 'user',
            'entity_id' => $item->entity_id,
            'revision_id' => $item->entity_id,
            'field_uib_sort_name_value' => $sort_name,
            'delta' => 0,
            'language' => 'und',
          )
        )
        ->execute();
    }
  }
}

/**
 * Delete the uib_grid field
 */
function uib_user_update_7004() {
  /* Must also explictly delete fields that are gone from the feature */
  field_delete_field('field_grid');
}

/**
 * Initiate entity translation for users
 */
function uib_user_update_7005() {
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'user')
    ->execute();
  if (!empty($result['user'])) {
    $user_list = array_keys($result['user']);
    $chunk = 1000;
    while ($subset = array_splice($user_list, 0, $chunk)) {
      $users = entity_load('user', $subset);
      foreach ($users as $entity) {
        $wrapper = entity_metadata_wrapper('user', $entity);
        if ($wrapper->getIdentifier() > 1) {
          $pos_en = $wrapper->language('en')->field_uib_position->value();
          $pos_nb = $wrapper->language('nb')->field_uib_position->value();
          $trans_handler = entity_translation_get_handler('user', $entity);
          $translation = array(
            'status' => 1,
            'language' => 'en',
          );
          $trans_handler->setTranslation($translation);
          $translation = array(
            'status' => 1,
            'language' => 'nb',
            'source' => 'en',
          );
          $trans_handler->setTranslation($translation);
          if (stripos($wrapper->name->value(), 'stub for')) {
            uibx_log('Initiated translation for user stub ' . $wrapper->getIdentifier() . ' ' . $wrapper->name->value(), 'warning');
          }
          else {
            $wrapper->language('en')->field_uib_position->set($pos_en);
            $wrapper->language('nb')->field_uib_position->set($pos_nb);
            $wrapper->save();
            uibx_log('Initiated translation for user ' . $wrapper->getIdentifier() . ' ' . $wrapper->name->value(), 'notice');
          }
        }
      }
    }
  }
}

/**
 * Delete the uib_user_vcard field
 */
function uib_user_update_7006() {
  /* Must also explictly delete fields that are gone from the feature */
  field_delete_field('field_uib_user_vcard');
}

/**
 * Setup translation for room and url fields for user
 */
function uib_user_update_7007() {
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'user')
    ->execute();
  if (!empty($result['user'])) {
    $user_list = array_keys($result['user']);
    $chunk = 1000;
    while ($subset = array_splice($user_list, 0, $chunk)) {
      $users = entity_load('user', $subset);
      foreach ($users as $account) {
        $edit = array();
        $no_und = array();
        if ($account->uid > 1) {
          if (!empty($account->field_uib_user_room['und'])) {
            $edit['field_uib_user_room']['en'][0]['value'] = $account->field_uib_user_room['und'][0]['value'];
            $edit['field_uib_user_room']['nb'][0]['value'] = $account->field_uib_user_room['und'][0]['value'];
            $no_und['field_uib_user_room'] = array();
          }
          if (!empty($account->field_uib_user_url['und'])) {
            $edit['field_uib_user_url']['en'][0]['url'] = $account->field_uib_user_url['und'][0]['url'];
            $edit['field_uib_user_url']['en'][0]['title'] = $account->field_uib_user_url['und'][0]['title'];
            $edit['field_uib_user_url']['en'][0]['attributes'] = $account->field_uib_user_url['und'][0]['attributes'];
            $edit['field_uib_user_url']['nb'][0]['url'] = $account->field_uib_user_url['und'][0]['url'];
            $edit['field_uib_user_url']['nb'][0]['title'] = $account->field_uib_user_url['und'][0]['title'];
            $edit['field_uib_user_url']['nb'][0]['attributes'] = $account->field_uib_user_url['und'][0]['attributes'];
            $no_und['field_uib_user_url'] = array();
          }
        }
        if ($edit) {
          user_save($account, $no_und);
          user_save($account, $edit);
        }
      }
    }
  }
}
