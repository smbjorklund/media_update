<?php
/**
 * @file
 * Code for the Study feature.
 */

include_once 'uib_study.features.inc';

/**
 * Implements hook_block_info().
 */
function uib_study_block_info() {
  return array(
    'study_content' => array(
      'info' => t('Study content from FS'),
      'status' => TRUE,
    ),
    'study_contact' => array(
      'info' => t('Study contact content from FS'),
      'status' => TRUE,
    ),
    'study_facts' => array(
      'info' => t('Study facts from FS'),
      'status' => TRUE,
    ),
    'study_related' => array(
      'info' => t('Related study programs or courses from FS'),
      'status' => TRUE,
    ),
  );
}

function uib__getfs($nid, $json, $lang = FALSE) {
  $data = FALSE;
  $node = node_load($nid);
  if ($node->type == 'uib_study') {
    $url = 'http://fs-pres.test.uib.no/';
    $study = entity_metadata_wrapper('node', $node);
    $type = $study->field_uib_study_type->value();
    /* Fetch what to render from:
     * http://fs-pres.app.uib.no/[<lang>]/emne/<code>/render.json
     */
    if ($lang) {
      global $language;
      $lang = $language->language;
      if ($lang == 'nb') {
        $lang = 'nn'; // fs-pres Norwegian is ny-norsk
      }
      $url .= $lang . '/';
    }

    if ($type == 'course') {
      $url .= 'emne/';
    }
    elseif ($type == 'program') {
      $url .= 'studieprogram/';
    }
    else {
      uibx_log("Unknown study type; '$type'", 'error');
    }

    $slug = $study->field_uib_study_code->value();
    $slug = str_replace("/", "_", $slug);  # for courses like "NOR-U1/2"
    $url .= $slug . '/';
    $url .= 'render.json';
    $res = drupal_http_request($url);
    if ($res->code == 200 && $res->headers['content-type'] == 'application/json') {
      uibx_log('GET ' . $url);
      $data = drupal_json_decode($res->data);
    }
  }

  return $data;
}

/**
 * Implements hook_block_view().
 */
function uib_study_block_view($delta = '') {
  $block = array();
  $data = FALSE;
  switch ($delta) {
    case 'study_content':
      if (arg(0) == 'node' && is_numeric(arg(1))) {
        $data = uib__getfs(arg(1), 'render.json', TRUE);
        // Turn data into an real render array.
        $render = array();
        foreach ($data as $group) {
          if ($group['#group'] == 'ba_kontakt')
            continue;

          $render[$group['#group']] = array(
            'header' => array(
              '#type' => 'html_tag',
              '#tag' => 'h2',
              '#value' => check_plain($group['#title']),
            ),
          );
          foreach ($group['#items'] as $item) {
            if ($item['#type'] != 'EB_KONTAKT') {
              $render[$group['#group']][$item['#type']] = array(
                '#prefix' => '<h3>' . check_plain($item['#title']) . '</h3>',
                '#markup' => $item['#text'],
              );
            }
          }
        }
        $block['content']['fspres'][] = $render;
      }
      break;
    case 'study_contact':
      if (arg(0) == 'node' && is_numeric(arg(1))) {
        $data = uib__getfs(arg(1), 'render.json', TRUE);
        $render = array();
        foreach ($data as $group) {
          foreach ($group['#items'] as $item) {
            if ($item['#type'] == 'EB_KONTAKT' || $group['#group'] == 'ba_kontakt') {
              $render = array(
                '#prefix' => '<h3>' . check_plain($item['#title']) . '</h3>',
                '#markup' => $item['#text'],
              );
            }
          }
        }
        $block['content']['fspres'][] = $render;
      }
      break;
    case 'study_facts':
      if (arg(0) == 'node' && is_numeric(arg(1))) {
        $data = uib__getfs(arg(1), 'info.json', FALSE);
        $rows = array(
          array('Foo', '1'),
          array('Bar', '3'),
          array('Foobar', '7'),
        );
        $render = array(
          '#theme' => 'table',
          '#header' => array(t('Study facts')),
          '#rows' => $rows,
        );
        $block['content']['fspres'][] = $render;
      }
      break;
    case 'study_related':
      $items = array(
        'Foo',
        'Bar',
        'Foobar',
      );
      $render = array(
        '#theme' => 'item_list',
        '#title' => 'study_content_related',
        '#type' => 'ul',
        '#items' => $items,
      );
      $block['content']['fspres'][] = $render;
      break;
  }

  return $block;
}

/**
 * Implements hook_filter_info().
 *
 */
function uib_study_filter_info() {
  $filters['filter_studycodes'] = array(
    'title' => t('Link study codes to their nodes'),
    'description' => t('Study codes (whole words) are linked to their corresponding study nodes.'),
    'process callback' => '_uib_study_filter_process',
    'tips callback' => '_uib_study_filter_tips',
  );
  return $filters;
}

/**
 * process callback.
 *
 * ...do the filtering.
 */
function _uib_study_filter_process($text, $filter) {
  // Get list of study codes
  $codes = db_select('field_data_field_uib_study_code', 's')
    ->fields('s', array('field_uib_study_code_value'))
    ->execute()
    ->fetchCol();

  // Split html tagged text into content words
  $tmp = str_replace('<p>', "\n", $text);
  $tmp = strip_tags($tmp);
  $words = preg_split("/\s+/", $tmp, -1, PREG_SPLIT_NO_EMPTY);

  // Check which words are study codes
  $found_codes = array();
  foreach ($words as $word) {
    $clean_word = trim($word, '.,;?!-');
    if (in_array($clean_word, $codes)) {
      $found_codes[] = $clean_word;
    }
  }

  // insert links
  if ($found_codes) {
    foreach ($found_codes as $code) {
      $text = str_replace($code, l($code, 'emne/' . $code), $text);
    }
  }
  return $text;
}

/**
 * Filter tips callback for study filter.
 *
 */
function _uib_study_filter_tips($filter, $format, $long = FALSE) {
  return t('Study codes are linked to their content.');
}
