<?php
/**
 * @file
 * Code for the Study feature.
 */

include_once 'uib_study.features.inc';

/**
 * Implements hook_block_info().
 */
function uib_study_block_info() {
  return array(
    'study_content' => array(
      'info' => t('Study content from FS'),
      'status' => TRUE,
    ),
    'study_contact' => array(
      'info' => t('Study contact content from FS'),
      'status' => TRUE,
    ),
    'study_facts' => array(
      'info' => t('Study facts from FS'),
      'status' => TRUE,
    ),
    'study_related' => array(
      'info' => t('Related study programs or courses from FS'),
      'status' => TRUE,
    ),
    'study_testimonial' => array(
      'info' => t('Randomly selected testimonial referring to a Study'),
      'status' => TRUE,
    ),
  );
}

/**
 * Implements hook_flush_caches().
 */
function uib_study_flush_caches() {
  $caches = array();
  if (db_table_exists('cache_uib_study'))
    $caches[] = 'cache_uib_study';
  return $caches;
}

function uib_study__fspres_request($path) {
    $url = variable_get('uib_fspres_root', 'http://fs-pres.test.uib.no');
    $url .= '/';
    $url .= $path;

    $before = microtime(true);
    $res = drupal_http_request($url);

    $ms = sprintf("%.0fms", 1000 * (microtime(true) - $before));
    uibx_log("GET $url => $res->code $res->status_message ($ms)",
      $res->code == 200 ? 'notice' :
     ($res->code == 404 ? 'warning' :
                          'error')
    );

    return $res;
}

function uib_study__fspres_get_json($nid, $json, $lang = FALSE) {
  $data = FALSE;
  $node = node_load($nid);
  if ($node->type == 'uib_study') {
    $study = entity_metadata_wrapper('node', $node);
    $type = $study->field_uib_study_type->value();
    /* Fetch what to render from:
     * http://fs-pres.app.uib.no/[<lang>]/emne/<code>/render.json
     */
    $path = '';
    if ($lang) {
      global $language;
      $lang = $language->language;
      if ($lang == 'nb') {
        $lang = 'nn'; // fs-pres Norwegian is ny-norsk
      }
      $path .= $lang . '/';
    }

    if ($type == 'course') {
      $path .= 'emne/';
    }
    elseif ($type == 'program') {
      $path .= 'studieprogram/';
    }
    else {
      uibx_log("Unknown study type; '$type'", 'error');
    }

    $slug = $study->field_uib_study_code->value();
    $slug = str_replace("/", "_", $slug);  # for courses like "NOR-U1/2"
    $path .= $slug . '/';
    $path .= $json;
    if ($cache = cache_get($path, 'cache_uib_study')) {
      $data = $cache->data;
    }
    else {
      $res = uib_study__fspres_request($path);
      if ($res->code == 200 && $res->headers['content-type'] == 'application/json') {
        $data = drupal_json_decode($res->data);
        cache_set($path, $data, 'cache_uib_study', REQUEST_TIME + 4*3600);
      }
    }
  }

  return $data;
}

function uib_study__area($study_node) {
  $ou_nid = $study_node->field_uib_ou['und'][0]['target_id'];
  $query = new EntityFieldQuery;
  $results = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'area')
    ->propertyCondition('language', 'nb')
    ->fieldCondition('field_uib_ou', 'target_id', $ou_nid)
    ->fieldCondition('field_uib_area_type', 'value', array('institute', 'faculty'))
    ->execute();
  if (!empty($results['node'])) {
    list($area_nid) = array_keys($results['node']);
    $area = node_load($area_nid);
    return l($area->title, "node/" . $area_nid);
  }
  return false;
}

/**
 * Implements hook_block_view().
 */
function uib_study_block_view($delta = '') {
  $block = array();
  $data = FALSE;
  switch ($delta) {
    case 'study_content':
      if (arg(0) == 'node' && is_numeric(arg(1))) {
        $data = uib_study__fspres_get_json(arg(1), 'render.json', TRUE);
        // Turn data into an real render array.
        $render = array();
        foreach ($data as $group) {
          if ($group['#group'] == 'ba_kontakt')
            continue;

          $render[$group['#group']] = array(
            'header' => array(
              '#type' => 'html_tag',
              '#tag' => 'h2',
              '#value' => check_plain($group['#title']),
            ),
          );
          foreach ($group['#items'] as $item) {
            if ($item['#type'] != 'EB_KONTAKT') {
              $render[$group['#group']][$item['#type']] = array(
                '#prefix' => '<h3>' . check_plain($item['#title']) . '</h3>',
                '#markup' => uib_study__filter_text($item['#text']),
              );
            }
          }
        }
        $node = node_load(arg(1));
        $type = $node->field_uib_study_type['und'][0]['value'];
        if ($type == 'program') {
          $render['construction'] = array(
              '#type' => 'html_tag',
              '#tag' => 'h2',
              '#value' => t("Construction"),
          );
          $plan = uib_study__fspres_get_json(arg(1), 'plan.json');
          $t_rows = array();
          foreach ($plan['rows'] as $s_row) {
            $t_row = array();
            if ($s_row['depth'] > 1) {
              $t_row[] = array(
                'data' => '',
                'colspan' => $s_row['depth'] - 1,
                'class' => 'uib-cell-indent-' . ($s_row['depth'] - 1),
              );
              if (!empty($s_row['emneheader'])) {
                $headertitles = array(t('Course code'), t('Course title'), t('SP'), t('S'), t('A'));
                foreach ($headertitles as $title) {
                  $t_row[] = array(
                    'data' => $title,
                    'header' => TRUE,
                  );
                }
              }
              elseif (!empty($s_row['emnekode'])) {
                $cells = array(
                  uib_study__study_link($s_row['emnekode']),
                  uib_study__study_link($s_row['emnekode'], $s_row['name']),
                  $s_row['sp'],
                  $s_row['s'],
                  $s_row['a'],
                );
                foreach ($cells as $cell) {
                  $t_row[] = array(
                    'data' => $cell,
                    'class' => 'uib-study-data',
                  );
                }
                #$t_row[] = uib_study__study_link($s_row['emnekode']);
                #$t_row[] = uib_study__study_link($s_row['emnekode'], $s_row['name']);
                #$t_row[] = $s_row['sp'];
                #$t_row[] = $s_row['s'];
                #$t_row[] = $s_row['a'];
              }
              else {
                $t_row[] = array(
                  'data' => check_plain($s_row['name']),
                  'colspan' => 9 - $s_row['depth'],
                );
              }
            }
            else {
              $caption = $s_row['name'];
            }
            //$t_row[] = check_plain(drupal_json_encode($s_row));
            $t_rows[] = $t_row;
          }
          $render['construction table'] = array(
            '#theme' => 'table',
            '#caption' => $caption,
            '#rows' => $t_rows,
            '#attributes' => array('class' => 'uib-study-construction'),
          );
        }
        $block['content']['fspres'][] = $render;
      }
      break;
    case 'study_contact':
      if (arg(0) == 'node' && is_numeric(arg(1))) {
        $data = uib_study__fspres_get_json(arg(1), 'render.json', TRUE);
        $render = array();
        foreach ($data as $group) {
          foreach ($group['#items'] as $item) {
            if ($item['#type'] == 'EB_KONTAKT' || $group['#group'] == 'ba_kontakt') {
              $render = array(
                '#prefix' => '<h3>' . check_plain($item['#title']) . '</h3>',
                '#markup' => $item['#text'],
              );
            }
          }
        }
        $block['title'] = t("Contact");
        $block['content']['fspres'][] = $render;
      }
      break;
    case 'study_facts':
      if (arg(0) == 'node' && is_numeric(arg(1))) {
        $node = node_load(arg(1));
        $type = $node->field_uib_study_type['und'][0]['value'];
        $data = uib_study__fspres_get_json(arg(1), 'info.json', FALSE);
        $semester = uib_study__get_current_semester();
        $rows = array();
        $rows[] = array(t('Study points'), $data['studiepoeng']);
        if ($type == 'course') {
          $study_code = $data['emneid']['emnekode'];
          $rows[] = array(t('Teaching semester'), $data['undervisningssemester']);
          $rows[] = array(t('Teaching language'), '?');
          $rows[] = array(t('Study level'), $data['studieniva']);
          $rows[] = array(t('Number of semesters'), $data['antall-undsemester']);

          $tmp = uib_study__get_schedule_link($study_code, $semester);
          $rows[] = array(t('Schedule'), render($tmp));
          $tmp = uib_study__get_reading_list_link($study_code, $semester);
          $rows[] = array(t('Reading list'), render($tmp));
        }
        else {
          assert($type == 'program');
          // calculate duration of programme, based on 60 credits per year
          $duration = number_format(round($data['heltidsprosent'] * $data['studiepoeng'] / 60 / 100, 1) , 1, ',', ' ');
          $rows[] = array(t('Duration'), $duration . ' ' . t('years'));
          $rows[] = array(t('Number of seats'), '?');
          if (empty($data['gradnavn'])) {
            $rows[] = array(t('Degree'));
          }
          else {
            $rows[] = array(t('Degree'), $data['gradnavn']);
          }
          $rows[] = array(t('Study level'), $data['studieniva']);
        }

        $belongs_to = uib_study__area($node);
        if ($belongs_to) {
          $rows[] = array(t('Belongs to'), $belongs_to);
        }

        //$rows[] = array(t('Study type'), $type);

        $render = array(
          '#theme' => 'table',
          '#rows' => $rows,
        );
        $block['title'] = t('Study facts');
        $block['content']['fspres'][] = $render;
      }
      break;
    case 'study_related':
      $items = array(
        'Foo',
        'Bar',
        'Foobar',
      );
      $render = array(
        '#theme' => 'item_list',
        '#type' => 'ul',
        '#items' => $items,
      );
      $block['title'] = t("Related studies");
      $block['content']['fspres'][] = $render;
      break;

    case 'study_testimonial':
      if (arg(0) == 'node' && is_numeric(arg(1))) {
        $study_nid = arg(1);
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'node')
          ->entityCondition('bundle', 'uib_testimonial')
          ->propertyCondition('status', 1)
          ->fieldCondition('field_uib_study_programmes', 'target_id', $study_nid);
        $result = $query->execute();
        if (!empty($result)) {
          $testimonials = array_keys($result['node']);
          $max = count($testimonials) - 1;
          $selected = rand(0, $max);
          $selected_nid = $testimonials[$selected];
          $block['content'] = node_view(node_load($selected_nid), 'teaser');
          $block['subject'] = t('Selected testimonial');
        }
      }
      break;
  }

  return $block;
}

/**
 * Implements hook_filter_info().
 *
 */
function uib_study_filter_info() {
  $filters['filter_studycodes'] = array(
    'title' => t('Link study codes to their nodes'),
    'description' => t('Study codes (whole words) are linked to their corresponding study nodes.'),
    'process callback' => 'uib_study__filter_text',
    'tips callback' => '_uib_study_filter_tips',
  );
  return $filters;
}

/**
 * Replace study codes in the text with an HTML link to the corresponding study pages.
 */
function uib_study__filter_text($text) {
  // Split html tagged text into content words
  $tmp = str_replace('&nbsp;', ' ', $text);
  $tmp = str_replace('<p>', "\n<p> ", $tmp);
  $tmp = str_replace('<br />', "\n<br /> ", $tmp);
  $tmp = str_replace('<br>', "\n<br> ", $tmp);
  $tmp = str_replace('<div', "\n<div", $tmp);
  $tmp = str_replace('<ul', "\n<ul", $tmp);
  $tmp = str_replace('</li><li>', "</li>\n<li>", $tmp);
  $tmp = strip_tags($tmp);
  $words = preg_split("/\s+/", $tmp, -1, PREG_SPLIT_NO_EMPTY);
  // Check which words are study codes
  $found_codes = array();
  foreach ($words as $word) {
    $clean_word = trim($word, '.,;:?!-()/');
    if (uib_study__study_exists($clean_word)) {
      $found_codes[$clean_word] = TRUE;
    }
  }

  // insert links
  if ($found_codes) {
    foreach (array_keys($found_codes) as $code) {
      $text = str_replace($code, uib_study__study_link($code), $text);
    }
  }
  return $text;
}

/**
 * Filter tips callback for study filter.
 *
 */
function _uib_study_filter_tips($filter, $format, $long = FALSE) {
  return t('Study codes are linked to their content.');
}

/**
 *  Returns the path to the page for given study code.  Returns FALSE for codes
 *  that isn't in use.
 */
function uib_study__study_path($code) {
  static $study_nid;
  if (!isset($study_nid)) {
    $result = db_query(
      'SELECT n.nid, c.field_uib_study_code_value
      FROM {node} n, {field_data_field_uib_study_code} c
      WHERE n.status = 1 AND n.type = :studytype AND c.entity_id = n.nid',
      array(':studytype' => 'uib_study')
      );
    foreach ($result as $record) {
      $study_nid[$record->field_uib_study_code_value] = $record->nid;
    }
  }
  if (isset($study_nid[$code])) {
    return "node/$study_nid[$code]";
  }
  return FALSE;
}

/**
 *  Returns the TRUE if the given study code is in use.
 */
function uib_study__study_exists($code) {
  return !!uib_study__study_path($code);
}

/**
 *  Linkify a study code.  Returns $code unchanged if code isn't valid.
 *
 *  The optional $text argument can be provided to replace the link text.
 */
function uib_study__study_link($code, $text=NULL) {
  $text = $text ? $text : $code;
  $path = uib_study__study_path($code);
  return $path ? l($text, $path) : $text;
}

/**
 * Implements hook_field_formatter_info().
 */
function uib_study_field_formatter_info() {
  return array(
    'uib_study_title_formatter' => array(
      'label' => t('Display a field'),
      'description' => t('Display a field instead of the node title.'),
      'field types' => array('entityreference'),
      'settings' => array(
        'uib_study_field_name' => '',
        'uib_study_link' => 0,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function uib_study_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();
  $element['uib_study_field_name'] = array(
    '#type'           => 'textfield',
    '#title'          => t('Field name'),
    '#description'    => t('The name of the uib field to use'),
    '#default_value'  => $settings['uib_study_field_name'],
  );
  $element['uib_study_link'] = array(
    '#type'           => 'checkbox',
    '#title'          => t('Link to entity'),
    '#description'    => t('Indicate if the field should link to its entity'),
    '#default_value'  => $settings['uib_study_link'],
  );
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function uib_study_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $lnk = '';
  if (!$settings['uib_study_link']) {
    $lnk = 'no ';
  }
  $summary = t('Show field "@the_field", ' . $lnk . 'link to entity', array(
    '@the_field' => $settings['uib_study_field_name'],
  ));
  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function uib_study_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  if ($display['type'] == 'uib_study_title_formatter') {
    $elements = array();
    $settings = $display['settings'];
    if (!empty($settings['uib_study_field_name'])) {
      foreach ($items as $delta => $item) {
        $node = entity_metadata_wrapper('node', node_load($item['target_id']));
        $language = $entity->language;
        if (empty($language) || $language == 'und') {
          $language = 'nb';
        }
        $display_text = $node->language($language)->$settings['uib_study_field_name']->value();
        if ($settings['uib_study_link']) {
          $elements[$delta]['#markup'] = l($display_text, 'node/' . $item['target_id']);
        }
        else {
          $elements[$delta]['#markup'] = $display_text;
        }
      }
    }
    return $elements;
  }
}

function uib_study__get_current_semester() {
  $current_semester = (date('n') > 6 ? 'h' : 'v');
  return date('Y') . $current_semester;
}

function uib_study__get_schedule_link($study_code, $semester) {
  global $language;
  $lang = ($language->language == 'nb' ? '' : 'en');
  $schedule = array(
    '#theme' => 'link',
    '#text' => t('Schedule'),
    '#path' => 'http://rom.app.uib.no/timeplanliste.php?emne='. $study_code . '&periode=' . $semester . '&lang=' . $lang . '&simple=1',
    '#options' => array(
      'attributes' => array(),
      'html' => TRUE,
    ),
  );
  return $schedule;
}

function uib_study__get_reading_list_link($study_code, $semester) {
  global $language;
  $locale = ($language->language == 'nb' ? '' : 'en_US');
  $reading_list = array(
    '#theme' => 'link',
    '#text' => t('Reading list'),
    '#path' => 'https://miside.uib.no/fs-cron/pensum?emnekode='. $study_code . '&periode=' . $semester . '&locale=' . $locale . '&simple=1',
    '#options' => array(
      'attributes' => array(),
      'html' => TRUE,
    ),
  );
  return $reading_list;
}
