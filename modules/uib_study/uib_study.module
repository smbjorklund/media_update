<?php
/**
 * @file
 * Code for the Study feature.
 */

include_once 'uib_study.features.inc';

/**
 * Implements hook_block_info().
 */
function uib_study_block_info() {
  return array(
    'study_content' => array(
      'info' => t('Study content from FS'),
      'status' => TRUE,
    ),
    'study_contact' => array(
      'info' => t('Study contact content from FS'),
      'status' => TRUE,
    ),
    'study_facts' => array(
      'info' => t('Study facts from FS'),
      'status' => TRUE,
    ),
    'study_related' => array(
      'info' => t('Related study programs or courses from FS'),
      'status' => TRUE,
    ),
    'study_testimonial' => array(
      'info' => t('Randomly selected testimonial referring to a Study'),
      'status' => TRUE,
    ),
    'study_semester_toggle' => array(
      'info' => t('Possibility to toggle semesters'),
      'status' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function uib_study_menu() {
  // Arrange for unaliased uib_study pages to return 404
  foreach (explode(' ', 'emne studieprogram course studyprogramme') as $prefix) {
    $items["$prefix/%"] = array(
      'page callback' => 'uib_study__not_found',
      'access callback' => TRUE,
    );
  }

  // studieplan page
  foreach (explode(' ', 'studieprogram studyprogramme') as $prefix) {
    $items["$prefix/%/plan"] = array(
      'page callback' => 'uib_study__studyplan',
      'page arguments' => array(1),
      'access callback' => TRUE,
    );
  }

  foreach (explode(' ', 'studieprogram studyprogramme') as $prefix) {
    $items["$prefix/%/%/plan"] = array(
      'page callback' => 'uib_study__studyplan',
      'page arguments' => array(1,2),
      'access callback' => TRUE,
    );
  }
  return $items;
}

function uib_study__not_found() {
  return MENU_NOT_FOUND;
}

function uib_study__studyplan($code, $code2 = NULL) {
  uib_area__get_current(variable_get('uib_study_area_nid'));

  if ($code2) {
    $path = uib_study__study_path($code2);
    if (empty($path)) {
      $path = uib_study__study_path($code . $code2);
    }
  }
  else {
    $path = uib_study__study_path($code);
  }
  if (empty($path))
    return MENU_NOT_FOUND;
  $study = entity_metadata_wrapper('node', node_load(substr($path, 5)));
  $study_code = $study->field_uib_study_code->value();
  $fspres_code = $code2 ? $code . '/' . $study_code : $code;

  $page = array();
  $page['header'] = array(
    '#type' => 'html_tag',
    '#tag' => 'h1',
    '#value' => l($study_code . ' ' . $study->field_uib_study_title->value(), $path),
  );
  drupal_set_title(t('Study plan') . ' , ' . $study_code . ' ' . $study->field_uib_study_title->value(), $path);

  if (!uib_study__infotyper_render($page,
    uib_study__fspres_get_json(uib_study__fspres_lang() . "/studieprogram/$fspres_code/render.json"),
    function ($group) { return substr($group, -11) == '_studieplan'; }
  )) {
    drupal_set_message(t('This page has not been translated yet'), 'warning');
    $page['missing'] = array(
      '#markup' => t('Study plan missing'),
    );
  }

  return $page;
}

function uib_study__infotyper_render(&$page, $render, $filter) {
  if (empty($render))
    return FALSE;
  $wrong_chars = array(' ', 'æ', 'ø' ,'å');
  $count = 0;
  $is_course = uib_study__is_course();
  foreach ($render as $group) {
    if ($filter && !$filter($group['#group']))
      continue;
    $group_title = check_plain($group['#title']);
    $group_title_html_id = str_replace($wrong_chars, '-', strtolower($group_title));
    $count++;
    $page[$group['#group']] = array(
      'header' => array(
        '#type' => 'html_tag',
        '#tag' => 'h2',
        '#value' => $group_title,
      ),
      '#prefix' => '<div id="uib-tabs-'. $group_title_html_id . '">',
      '#suffix' => '</div>',
    );
    foreach ($group['#items'] as $item) {
      $page[$group['#group']][$item['#type']] = array(
        '#prefix' => '<h3>' . check_plain($item['#title']) . '</h3>',
        '#markup' => uib_study__text_markup($item, $is_course),
      );
    }
    if (array_key_exists('em-emnebeskrivelse', $page)) {
      $page['em-emnebeskrivelse']['header'] = NULL;
    }
  }
  return $count;
}

/**
 * Implements hook_flush_caches().
 */
function uib_study_flush_caches() {
  $caches = array();
  if (db_table_exists('cache_uib_study'))
    $caches[] = 'cache_uib_study';
  return $caches;
}

function uib_study__fspres_request($path) {
  $url = variable_get('uib_fspres_root', 'http://fs-pres.test.uib.no');
  $url .= '/';
  $url .= $path;

  $before = microtime(true);
  $res = drupal_http_request($url);

  $log_message = "GET $url => ";
  $log_message .= $res->code < 0 ? "$res->error errno=" . -$res->code : "$res->code $res->status_message";
  $log_message .= sprintf(" (%.0fms)", 1000 * (microtime(true) - $before));
  $severity = 'notice';
  if ($res->code == 404) {
    $expected_404s = array(
      'sted/184.11.74',
      'sted/184.11.1',
      'sted/184.11.82',
      'sted/184.12.80',
      'sted/184.12.90',
      'sted/184.13.2',
      'sted/184.13.15',
      'sted/184.13.16',
      'sted/184.13.17',
      'sted/184.13.18',
      'sted/184.13.27',
      'sted/184.13.44',
      'sted/184.13.57',
      'sted/184.15.1',
    );
    $subpath = substr($path, 0, strrpos($path, '/'));
    if (!in_array($subpath, $expected_404s)) {
      $severity = 'warning';
    }
  }
  elseif ($res->code != 200) {
    $severity = 'error';
  }
  uibx_log($log_message, $severity);
  return $res;
}

/**
 * Fetch the given JSON object from fs-pres.
 *
 * Returns the deserialized array on success, FALSE on 404 and NULL otherwise
 * Responses are cached for 4 hours.
 */
function uib_study__fspres_get_json($path) {
  $data = FALSE;
  if ($cache = cache_get($path, 'cache_uib_study')) {
    $data = $cache->data;
    if (is_null($data)) {
      uibx_log("Cached fs-pres failure for $path", 'warning');
    }
  }
  else {
    $res = uib_study__fspres_request($path);
    if ($res->code == 200 && $res->headers['content-type'] == 'application/json') {
      $data = drupal_json_decode($res->data);
      cache_set($path, $data, 'cache_uib_study', REQUEST_TIME + 4*3600);
    }
    elseif ($res->code != 404) {
      if ($res->code == 200) {
        uibx_log("$path response wasn't JSON; but " . $res->headers['content-type'], 'error');
      }
      $data = NULL;
      cache_set($path, $data, 'cache_uib_study', REQUEST_TIME + 60);
    }
  }
  return $data;
}

function uib_study__fspres_lang() {
  global $language;
  $lang = $language->language;
  if ($lang == 'nb') {
    $lang = 'nn'; // fs-pres Norwegian is ny-norsk
  }
  return $lang;
}

function uib_study__fspres_get_node_json($nid, $json, $lang = FALSE) {
  $node = node_load($nid);
  if ($node->type != 'uib_study')
    return FALSE;

  $study = entity_metadata_wrapper('node', $node);
  $type = $study->field_uib_study_type->value();
  /* Fetch what to render from:
   * http://fs-pres.app.uib.no/[<lang>]/emne/<code>/render.json
   */
  $path = '';
  if ($lang) {
    $path .= uib_study__fspres_lang() . '/';
  }

  $path_objects = array($study);
  if ($type == 'course') {
    $path .= 'emne/';
  }
  elseif ($type == 'program' || $type == 'specialization') {
    $path .= 'studieprogram/';
  }
  else {
    uibx_log("Unknown study type; '$type'", 'error');
  }
  if ($type == 'specialization') {
    $program = entity_metadata_wrapper('node', $study->field_uib_study_part_of[0]->value());
    if ($json == 'render.json') {
      array_unshift($path_objects, $program);
    }
    else {
      $path_objects = array($program);
    }
  }

  foreach ($path_objects as $path_object) {
    $slug = $path_object->field_uib_study_code->value();
    $slug = str_replace("/", "_", $slug);  # for courses like "NOR-U1/2"
    $path .= $slug . '/';
  }
  $path .= $json;
  return uib_study__fspres_get_json($path);
}

function uib_study__area($study_node, $lang) {
  $ou_nid = $study_node->field_uib_ou['und'][0]['target_id'];
  $query = new EntityFieldQuery;
  $results = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'area')
    ->propertyCondition('language', $lang)
    ->fieldCondition('field_uib_ou', 'target_id', $ou_nid)
    ->fieldCondition('field_uib_area_type', 'value', array('institute', 'faculty'))
    ->execute();
  if (!empty($results['node'])) {
    list($area_nid) = array_keys($results['node']);
    $area = node_load($area_nid);
    return l($area->title, "node/" . $area_nid);
  }
  return false;
}

/**
 * Implements hook_block_view().
 */
function uib_study_block_view($delta = '') {
  global $language;
  $block = array();
  $data = FALSE;
  $is_course = uib_study__is_course();
  switch ($delta) {
    case 'study_content':
      $splice_list = array(
        'EB_SPRAK',
        'B_RE_PLASS',
        'EB_KONTAKT',
        'B_RE_INFO',
      );

      $node = menu_get_object();
      if ($node) {
        $data = uib_study__fspres_get_node_json($node->nid, 'render.json', TRUE);
        if (empty($data)) {
          $block['content'] = array(
            '#markup' => '<div class="fs-error">' . t('Information about this study isn\'t currently available. Please try again later!') . '</div>',
          );
          break;
        }
        foreach ($splice_list as $splice_item) {
          uib_study__extract_study_info($data, $splice_item);
        }

        $render = array();
        uib_study__infotyper_render($render, $data, function ($group) {
          return !in_array($group, array('ba_kontakt', 'em_introduksjon')) && substr($group, -11) != '_studieplan';
        });

        $type = $node->field_uib_study_type['und'][0]['value'];
        if ($type == 'program' || $type == 'specialization') {
          $tab_items = array();
          $wrong_chars = array(' ', 'æ', 'ø' ,'å');
          foreach ($data as $group) {
            $group_title = check_plain($group['#title']);
            if (substr($group['#group'], -11) == '_studieplan')
              continue;
            $group_title_html_id = str_replace($wrong_chars, '-', strtolower($group_title));
            $tab_items[] = '<a href="#uib-tabs-' . $group_title_html_id . '">' . $group_title . '</a>';
          }
          $group_title = t('Construction');
          $tab_items[] = '<a href="#uib-tabs-construction">' . $group_title . '</a>';
          $render['construction'] = array(
              '#type' => 'html_tag',
              '#tag' => 'h2',
              '#value' => t("Construction"),
          );
          $plan = uib_study__fspres_get_node_json($node->nid, 'plan.json', TRUE);
          $t_rows = array();
          $max_depth = 0;
          foreach ($plan['rows'] as $row) {
            if ($row['depth'] > $max_depth) $max_depth = $row['depth'];
          }
          foreach ($plan['rows'] as $s_row) {
            $t_row = array();
            if ($s_row['depth'] > 1) {
              if (!empty($s_row['emneheader'])) {
                $t_row[] = uib_study__insert_t_row($max_depth);
                $headertitles = array(t('Course code'), t('Course title'), t('SP'), t('S'), t('A'));
                foreach ($headertitles as $title) {
                  $t_row[] = array(
                    'data' => $title,
                    'header' => TRUE,
                  );
                }
              }
              elseif (!empty($s_row['emnekode'])) {
                $t_row[] = uib_study__insert_t_row($max_depth);
                $emnenavn = $s_row['name'];
                if (!$emnenavn)
                  $emnenavn = '<title>';  # will be expanded
                $cells = array(
                  uib_study__study_link($s_row['emnekode']),
                  uib_study__study_link($s_row['emnekode'], $emnenavn),
                  $s_row['sp'],
                  $s_row['s'],
                  strcmp($s_row['a'], $s_row['s']) ? $s_row['a'] : '',
                );
                foreach ($cells as $cell) {
                  $t_row[] = array(
                    'data' => $cell,
                    'class' => 'uib-study-data',
                  );
                }
                #$t_row[] = uib_study__study_link($s_row['emnekode']);
                #$t_row[] = uib_study__study_link($s_row['emnekode'], $s_row['name']);
                #$t_row[] = $s_row['sp'];
                #$t_row[] = $s_row['s'];
                #$t_row[] = $s_row['a'];
              }
              else {
                $t_row[] = uib_study__insert_t_row($s_row['depth']);
                $td = array(
                  'data' => check_plain($s_row['name']),
                  'colspan' => 5 + $max_depth - $s_row['depth'],
                );
                if (isset($s_row['specialization'])) {
                  $spec_path = uib_study__study_path($s_row['specialization']);
                  if ($spec_path) {
                    $td['data'] = l($td['data'], $spec_path);
                  }
                  $td['class'] = 'uib-study-specialization';
                }
                if (isset($s_row['description'])) {
                  # fake another row then
                  $tmp = $t_row;
                  $tmp[] = $td;
                  $t_rows[] = $tmp;

                  # and make the current row display the description
                  $td['data'] = uib_study__filter_text($s_row['description']);
                  $td['class'] = 'uib-study-description';
                }
                $t_row[] = $td;
              }
            }
            else {
              $caption = $s_row['name'];
            }
            //$t_row[] = check_plain(drupal_json_encode($s_row));
            $t_rows[] = $t_row;
          }
          $render['construction table'] = array(
            '#theme' => 'table',
            '#caption' => $caption,
            '#rows' => $t_rows,
            '#attributes' => array('class' => 'uib-study-construction'),
            '#prefix' => '<div id="uib-tabs-construction">',
            '#suffix' => '</div>',
          );
          $toc = array(
            '#items' => $tab_items,
            '#theme' => 'item_list',
            '#attributes' => array(
              'class' => array('uib-tabs-list'),
            ),
          );
        }
        $block['content']['fspres'][] = $render;
        if (isset($toc)) {
          $block['content']['fspres']['#prefix'] = render($toc);
        }
      }
      break;
    case 'study_contact':
      $node = menu_get_object();
      if ($node) {
        $data = uib_study__fspres_get_node_json($node->nid, 'render.json', TRUE);
        $render = array();
        $tmp = uib_study__extract_study_info($data, 'EB_KONTAKT');
        if (!$tmp) {
          $tmp = uib_study__extract_study_info($data, 'B_RE_INFO');
        }
        if ($tmp) {
          $render = array(
            '#prefix' => '<h3>' . check_plain($tmp['#title']) . '</h3>',
            '#markup' => uib_study__text_markup($tmp, $is_course),
          );
        }
        if ($render) {
          $block['title'] = t("Contact");
          $block['content']['fspres'][] = $render;
        }
      }
      break;
    case 'study_facts':
      $node = menu_get_object();
      if ($node) {
        $type = $node->field_uib_study_type['und'][0]['value'];
        $data = uib_study__fspres_get_node_json($node->nid, 'info.json', FALSE);
        if (empty($data))
          break;
        $data_2 = uib_study__fspres_get_node_json($node->nid, 'render.json', TRUE);
        $rows = array();
        if ($type == 'course') {
          if ($data['studieniva'] == 'FU') {
            $study_code = $data['emneid']['emnekode'];
            $rows[] = array(t('Course code'), $study_code);
            $tmp = uib_study__studieniva($data['studieniva']);
            $rows[] = array(t('Study level'), check_plain($tmp));
          }
          else {
            $study_code = $data['emneid']['emnekode'];
            $rows[] = array(t('Course code'), $study_code);
            $rows[] = array(t('Study points'), $data['studiepoeng']);
            $rows[] = array(t('Teaching semester'), $data['undervisningssemester']);
            $tmp = uib_study__extract_study_info($data_2, 'EB_SPRAK');
            $rows[] = array(t('Teaching language'), uib_study__text_markup($tmp, $is_course, TRUE));
            $tmp = uib_study__studieniva($data['studieniva']);
            if (!empty($tmp)) {
              $rows[] = array(t('Study level'), check_plain($tmp));
            }
            $rows[] = array(t('Number of semesters'), $data['antall-undsemester']);
            $resources = array(
              '#theme' => 'item_list',
              '#items' => array(),
            );
            $semester = uib_study__get_current_semester();
            $tmp = uib_study__get_resource_links('schedule', $study_code);
            $resources['#items'][] = render($tmp);
            $tmp = uib_study__get_resource_links('reading_list', $study_code);
            $resources['#items'][] = render($tmp);
            $rows[] = array(t('Resources'), render($resources));
          }
        }
        elseif ($type == 'program' or $type == 'specialization') {
          $rows[] = array(t('Study programme code'), $data['studieprogramkode']);
          $rows[] = array(t('Study points'), $data['studiepoeng']);
          // calculate duration of programme, based on 60 credits per year
          global $language;
          $duration = number_format(round($data['heltidsprosent'] * $data['studiepoeng'] / 60 / 100, 1) , 1, ',', ' ');
          $rows[] = array(t('Duration'), $duration . ' ' . t('years'));
          $tmp = uib_study__extract_study_info($data_2, 'B_RE_PLASS');
          $rows[] = array(t('Number of seats'), uib_study__text_markup($tmp, $is_course, TRUE));
          if (empty($data['gradnavn'])) {
            $rows[] = array(t('Degree'));
          }
          else {
            if (isset($data['gradnavn:en'])) {
              $degree = $language->language == 'en' ? $data['gradnavn:en'] : $data['gradnavn'];
            }
            else {
              $degree = $data['gradnavn'];
            }
            $rows[] = array(t('Degree'), $degree);
          }
          $tmp = uib_study__extract_study_info($data_2, 'SP_SPRAK');
          if (strlen($tmp['#text']) <= 30) {
            $rows[] = array(t('Teaching language'), $tmp['#text']);
          }
          $tmp = uib_study__extract_study_info($data_2, 'SP_START');
          $rows[] = array(t('Study start'), $tmp['#text']);
          if (uib_study__has_study_plan($data_2)) {
            $study_path = uib_study__study_path($node->field_uib_study_code['und'][0]['value']);
            $study_plan_url = l(t('Study plan'), (drupal_get_path_alias($study_path) . '/plan'));
            $rows[] = array(t('Resources'), $study_plan_url);
          }
        }

        $belongs_to = uib_study__area($node, $language->language);
        if ($belongs_to) {
          $rows[] = array(t('Belongs to'), $belongs_to);
        }

        //$rows[] = array(t('Study type'), $type);

        foreach ($rows as $i => $row) {
          if (empty($row[1])) $rows[$i] = array();
        }

        $render = array(
          '#theme' => 'table',
          '#rows' => $rows,
        );
        $block['title'] = t('Study facts');
        $block['content']['fspres'][] = $render;
      }
      break;

    case 'study_related':
      $node = menu_get_object();
      if ($node) {
        $display_settings = array(
          'label' => 'hidden',
          'type' => 'uib_study_title_formatter',
          'settings' => array(
            'uib_study_field_name' => 'field_uib_study_title',
            'uib_study_link' => 1,
          ),
        );
        $block['title'] = t("Mandatory part of");
        $block['content'] = field_view_field('node', $node, 'field_uib_study_part_of', $display_settings);
      }
      break;

    case 'study_testimonial':
      $node = menu_get_object();
      if ($node) {
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'node')
          ->entityCondition('bundle', 'uib_testimonial')
          ->propertyCondition('status', 1)
          ->fieldCondition('field_uib_study_programmes', 'target_id', $node->nid);
        $result = $query->execute();
        if (!empty($result)) {
          $testimonials = array_keys($result['node']);
          $max = count($testimonials) - 1;
          $selected = rand(0, $max);
          $selected_nid = $testimonials[$selected];
          $block['content'] = node_view(node_load($selected_nid), 'teaser');
          $block['subject'] = t('Selected testimonial');
        }
      }
      break;

    case 'study_semester_toggle':
      $node = menu_get_object();
      if ($node && uib_study__is_course()) {
        $data = uib_study__fspres_get_node_json($node->nid, 'render.json', TRUE);
        if (empty($data))
          break;
        list($previous_semester, $current_semester, $next_semester) = uib_study__get_adjacent_semesters();
        $prev = FALSE;
        $next = FALSE;
        foreach ($data as $group) {
          foreach ($group['#items'] as $item) {
            if (isset($item['#variants']) && count($item['#variants']) > 0) {
              foreach ($item['#variants'] as $sem_key => $sem_variant) {
                if ($sem_key == $previous_semester) {
                  $prev = TRUE;
                }
                elseif ($sem_key == $next_semester) {
                  $next = TRUE;
                }
                if ($prev && $next) {
                  break 3;
                }
              }
            }
          }
        }
        if ($prev || $next) {
           $markup = '<ul>';
          if ($prev) {
            $markup .= '<li><a href="#" class="previous">' . uib_study__semester_name($previous_semester);
            $markup .= ' (' . t('Previous semester') . ')' . '</a></li>';
          }
          $markup .= '<li><a href="#" class="current is-active">' . uib_study__semester_name($current_semester);
          $markup .= ' (' . t('Current semester') . ')' . '</a></li>';
          if ($next) {
            $markup .= '<li><a href="#" class="next">' . uib_study__semester_name($next_semester);
            $markup .= ' (' . t('Next semester') . ')' . '</a></li>';
          }
          $markup .= '</ul>';
          $block['subject'] = t('Select semester');
          $block['content'] = $markup;
        }
      }
      break;
  }

  return $block;
}

/**
 * Expand the study level code to a more readable string
 */
function uib_study__studieniva($code) {
  $map = uib_study__fspres_get_json("studieniva/info.json");
  if (!empty($map[$code])) {
    $lang = uib_study__fspres_lang();
    if (!empty($map[$code][$lang]) && $map[$code][$lang] != '-')
      return $map[$code][$lang];
  }
  return NULL;
}

/**
 * Implements hook_filter_info().
 *
 */
function uib_study_filter_info() {
  $filters['filter_studycodes'] = array(
    'title' => t('Link study codes to their nodes'),
    'description' => t('Study codes (whole words) are linked to their corresponding study nodes.'),
    'process callback' => 'uib_study__filter_text',
    'tips callback' => '_uib_study_filter_tips',
  );
  return $filters;
}

/**
 * Replace study codes in the text with an HTML link to the corresponding study pages.
 * Avoid touching existing links. The filter may fail if there are words with embedded
 * html tags.
 */
function uib_study__filter_text($text) {
  // Check if there is any study code in the text
  // before parsing it.
  $study_codes = array_keys(uib_study__study_map());
  $pattern = implode('|', $study_codes);
  // Fix some study code characters that interfere with regex
  $pattern = str_replace('/', '\/', $pattern);
  $pattern = str_replace('-', '\-', $pattern);
  $pattern = '/\b(?:' . $pattern . ')\b/';
  if (preg_match($pattern, $text)) {
    $in_tag = FALSE;
    $in_a = FALSE;
    $word = '';
    $out = '';
    $i = 0;
    while (1) {
      $ch = drupal_substr($text, $i, 1);
      if ($ch === '') {
        if ($word) {
          $out .= uib_study__word_code_chk($word);
        }
        break;
      }
      switch ($ch) {

        case '<':
          $in_tag = TRUE;
          if (drupal_strtolower(drupal_substr($text, ($i+1), 1)) == 'a') {
            // anchor tag
            $in_a = TRUE;
          }
          if ($word) {
            // end of word
            $out .= uib_study__word_code_chk($word);
            $word = '';
          }
          $out .= $ch;
          break;

        case '>':
          $in_tag = FALSE;
          if ($in_a && drupal_strtolower(drupal_substr($text, ($i-2), 2)) == '/a') {
            // end of anchor tag
            $in_a = FALSE;
          }
          $out .= $ch;
          break;

        case ' ':
        case "\t":
        case "\n":
        case "\r":
        case '.':
        case ',':
        case ';':
        case ':':
        case '?':
        case '!':
        case '(':
        case ')':
          if ($word) {
            // end of word
            $out .= uib_study__word_code_chk($word) . $ch;
            $word = '';
          }
          else {
            $out .= $ch;
          }
          break;

        default:
          if ($in_tag || $in_a) {
            $out .= $ch;
          }
          else {
            $word .= $ch;
          }
      }

      $i++;
    }
    return $out;
  }
  return $text;
}

/**
 * Check if a word is a study code
 * Return a link if it is, else return the word.
 * Keeps track of previously checked words that were not codes.
 */
function uib_study__word_code_chk($word) {
  static $non_codes = array();
  if (!in_array($word, $non_codes)) {
    if (uib_study__study_exists($word)) {
      $word = uib_study__study_link($word);
    }
    else {
      $non_codes[] = $word;
    }
  }
  return $word;
}

/**
 * Filter tips callback for study filter.
 *
 */
function _uib_study_filter_tips($filter, $format, $long = FALSE) {
  return t('Study codes are linked to their content.');
}

/**
 *  Returns array reference that maps study codes into nid
 */
function &uib_study__study_map() {
  static $study_nid;
  if (!isset($study_nid)) {
    $result = db_query(
      'SELECT n.nid, c.field_uib_study_code_value
      FROM {node} n, {field_data_field_uib_study_code} c
      WHERE n.status = 1 AND n.type = :studytype AND c.entity_id = n.nid',
      array(':studytype' => 'uib_study')
      );
    foreach ($result as $record) {
      $study_nid[$record->field_uib_study_code_value] = $record->nid;
    }
  }
  return $study_nid;
}

/**
 *  Returns the path to the page for given study code.  Returns FALSE for codes
 *  that are not in use.
 */
function uib_study__study_path($code) {
  $study_nid = &uib_study__study_map();
  if (isset($study_nid[$code])) {
    return "node/$study_nid[$code]";
  }
  return FALSE;
}

/**
 *  Returns the TRUE if the given study code is in use.
 */
function uib_study__study_exists($code) {
  return !!uib_study__study_path($code);
}

/**
 *  Linkify a study code.  Returns $code unchanged if code isn't valid.
 *
 *  The optional $text argument can be provided to replace the link text.
 *  The special $text value of "<title>" will be replaced with the title of
 *  the study.
 */
function uib_study__study_link($code, $text=NULL) {
  $text = $text ? $text : $code;
  $path = uib_study__study_path($code);
  if ($path) {
    if ($text == '<title>') {
      # expand the name
      $nid = substr($path, 5);
      $node = node_load($nid);
      global $language;
      $text = $node->field_uib_study_title[$language->language][0]['value'];
    }
    return l($text, $path);
  }
  else {
    return check_plain($text);
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function uib_study_field_formatter_info() {
  return array(
    'uib_study_title_formatter' => array(
      'label' => t('Display a field'),
      'description' => t('Display a field instead of the node title.'),
      'field types' => array('entityreference'),
      'settings' => array(
        'uib_study_field_name' => '',
        'uib_study_link' => 0,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function uib_study_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();
  $element['uib_study_field_name'] = array(
    '#type'           => 'textfield',
    '#title'          => t('Field name'),
    '#description'    => t('The name of the uib field to use'),
    '#default_value'  => $settings['uib_study_field_name'],
  );
  $element['uib_study_link'] = array(
    '#type'           => 'checkbox',
    '#title'          => t('Link to entity'),
    '#description'    => t('Indicate if the field should link to its entity'),
    '#default_value'  => $settings['uib_study_link'],
  );
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function uib_study_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $lnk = '';
  if (!$settings['uib_study_link']) {
    $lnk = 'no ';
  }
  $summary = t('Show field "@the_field", ' . $lnk . 'link to entity', array(
    '@the_field' => $settings['uib_study_field_name'],
  ));
  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function uib_study_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  if ($display['type'] == 'uib_study_title_formatter') {
    global $language;
    $elements = array();
    $settings = $display['settings'];
    if (!empty($settings['uib_study_field_name'])) {
      foreach ($items as $delta => $item) {
        $node = entity_metadata_wrapper('node', node_load($item['target_id']));
        $lang = $language->language;
        if (empty($lang) || $lang == 'und') {
          $lang = 'nb';
        }
        $display_text = $node->language($lang)->$settings['uib_study_field_name']->value();
        if ($settings['uib_study_link']) {
          $elements[$delta]['#markup'] = l($display_text, 'node/' . $item['target_id']);
        }
        else {
          $elements[$delta]['#markup'] = $display_text;
        }
      }
    }
    return $elements;
  }
}

function uib_study__get_current_semester() {
  $current_semester = (date('n') > 6 ? 'h' : 'v');
  return date('Y') . $current_semester;
}

function uib_study__get_resource_links($type, $study_code) {
  $current = uib_study__get_current_semester();
  $previous = substr($current, -1) == 'v' ? substr($current,0,4) - 1 . 'h' : substr($current,0,4) . 'v';
  $next = substr($current, -1) == 'v' ? substr($current,0,4) . 'h' : substr($current,0,4) + 1 . 'v';
  if ($type == 'schedule') {
    $previous_semester = uib_study__get_schedule_link($study_code, $previous, array('previous-semester'));
    $current_semester = uib_study__get_schedule_link($study_code, $current, array('current', 'previous-exists', 'next-exists', 'variants-exist'));
    $next_semester = uib_study__get_schedule_link($study_code, $next, array('next-semester'));
  }
  else {
    $previous_semester = uib_study__get_reading_list_link($study_code, $previous, array('previous-semester'));
    $current_semester = uib_study__get_reading_list_link($study_code, $current, array('current', 'previous-exists', 'next-exists', 'variants-exist'));
    $next_semester = uib_study__get_reading_list_link($study_code, $next, array('next-semester'));
  }
  return render($previous_semester) . render($current_semester) . render($next_semester);
}

function uib_study__get_schedule_link($study_code, $semester, $classes) {
  global $language;
  $lang = ($language->language == 'nb' ? '' : 'en');
  $schedule = array(
    '#theme' => 'link',
    '#text' => t('Schedule'),
    '#path' => 'http://rom.app.uib.no/timeplanliste.php?emne='. $study_code . '&periode=' . $semester . '&lang=' . $lang . '&simple=1',
    '#options' => array(
      'attributes' => array('class' => $classes),
      'html' => TRUE,
    ),
  );
  return $schedule;
}

function uib_study__get_reading_list_link($study_code, $semester, $classes) {
  global $language;
  $locale = ($language->language == 'nb' ? '' : 'en_US');
  $reading_list = array(
    '#theme' => 'link',
    '#text' => t('Reading list'),
    '#path' => 'https://miside.uib.no/fs-cron/pensum?emnekode='. $study_code . '&periode=' . $semester . '&locale=' . $locale . '&simple=1',
    '#options' => array(
      'attributes' => array('class' => $classes),
      'html' => TRUE,
    ),
  );
  return $reading_list;
}

/**
 * Implements hook_form_alter().
 */
function uib_study_form_alter(&$form, &$form_state, $form_id) {
  global $language;
  if ($form_id == "uib_study_node_form") {
    // Show code and title at the top of the form
    $study = entity_metadata_wrapper('node', $form['#node']);
    $form['study_title'] = array(
      '#type' => 'html_tag',
      '#tag' => 'h1',
      '#value' => $study->field_uib_study_code->value() . ' ' . $study->language($language->language)->field_uib_study_title->value(),
      '#weight' => -3,
    );

    // hide all fields that are fs-pres synchronised
    hide($form['title']);
    hide($form['field_uib_ou']);
    hide($form['field_uib_study_title']);
    hide($form['field_uib_study_category']);
    hide($form['field_uib_study_type']);
    hide($form['field_uib_study_code']);
    hide($form['field_uib_study_part_of']);
    hide($form['field_uib_nus']);
    // hide language selector
    hide($form['language']);
    // hide additional settings
    hide($form['path']);
    hide($form['author']);
  }
  elseif ($form_id == 'taxonomy_form_term' && $form['#vocabulary']->name == 'uib_nus') {
    // hide fields that are synchronised (except for user 1)
    if ($GLOBALS['user']->uid != 1) {
      hide($form['name']);
      hide($form['description']);
      $form['relations']['#access'] = FALSE;
      hide($form['field_uib_nus_id']);
      hide($form['field_uib_term_title']);
    }
  }
}

function uib_study__extract_study_info(&$data, $info_type = NULL) {
  if (empty($data) || empty($info_type)) {
    return NULL;
  }
  $text = NULL;
  foreach ($data as $inx => $group) {
    if ($group['#items']) {
      foreach ($group['#items'] as $key => $info) {
        if ($info['#type'] == $info_type) {
          $text = $info;
          if (stripos($group['#group'], '_kontakt') && count($group['#items']) < 2) {
            unset($data[$inx]);
          }
          else {
            unset($data[$inx]['#items'][$key]);
          }
        }
      }
    }
  }
  return $text;
}

/**
 * Add div with semester classes to all semester variants of a study text item
 */
function uib_study__text_markup($item, $is_course, $plain = FALSE) {
  if (empty($item)) {
    return;
  }
  $tmp_markup = '';
  if ($is_course) {
    $variants = '';
    $prev = FALSE;
    $next = FALSE;
    list($previous_semester, $current_semester, $next_semester) = uib_study__get_adjacent_semesters();
    if (isset($item['#variants'])) {
      foreach ($item['#variants'] as $sem_key => $sem_variant) {
        if ($sem_key == $previous_semester) {
          $css_semester = 'previous-semester';
          $prev = TRUE;
        }
        elseif ($sem_key == $next_semester) {
          $css_semester = 'next-semester';
          $next = TRUE;
        }
        $tmp_markup .= '<div class="' . $css_semester . ' ' . check_plain($sem_key) . '">';
        if ($plain) {
          // no html tags
          $tmp_markup .= check_plain(strip_tags($sem_variant));
        }
        else {
          // keep html tags
          $tmp_markup .= uib_study__filter_text($sem_variant);
        }
        $tmp_markup .= '</div>';
      }
    }
    if ($prev) {
      $variants .= 'previous-exists ';
    }
    if ($next) {
      $variants .= 'next-exists ';
    }
    if (empty($variants)) {
      $variants = 'no-variants';
    }
    else {
      $variants .= 'variants-exist ';
    }
    $variants = trim($variants);
    $tmp_markup .= '<div class="current-semester ' . $current_semester . ' ' . $variants . '">';
  }
  if ($plain) {
    // no html tags
    $tmp_markup .= check_plain(strip_tags($item['#text']));
  }
  else {
    // keep html tags
    $tmp_markup .= uib_study__filter_text($item['#text']);
  }
  if ($is_course) {
    $tmp_markup .= '</div>';
  }
  return $tmp_markup;
}

/**
 * Get previous, current, and next semester indication strings
 * Returns an array with the three adjacent semesters with current as index 1
 */
function uib_study__get_adjacent_semesters() {
  $current_semester = uib_study__get_current_semester();
  $spring = 'v';
  $fall = 'h';
  $year = substr($current_semester, 0, 4);
  $s_index = substr($current_semester, 4, 1);
  if (strtolower($s_index) == $spring) {
    $previous_semester = ($year - 1) . $fall;
    $next_semester = $year . $fall;
  }
  else {
    $previous_semester = $year . $spring;
    $next_semester = ($year + 1) . $spring;
  }
  return array($previous_semester, $current_semester, $next_semester);
}

/**
 * Implements hook_preprocess_HOOK.
 *
 */
function uib_study_preprocess_page(&$variables) {
  if (isset($variables['node'])) {
    if ($variables['node']->type == 'uib_study') {
      drupal_add_js(drupal_get_path('module', 'uib_study') . '/js/uib_study.js', array('group' => JS_THEME));
    }
  }
}

/**
 * Expand semester code to a text
 */
function uib_study__semester_name($code = NULL) {
  if (!empty($code)) {
    if (substr($code, 4, 1) == 'v') {
      $name = t('Spring');
    }
    else {
      $name = t('Fall');
    }
    $name .= ' ' . substr($code, 0, 4);
    return $name;
  }
}

/**
 * Implements hook_contextual_links_view_alter()
 */
function uib_study_contextual_links_view_alter(&$element, $items) {
  if (isset($element['#element']['#block'])) {
    if ($element['#element']['#block']->module == 'uib_study' && $element['#element']['#block']->delta == 'study_content') {
      unset($element['#links']);
    }
  }
}

/**
 * Implements hook_taxonomy_term_insert().
 */
function uib_study_taxonomy_term_insert($term) {
  if ($term->vocabulary_machine_name == 'uib_nus') {
    uib_study__add_taxonomy_aliases($term);
  }
}

/**
 * Implements hook_taxonomy_term_update().
 */
function uib_study_taxonomy_term_update($term) {
  if ($term->vocabulary_machine_name == 'uib_nus') {
    uib_study__add_taxonomy_aliases($term);
  }
}

/**
 * Add NUS code aliases for a taxonomy term
 */
function uib_study__add_taxonomy_aliases($term) {
  $taxonomy_term = entity_metadata_wrapper('taxonomy_term', $term);
  $source_path = 'taxonomy/term/' . $taxonomy_term->getIdentifier();

  // Obtain the names of the education area in 'nb' and 'en' languages
  $study_area_nid = variable_get('uib_study_area_nid');
  $utdanning = path_load("node/$study_area_nid");
  $languages['nb'] = $utdanning['alias'];
  $query = new EntityFieldQuery();
  $edu = $query->entityCondition('entity_type', 'node')
    ->propertyCondition('tnid', $study_area_nid)
    ->propertyCondition('language', 'en')
    ->execute();
  $edu_nids = array_keys($edu['node']);
  $education = path_load('node/' . $edu_nids[0]);
  $languages['en'] = $education['alias'];

  foreach ($languages as $lang_abbrev => $area_name) {
    if ($taxonomy_term->language($lang_abbrev)->field_uib_term_title->value()) {
      $path = $area_name . '/';
      $path .= uib_study__get_parents_path($term, $lang_abbrev);
      $path .= uib_study__prepare_path($taxonomy_term->language($lang_abbrev)->field_uib_term_title->value());
      $new_alias = array('source' => $source_path, 'alias' => $path, 'language' => $lang_abbrev);
      if ($existing_alias = path_load($source_path)) {
        if ($existing_alias['alias'] != $path) {
          path_save($new_alias);
        }
      }
      else {
        path_save($new_alias);
      }
    }
  }
}

/**
 * Get translated title of parent(s) for use in alias path
 */
function uib_study__get_parents_path($term, $lang) {
  if ($parents = taxonomy_get_parents($term->tid)) {
    $parent_term = entity_metadata_wrapper('taxonomy_term', current($parents));
    if ($parent_term->language($lang)->field_uib_term_title->value()) {
      $path = uib_study__prepare_path($parent_term->language($lang)->field_uib_term_title->value()) . '/';
      return uib_study__get_parents_path(current($parents), $lang) . $path;
    }
  }
  return '';
}

/**
 * Implements hook_taxonomy_term_delete().
 */
function uib_study_taxonomy_term_delete($term) {
   if ($term->vocabulary_machine_name == 'uib_nus') {
    // delete term aliases
    $term_url = 'taxonomy/term/' . $term->tid;
    while ($existing = path_load($term_url)) {
      path_delete($existing['pid']);
    }
  }
}

/**
 * Prepares a text string for use in an alias path
 * @param  [string] $in_path  the input text string
 * @return [string]           cleaned text string with hyphens instead of spaces
 */
function uib_study__prepare_path($in_path) {
  $in_path = trim($in_path);
  if (empty($in_path)) {
    return $in_path;
  }
  $path = drupal_strtolower($in_path);
  $path = mb_ereg_replace('\W+', '-', $path);
  $path = preg_replace('/(_)_+|(-)-+/', '\\1\\2', $path);
  return $path;
}

/**
 * Implements hook_entity_info_alter().
 */
function uib_study_entity_info_alter(&$entity_info) {
  $entity_info['taxonomy_term']['view modes']['teaser'] = array(
    'label' => t('Teaser'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_views_pre_render().
 */
function uib_study_views_pre_render(&$view) {
  if ($view->name == 'uib_taxonomy_term') {
    $term_id = $view->args[0];
    $term = taxonomy_term_load($term_id);

    // NUS code pages
    if ($term->vocabulary_machine_name == 'uib_nus') {
      if (arg(0) == 'taxonomy' && arg(1) == 'term') {
        // Set the term page to belong to education
        uib_area__get_current(variable_get('uib_study_area_nid'));
      }

      // Add the taxonomy term itself as an attachment (before)
      $term_data = taxonomy_term_view($term, $view_mode = 'full');
      $view->attachment_before = render($term_data);

      // Add a list underlying taxonomy terms as another attachment (after)
      $children = taxonomy_get_children($term_id);
      if (!empty($children)) {
        foreach ($children as $tid => $child) {
          $term = taxonomy_term_view($child, $view_mode = 'teaser');
          $view->attachment_after .= render($term);
        }
      }
    }
  }
}

/**
 * Function to check if current node's study_type is course
 * @return [bool]
 */
function uib_study__is_course() {
  $is_course = FALSE;
  $node = menu_get_object();
  if ($node) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'uib_study')
      ->entityCondition('entity_id', $node->nid)
      ->fieldCondition('field_uib_study_type', 'value', 'course', '=');
    $is_course = $query->execute();
  }
  return $is_course;
}

function uib_study__has_study_plan(&$data) {
  foreach ($data as $key => $group) {
    if(substr($group['#group'], -11) == '_studieplan') return TRUE;
  }
  return FALSE;
}

function uib_study__insert_t_row($depth) {
  $row = array(
    'data' => '',
    'colspan' => $depth - 1,
    'class' => 'uib-cell-indent-' . ($depth - 1),
  );
  return $row;
}
