<?php

function uib_sebra_cron_job_scheduler_info() {
  return array(
    'sebra_sync' => array(
      'queue name' => 'sebra_sync',
      'worker callback' => 'uib_sebra__sync',
      'jobs' => array(
        array(
          'type' => 'sebra',
          'id' => 0,
          'period' => 60*60,
          'periodic' => TRUE,
        ),
      ),
    ),
  );
}

function uib_sebra__sync($job) {
  uibx_log("SEBRA SYNC start");
  uib_sebra__sync_places(10);
  uib_sebra__sync_areas();
  uib_sebra__sync_users(100);
  uibx_log("SEBRA SYNC done");
}

function uib_sebra__sync_places($limit) {
  $places = uib_sebra__sws_get('places?status=aktiv');

  foreach ($places->place as $place) {
    $place_id = (string)$place->code;
    $nid = uib_sebra__uib_ou_nid($place_id);
    if ($nid === NULL) {
      $node = uib_sebra__create_uib_ou($place_id);
      uibx_log("Created node $node->nid for place $place_id $place->name");
      if ($limit) {
        if (--$limit == 0)
          break;
      }
    }
  }
}

function uib_sebra__sws_url($path) {
  $url = variable_get('uib_sws_url', 'http://sebra.uib.no/sws/');
  $url .= $path;
  return $url;
}

function uib_sebra__sws_get($path) {
  $url = uib_sebra__sws_url($path);
  uibx_log('GET ' . $url);
  $object = @simplexml_load_file($url);
  return $object;
}

function uib_sebra__uib_ou_nid($place_id) {
    $query = new EntityFieldQuery;
    $result = $query
      ->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'uib_ou')
      ->fieldCondition('field_uib_ou_id', 'value', $place_id, '=')
      ->range(0,1)
      ->execute();

    if (!empty($result['node'])) {
      $nids = array_keys($result['node']);
      return $nids[0];
    }
    return NULL;
}

function uib_sebra__create_uib_ou($place_id) {
  $place = new SebraPlace($place_id);
  $node = new stdClass();
  $node->type = 'uib_ou';
  $node->title = $place->name;
  $node->uid = 1;
  $node->status = 1;
  $node->revision = 0;
  $node->language = 'und';
  $node->field_uib_ou_id['und'][0]['value'] = $place_id;
  $node->field_uib_ou_shortname['und'][0]['value'] = $place->alias;
  $node->field_uib_mail_domain['und'][0]['value'] = $place->maildomain;

  $node->field_uib_postal_address['und'][0]['thoroughfare'] = 'Postboks ' . $place->postbox;
  $node->field_uib_postal_address['und'][0]['postal_code'] = $place->postcode;
  $node->field_uib_postal_address['und'][0]['locality'] = $place->postarea;
  $node->field_uib_postal_address['und'][0]['country'] = 'NO';

  $node->field_uib_visit_address['und'][0]['thoroughfare'] = $place->address;
  $node->field_uib_visit_address['und'][0]['postal_code'] = $place->postcode;
  $node->field_uib_visit_address['und'][0]['locality'] = $place->postarea;
  $node->field_uib_visit_address['und'][0]['country'] = 'NO';

  if (isset($place->phone))
    $node->field_uib_phone['und'][0]['value'] = '+47 ' . $place->phone;
  if (isset($place->fax))
    $node->field_uib_fax['und'][0]['value'] = '+47 ' . $place->fax;

  node_save($node);
  return $node;
}

function uib_sebra__sync_areas() {
  $query = new EntityFieldQuery;
  $query = $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'area')
    ;
  $result = $query->execute();

  $unchanged = 0;
  foreach (array_keys($result['node']) as $nid) {
    $area = node_load($nid);
    $sebra_id = $area->field_uib_sebra_id['und'][0]['value'];
    if ($sebra_id) {
      $area_doc = uib_sebra__sws_get("omraader?omraadekode=$sebra_id");
      if (empty($area_doc)) {
        uibx_log("Can't get $sebra_id", 'error');
      }
      #print_r(array($nid, $sebra_id, $area_doc));
      $staff = array();
      foreach ($area_doc->omraade->visninger->uibid as $uname) {
        $account = user_load_by_name($uname);
        if (!$account)
          $account = uib_sebra__sync_user($uname);
        $staff['und'][]['target_id'] = $account->uid;
      }
      if (!isset($area->field_uib_staff) || $area->field_uib_staff != $staff) {
        $area->field_uib_staff = $staff;
        node_save($area);
        uibx_log("Updated staff setting area /node/$nid");
      }
      else {
        $unchanged++;
      }
    }
    else {
      uibx_log("No sebra_id for /node/$nid", 'warning');
    }
  }
  uibx_log("staff attribute unchanged for $unchanged areas");
}

function uib_sebra__sync_users($limit) {
  $users = array_merge(
    uib_sebra__get_persons('staff'),
    uib_sebra__get_persons('extern')
  );
  //$users = array('adbho', 'gaa041', 'sbj051'); // debug with a smaller set
  $users_count = count($users);
  $offset = 0;

  if ($limit) {
    $offset = variable_get('uib_sebra_user_offset', 0);
    if ($offset >= $users_count)
      $offset = 0;
    variable_set('uib_sebra_user_offset', $offset + $limit);
    uibx_log("Starting to process $limit of $users_count users at offset $offset");
  }
  else {
    uibx_log("Processing $users_count users");
  }

  foreach ($users as $username) {
    if (--$offset > 0)
      continue;
    uib_sebra__sync_user($username);
    if ($limit) {
      if (--$limit == 0)
        break;
    }
  }

  // look for users to block
  $users = array_flip($users); // make it easy to look them up by username

  $query = new EntityFieldQuery;
  $query = $query
    ->entityCondition('entity_type', 'user')
    ->fieldCondition('field_uib_user_domain', 'value', 'uib', '=');
  $result = $query->execute();
  $active_count = 0;
  foreach (array_keys($result['user']) as $uid) {
    $account = user_load($uid);
    if (isset($users[$account->name])) {
      if ($account->status == 0) {
        user_save($account, array(
          'status' => 1, // ACTIVE
        ));
        uibx_log("$account->name unblocked");
      }
      else {
        $active_count++;
      }
    }
    elseif ($account->status != 0) {
      user_save($account, array(
        'status' => 0, // BLOCKED
      ));
      uibx_log("$account->name blocked");
    }
    else {
      uibx_log("$account->name is still blocked");
    }
  }
  uibx_log("$active_count uib-accounts are still active");
}

function uib_sebra__get_persons($type) {
  $persons_url = 'persons';
  if ($type)
    $persons_url .= "?type=$type";
  $persons = uib_sebra__sws_get($persons_url);
  $uids = array();
  foreach ($persons->person as $p) {
    $uids[] = (string)$p->id;
  }
  return $uids;
}

function uib_sebra__sync_user($username) {
  $account = user_load_by_name($username);
  $u = new SebraPerson($username);
  if ($account) {
    $edit = array();
    if ($account->mail != $u->email)
      $edit['mail'] = $u->email;
    if ($account->status != 1)
      $edit['status'] = 1;
    if ($account->field_uib_first_name['und'][0]['value'] != $u->first_name)
      $edit['field_uib_first_name']['und'][0]['value'] = $u->first_name;
    if ($account->field_uib_last_name['und'][0]['value'] != $u->last_name)
      $edit['field_uib_last_name']['und'][0]['value'] = $u->last_name;
    if ($account->field_uib_position['und'][0]['value'] != $u->position_name_no)
      $edit['field_uib_position']['und'][0]['value'] = $u->position_name_no;
    if ($account->field_uib_position_en['und'][0]['value'] != $u->position_name_en)
      $edit['field_uib_position_en']['und'][0]['value'] = $u->position_name_en;

    if (empty($edit)) {
      uibx_log("No change for $username <$account->mail>");
    }
    else {
      user_save($account, $edit);
      uibx_log("Updated fields for $username <$account->mail>");
    }
  }
  else {
    $account = new stdClass();
    $account->is_new = 1;
    $account->name = $u->id;
    $account->mail = $u->email;
    $account->status = 1; // ACTIVE
    $account->field_uib_user_domain['und'][0]['value'] = 'uib';
    $account->field_uib_first_name['und'][0]['value'] = $u->first_name;
    $account->field_uib_last_name['und'][0]['value'] = $u->last_name;
    $account->field_uib_position['und'][0]['value'] = $u->position_name_no;
    $account->field_uib_position_en['und'][0]['value'] = $u->position_name_en;
    user_save($account);
    uibx_log("Created user $account->uid for $username <$u->email>");
  }
  return $account;
}
