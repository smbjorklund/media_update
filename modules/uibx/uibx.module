<?php

/**
 * @file
 *
 * Library of functions that are of general utility.
 *
 */

/**
 * Alternative logger that will log stuff with drush_log() if running under
 * drush; otherwise redirect messages to the watchdog log.
 *
 * @param string $message
 * The message to be logged
 * @param string $type
 * The logging level.  It defaults to 'notice'.
 * Other commonly used levels are 'error', 'warning', and 'debug'.
 */

function uibx_log($message, $type='notice') {
  if (function_exists('drush_log')) {
    drush_log($message, $type);
  }
  else {
    switch ($type) {
    case 'error':
    case 'failed':
      $severity = WATCHDOG_ERROR;
      break;
    case 'warning':
      $severity = WATCHDOG_WARNING;
      break;
    default:
      $severity = WATCHDOG_NOTICE;
    }
    watchdog('uibx', $message, NULL, $severity);
  }
}

/**
 * Implements hook_theme().
 */

function uibx_theme($existing, $type, $theme, $path) {
  return array(
    'key_value' => array(
      'variables' => array('key' => NULL, 'value' => NULL),
    ),
  );
}

/**
 * Turn a key value pair into HTML.
 *
 * If value isn't set return nothing.
 *
 * @param $variables
 * An associative array containing:
 *  - key: string
 *  - value: string
 */
function theme_key_value(&$variables) {
  if (is_null($variables['value']))
    return '';
  return '<div><span>' .
    check_plain($variables['key']) . ': </span>' .
    check_plain($variables['value']) .
    '</div>';
}

/**
 * Look for patterns in HTML text and turn them into links
 *
 * This function has the same signature to preg_replace_callback() but the
 * callback will only be invoked at locations where it's allowed to expand
 * links.
 *
 * Based on the _filter_url() function in core.  We still invoke the (perhaps)
 * private _filter_url_escape_commits function.  Hope it doesn't change :-)
 *
 * @param string $pattern
 * A regular expression that matches segments in the $text that you might want
 * to turn into links.
 *
 * @param string $expand_callback
 * The callback is invoked with a single parameter, an array of matched strings.
 * $matched[0] is the full text matches by $pattern.  The callback should return
 * the HTML for the link.  If the callback determines that the matched texts
 * isn't a link after all it should just return $matched[0].
 *
 * @param string $text
 * The input HTML to be filtered.
 *
 * @param int $size_limit
 * If the provided $text is longer than this size it's simply returned
 * unchanged.  Used to protect the code against unreasonably sized texts.
 *
 * @param string $ignore_tags
 * Pattern that match the tags of elements where no substiturions should
 * take place.  Only elements that can't nest should be provided.
 *
 * @return string
 * The HTML text with substitutions specified.
 */
function uibx_html_linkify($pattern, $expand_callback, $text, $size_limit=100000, $ignore_tags='a|script|style') {
  if (strlen($text) > $size_limit) {
    // Protect against unacceptable performance and memory usage when document
    // is too big
    return $text;
  }

  if (!preg_match($pattern, $text)) {
    // Fast exit if the pattern isn't found at all
    return $text;
  }

  // HTML comments need to be handled separately, as they may contain HTML
  // markup, especially a '>'. Therefore, remove all comment contents and add
  // them back later.
  _filter_url_escape_comments('', TRUE);
  $text = preg_replace_callback('`<!--(.*?)-->`s', '_filter_url_escape_comments', $text);

  // Split at all tags; ensures that no tags or attributes are processed.
  $chunks = preg_split('/(<.+?>)/is', $text, -1, PREG_SPLIT_DELIM_CAPTURE);
  // PHP ensures that the array consists of alternating delimiters and
  // literals, and begins and ends with a literal (inserting NULL as
  // required). Therefore, the first chunk is always text:
  $chunk_type = 'text';
  // If a tag of $ignore_tags is found, it is stored in $open_tag and only
  // removed when the closing tag is found. Until the closing tag is found,
  // no replacements are made.
  $open_tag = '';

  for ($i = 0; $i < count($chunks); $i++) {
    if ($chunk_type == 'text') {
      // Only process this text if there are no unclosed $ignore_tags.
      if ($open_tag == '') {
        // If there is a match, inject a link into this chunk via the callback
        // function contained in $task.
        $chunks[$i] = preg_replace_callback($pattern, $expand_callback, $chunks[$i]);
      }
      // Text chunk is done, so next chunk must be a tag.
      $chunk_type = 'tag';
    }
    else {
      // Only process this tag if there are no unclosed $ignore_tags.
      if ($open_tag == '') {
        // Check whether this tag is contained in $ignore_tags.
        if (preg_match("`<($ignore_tags)(?:\s|>)`i", $chunks[$i], $matches)) {
          $open_tag = $matches[1];
        }
      }
      // Otherwise, check whether this is the closing tag for $open_tag.
      else {
        if (preg_match("`<\/$open_tag>`i", $chunks[$i], $matches)) {
          $open_tag = '';
        }
      }
      // Tag chunk is done, so next chunk must be text.
      $chunk_type = 'text';
    }
  }

  $text = implode($chunks);
  // Revert back to the original comment contents
  _filter_url_escape_comments('', FALSE);
  $text = preg_replace_callback('`<!--(.*?)-->`', '_filter_url_escape_comments', $text);

  return $text;
}

/**
 * Load one or more path aliases based on a source path
 *
 * Returns an array of path alias objects, sorted by language and pid. Highest pid first.
 */
function uibx_path_load($source, $language = NULL) {
  $alias_list = array();
  $query = 'SELECT pid, source, alias, language FROM {url_alias} WHERE source = :src';
  $query_args = array(':src' => $source);
  if ($language) {
    $query .= ' AND language = :lng';
    $query_args[':lng'] = $language;
  }
  $query .= ' ORDER BY source';
  if ($language) {
    $query .= ', language';
  }
  $query .= ', pid DESC';
  $result = db_query($query, $query_args);
  if ($result) {
    foreach ($result as $record) {
      $alias_list[] = $record;
    }
  }
  return $alias_list;
}
