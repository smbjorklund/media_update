<?php
/**
 * @file
 * Code for the UiB Feature Area feature.
 */

include_once 'uib_area.features.inc';

/**
 * Implements hook_menu_block_blocks
 */

function uib_area_menu_block_blocks() {
  return array(
    'top-area-menu' => array(
      'menu_name'   => 'area',
      'title_link'  => FALSE,
      'admin_title' => 'Top level area menu',
      'level'       => 2,
      'depth'       => 2,
      'expanded'    => 1,
    ),
    'page-area-menu' => array(
      'menu_name'   => 'area',
      'title_link'  => FALSE,
      'admin_title' => 'Page level area menu',
      'follow'      => 1,
      'level'       => 4,
      'depth'       => 1,
    ),
  );
}


/**
 * Implements hook_block_info().
 */

function uib_area_block_info() {
  return array(
    'colophon' => array(
      'info' => t('Colophon'),
      'status' => TRUE,
    ),
    'jobbnorge' => array(
      'info' => t('Jobbnorge'),
      'status' => TRUE,
    ),
    'feed' => array(
      'info' => t('Feed'),
      'status' => TRUE,
    ),
  );
}


/**
 * Implements hook_block_view().
 */

function uib_area_block_view($delta='') {
  $block = array();
  switch ($delta) {
  case 'colophon':
    $block['subject'] = t('Colophon');
    $block['content'] = array(
      'name' => array(
        '#type' => 'html_tag',
        '#tag' => 'h3',
        '#value' => t('University of Bergen'),
      ),
      'address' => array(
        '#theme' => 'key_value',
        '#key' => t('Address'),
        '#value' => 'Postboks 7800, 5020 BERGEN',
      ),
      'phone' => array(
        '#theme' => 'key_value',
        '#key' => t('Phone'),
        '#value' => '+47 55 58 00 00',
      ),
      'fax' => array(
        '#theme' => 'key_value',
        '#key' => t('Fax'),
      ),
      'emergency' => array(
        '#theme' => 'key_value',
        '#key' => t('24-hour security hotline'),
        '#value' => '+47 55 58 80 81',
      ),
      'responsible_this_page' => array(
        '#theme' => 'key_value',
        '#key' => t('Responsible for this page'),
      ),
      'contact' => array(
        '#theme' => 'key_value',
        '#key' => t('Contact'),
        '#value' => 'post@uib.no',
      ),
      'responsible' => array(
        '#theme' => 'key_value',
        '#key' => t('Responsible'),
        '#value' => t('Director of Communications'),
      ),
    );
    $area = uib_area__get_current();
    if ($area && isset($area->field_uib_ou['und'])) {
      $place = node_load($area->field_uib_ou['und'][0]['target_id']);
      $block['content']['name']['#value'] .= ' | ' . check_plain($area->title);
      //dsm($place);
      $block['content']['responsible_this_page']['#value'] = $place->title;
      if (isset($place->field_uib_phone)) {
        $block['content']['phone']['#value'] =
          $place->field_uib_phone['und'][0]['value'];
      }
      if (isset($place->field_uib_fax)) {
        $block['content']['fax']['#value'] =
          $place->field_uib_fax['und'][0]['value'];
      }
      if (isset($place->field_uib_mail_domain)) {
        $block['content']['contact']['#value'] =
          'post@' . $place->field_uib_mail_domain['und'][0]['safe_value'];
      }
    }
    hide($block['content']['emergency']);
    break;
  case 'jobbnorge':
    $area = uib_area__get_current();
    $whitelist = array('faculty', 'unit', 'institute');
    if ($area && in_array($area->field_uib_area_type['und'][0]['value'], $whitelist)) {
      $place = node_load($area->field_uib_ou['und'][0]['target_id']);
      if (empty($place->field_uib_jobbnorge_id['und']))
       continue;
      else
       $feed = 'http://www.jobbnorge.no/joblist/joblistbuilder.ashx?id=821a69c9-7674-4e36-90f8-41e443b99064&depid=' . $place->field_uib_jobbnorge_id['und'][0]['value'];
      if ($area->language == 'en')
        $feed .= '&langid=2';
      $block['subject'] = t('Open Positions');
      $block['content'] = uib_area__feed_format($feed, $title='', $limit = 999);
      }
    break;
  case 'feed':
    if (arg(0) == 'node' && is_numeric(arg(1))) {
      $node = node_load(arg(1));
      if ($node->type == 'area') {
        $area = $node;
      }
      elseif (isset($node->field_uib_area)) {
        $area = $node->field_uib_area['und'][0]['entity'];
      }
    }
    if($area){
      $elements = array();
      if(!empty($area->field_uib_feed['und'])){
        foreach ($area->field_uib_feed['und'] as $delta => $item) {
          $url = url($item['url'], $item);
          if (strpos($url, '#')) {
            $limit = explode('#', $url);
          }
          $limit = (isset($limit[1]) && is_numeric($limit[1])) ? $limit[1] : 5;
          $elements[$delta] = uib_area__feed_format($url, $item['title'], $limit);
        }
      }
    $block['content'] = $elements;
    }
    break;
  }

  return $block;
}

function uib_area__feed_format($url, $title, $limit) {
  $items = array();
  $content = @file_get_contents($url);
    if (!$content) {
      return;
    }
    $xml = new SimpleXmlElement($content);
    if ($xml->channel->item) {
      $items = array(
      'list' => array(
        '#title' => $title,
        '#items' => array(),
        '#theme' => 'item_list',
        ),
      );
      foreach ($xml->channel->item as $entry) {
       $items['list']['#items'][] = l($entry->title, $entry->link) ;
       if (--$limit == 0)
        break;
      }
    }

  return $items;
}

/**
 * Implements hook_field_formatter_info().
 */
function uib_area_field_formatter_info() {
  return array(
    'uib_area_link_feed' => array(
      'label' => t('View as an rss feed'),
      'field types' => array('link_field'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}

/**
 * Implements hook_field_formatter_view()
 */
function uib_area_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
   foreach ($items as $delta => $item) {
    $url = url($item['url'], $item);
      if (strpos($url, '#')) {
        $limit = explode('#', $url);
      }
      $limit = (isset($limit[1]) && is_numeric($limit[1])) ? $limit[1] : 5;
    $elements[$delta] = uib_area__feed_format($url, $item['title'], $limit);

  }

  return $elements;
}

/**
 * Implements hook_theme().
 */
function uib_area_theme() {
  return array(
    'uib_area_formatter_uib_area_link_feed' => array(
      'variables' => array('element' => NULL),
    ),
  );
}

/**
 * Implements hook_node_presave
 */

function uib_area_node_presave($node) {
  // obtain full list of parent areas
  $parent_node_id_list = array();
  if (!empty($node->field_uib_area_parents['und'])) {
    foreach ($node->field_uib_area_parents['und'] as $parent) {
      uib_area__get_parentage($parent['target_id'], $parent_node_id_list);
    }
    // remove duplicate area node ids if present
    $cleaned_node_id_list = array();
    foreach ($parent_node_id_list as $pnid) {
      if (!in_array($pnid, $cleaned_node_id_list)) {
        $cleaned_node_id_list[] = $pnid;
      }
    }
    // update node with cleaned full list
    $node->field_uib_area_parents['und'] = array();
    for($i = 0; $i < count($cleaned_node_id_list); $i++) {
      $node->field_uib_area_parents['und'][$i] = array('target_id' => $cleaned_node_id_list[$i]);
    }
  }
}

/**
* Function to recursively get uib_area parent_ids
*/
function uib_area__get_parentage($parent_node_id, &$parent_ids) {
  $parent_ids[] = $parent_node_id;
  if ($parent_node = node_load($parent_node_id)) {
    if (!empty($parent_node->field_uib_area_parents['und'])) {
      foreach ($parent_node->field_uib_area_parents['und'] as $this_parent) {
        uib_area__get_parentage($this_parent['target_id'],$parent_ids);
     }
    }
  }
}

/**
* Function to obtain [and keep] reference to current uib_area
*    as indicated by node id in URL, or in the field_uib_area
*    of that node. That node is loaded if necessary.
*
* If no area reference is found, the function returns NULL.
*/
function uib_area__get_current() {
  static $current_area;
  if (!isset($current_area)) {
    // obtain area from node indicated in url
    if (arg(0) == 'node' && is_numeric(arg(1))) {
      $node = node_load(arg(1));
      if ($node->type == 'area') {
        $current_area = $node;
      }
      elseif (isset($node->field_uib_area['und'][0]['entity'])) {
        $current_area = $node->field_uib_area['und'][0]['entity'];
      }
      else {
        $current_area = NULL;
      }
    }
  }
  return $current_area;
}