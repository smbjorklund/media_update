<?php
/**
 * @file
 * Code for the UiB Feature Area feature.
 */

include_once 'uib_area.features.inc';

/**
 * Implements hook_menu_block_blocks().
 */
function uib_area_menu_block_blocks() {
  return array(
    'page-area-menu' => array(
      'menu_name'   => uib_area__get_current_menu(),
      'title_link'  => FALSE,
      'admin_title' => 'Page level area menu',
      'follow'      => 1,
      'level'       => 4,
      'depth'       => 1,
      'expanded'    => 1,
    ),
  );
}

/**
 * Implements hook_block_info().
 *
 * area_parents contains a list of parents to the current area.
 */
function uib_area_block_info() {
  return array(
    'colophon' => array(
      'info' => t('Colophon'),
      'status' => TRUE,
    ),
    'jobbnorge' => array(
      'info' => t('Jobbnorge'),
      'status' => TRUE,
    ),
    'feed' => array(
      'info' => t('Feed'),
      'status' => TRUE,
    ),
    'area_parents' => array(
      'info' => t('Area parents'),
      'status' => TRUE,
    ),
    'newspage_recent_news' => array(
      'info' => t('Newspage recent news'),
      'status' => TRUE,
    ),
    'colophon_logos' => array(
      'info' => t('Colophon logos frontpage'),
      'status' => TRUE,
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function uib_area_block_view($delta='') {
  $block = array();
  switch ($delta) {
    case 'colophon':
      $block['subject'] = NULL;
      $block['content'] = array(
        'name' => array(
          '#type' => 'html_tag',
          '#tag' => 'h3',
          '#value' => t('University of Bergen'),
        ),
        'address' => array(
          '#theme' => 'key_value',
          '#key' => t('Address'),
          '#value' => t('P.O. Box 7800, NO-5020 BERGEN'),
        ),
        'phone' => array(
          '#theme' => 'key_value',
          '#key' => t('Phone'),
          '#value' => '+47 55 58 00 00',
        ),
        'fax' => array(
          '#theme' => 'key_value',
          '#key' => t('Fax'),
        ),
        'emergency' => array(
          '#theme' => 'key_value',
          '#key' => t('24-hour security hotline'),
          '#value' => '+47 55 58 80 81',
        ),
        'contact' => array(
          '#type' => 'link',
          '#title' => t('post@uib.no'),
          '#href' => 'mailto:post@uib.no',
          '#prefix' => t('Contact') . ': ',
        ),
        'responsible' => array(
          '#theme' => 'key_value',
          '#key' => t('Responsible'),
          '#value' => t('Director of Communications'),
        ),
      );
      $area = uib_area__get_current();
      if ($area && isset($area->field_uib_ou['und'])) {
        $place = node_load($area->field_uib_ou['und'][0]['target_id']);
        $block['content']['name']['#value'] .= ' | ' . check_plain($area->title);
        if (isset($place->field_uib_phone)) {
          $block['content']['phone']['#value'] =
            $place->field_uib_phone['und'][0]['value'];
        }
        if (isset($place->field_uib_fax)) {
          $block['content']['fax']['#value'] =
            $place->field_uib_fax['und'][0]['value'];
        }
        if (isset($place->field_uib_mail_domain)) {
          $block['content']['contact']['#title'] = 'post@' . $place->field_uib_mail_domain['und'][0]['safe_value'];
          $block['content']['contact']['#href'] = 'mailto:post@' . $place->field_uib_mail_domain['und'][0]['safe_value'];
        }
      }
      hide($block['content']['emergency']);
    break;
    case 'jobbnorge':
      $area = uib_area__get_current();
      $whitelist = array('faculty', 'unit', 'institute');
      if ($area && in_array($area->field_uib_area_type['und'][0]['value'], $whitelist)) {
        if (!empty($area->field_uib_ou['und'])) {
          $place = node_load($area->field_uib_ou['und'][0]['target_id']);
        }
        if (empty($place->field_uib_jobbnorge_id['und'])) {
          continue;
        }
        else {
          $feed = 'http://www.jobbnorge.no/joblist/joblistbuilder.ashx?id=821a69c9-7674-4e36-90f8-41e443b99064&depid=' . $place->field_uib_jobbnorge_id['und'][0]['value'];
        }
        if ($area->language == 'en') {
          $feed .= '&langid=2';
        }
        $block['content'] = uib_area__feed_format($feed, '', $limit = 999);
        $block['subject'] = t('Open Positions');
      }
    break;
    case 'feed':
      $area = uib_area__get_current();
      if ($area) {
        $elements = array();
        if (!empty($area->field_uib_feed['und'])) {
          foreach ($area->field_uib_feed['und'] as $delta => $item) {
            $url = url($item['url'], $item);
            if (strpos($url, '#')) {
              $limit = explode('#', $url);
            }
            $limit = (isset($limit[1]) && is_numeric($limit[1])) ? $limit[1] : 5;
            $elements[$delta] = uib_area__feed_format($url, '', $limit);
          }
        }
      $block['content'] = $elements;
      $block['subject'] = $item['title'];
      }
    break;
    case 'area_parents':
      $block['subject'] = t('Belongs to');
      $area = uib_area__get_current();
      if (!empty($area->field_uib_area_parents['und'])) {
        // Setup an SQL query to get parent titles from node ids listed.
        $nlist = array();
        $query = 'SELECT nid, title FROM {node} WHERE ';
        $glue = '';
        for ($i=0; $i < count($area->field_uib_area_parents['und']); $i++) {
          $nlist[":nid$i"] = $area->field_uib_area_parents['und'][$i]['target_id'];
          $query .= $glue . " nid = :nid$i";
          $glue = " OR";
        }
        $result = db_query($query, $nlist);
        // Setup each parental area node title on a separate line with link.
        foreach ($result as $record) {
          $title = t($record->title);
          $block['content'][$title]['#markup'] = l($title, 'node/' . $record->nid) . '<br>';
        }
      }
    break;
    case 'newspage_recent_news':
      $area = uib_area__get_current();
      $slideshow = db_select('field_data_field_uib_profiled_article', 'f')
        ->fields('f', array('field_uib_profiled_article_target_id'))
        ->condition('entity_id', $area->nid)
        ->execute()
        ->fetchCol();

      $profiled_messages = db_select('field_data_field_uib_profiled_message', 'f')
        ->fields('f', array('field_uib_profiled_message_target_id'))
        ->condition('entity_id', $area->nid)
        ->execute()
        ->fetchCol();

      $exludes_nodes = array_merge($slideshow, $profiled_messages);
      $query = new EntityFieldQuery;
      $query = $query
        ->entityCondition('entity_type', 'node')
        ->range(0, 5)
        ->propertyCondition('status', 1)
        ->propertyOrderBy('created', 'DESC')
        ->fieldCondition('field_uib_article_type','value', 'news', '=')
        ->fieldCondition('field_uib_area','target_id', $area->nid, '=')
        ->propertyCondition('nid', $exludes_nodes, 'NOT IN');
      $result = $query->execute();
      $nids = array_keys($result['node']);
      $nodes = node_load_multiple($nids);
      $block['content'] = node_view_multiple($nodes);
    break;
    case 'colophon_logos':
      $area = uib_area__get_current();
      if(!empty($area) && $area->field_uib_area_type['und'][0]['value'] == 'frontpage') {
        if ($area->language == 'en') {
          $block['content'] = '<div class="banner eng" id="stem"><a title="Centennial Female Vote 2013" href="http://www.uib.no/centennialfemalevote2013"><img alt="Centennial Female Vote 2013" src="http://www.uib.no/@@/images/stemmerettsjubileet.png" /></a></div>';
          $block['content'] .= '<div class="banner eng" id="hp"><a title="Holbergprize" href="http://www.uib.no/ledelsen/en/field-of-work/holberg-prize"><img alt="Holbergprize" src="http://www.uib.no/@@/images/HP_eng.png" /></a></div>';
        }
        else {
          $block['content'] = '<div class="banner" id="stem"><a title="Stemmerettsjubileet 2013" href="http://www.uib.no/stemmerettsjubileet2013"><img alt="Stemmerettsjubileet 2013" src="http://www.uib.no/@@/images/stemmerettsjubileet.png" /></a></div>';
          $block['content'] .= '<div class="banner" id="hp"><a title="Holbergprisen" href="http://www.uib.no/samfunn/uib-i-samfunnet/holbergprisen"><img alt="Holbergprisen" src="http://www.uib.no/@@/images/HP_norsk.png" /></a></div>';
        }
      }
    break;
  }
  return $block;
}

/**
 * uib_area_change_to_h2 description missing
 * @param  [type] $markup  [description]
 * @param  [type] $element [description]
 *
 * @return [type]          [description]
 */
function uib_area_change_to_h2($markup, $element) {
  $markup = preg_replace('/<h3(.*?)>(.*?)<\/h3>/','<h2\1>\2</h2>', $markup);
  return $markup;
}

/**
 * [uib_area__feed_format description]
 * @param  [type] $url   [description]
 * @param  [type] $title [description]
 * @param  [type] $limit [description]
 *
 * @return [type]        [description]
 */
function uib_area__feed_format($url, $title, $limit) {
  return array(
    '#cache' => array(
      'keys' => array($url, $title, $limit),
      'expire' => time() + 30*60,
    ),
    '#pre_render' => array('uib_area__feed_format_pre_render'),
  );
}

/**
 * The heavy stuff done during uib_area__feed_form()
 */

function uib_area__feed_format_pre_render($element) {
  list($url, $title, $limit) = $element['#cache']['keys'];
  $content = @file_get_contents($url);
  if (!$content) {
    return $element;
  }
  $xml = @simplexml_load_string($content);
  if ($xml === FALSE) {
    return $element;
  }
  if ($xml->channel->item) {
    $element['list'] = array(
      '#title' => $title,
      '#items' => array(),
      '#theme' => 'item_list',
      '#post_render' => array('uib_area_change_to_h2'),
    );
    foreach ($xml->channel->item as $entry) {
      $pubDate = $entry->pubDate;
      $pubDate = strftime("%Y-%m-%d", strtotime($pubDate));
      if(!empty($pubDate))
        $entry->title .= '('.$pubDate .')';
      $element['list']['#items'][] = l($entry->title, $entry->link);
      if (--$limit == 0)
        break;
    }
  }
  return $element;
}

/**
 * Implements hook_field_formatter_info().
 */
function uib_area_field_formatter_info() {
  return array(
    'uib_area_link_feed' => array(
      'label' => t('View as an rss feed'),
      'field types' => array('link_field'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function uib_area_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  foreach ($items as $delta => $item) {
    $url = url($item['url'], $item);
      if (strpos($url, '#')) {
        $limit = explode('#', $url);
      }
      $limit = (isset($limit[1]) && is_numeric($limit[1])) ? $limit[1] : 5;
    $elements[$delta] = uib_area__feed_format($url, $item['title'], $limit);

  }

  return $elements;
}

/**
 * Implements hook_theme().
 */
function uib_area_theme() {
  return array(
    'uib_area_formatter_uib_area_link_feed' => array(
      'variables' => array('element' => NULL),
    ),
  );
}

/**
 * Implements hook_node_presave().
 */
function uib_area_node_presave($node) {
  // obtain full list of parent areas
  $parent_node_id_list = array();
  if (!empty($node->field_uib_area_parents['und'])) {
    foreach ($node->field_uib_area_parents['und'] as $parent) {
      uib_area__get_parentage($parent['target_id'], $parent_node_id_list);
    }
    // remove duplicate area node ids if present
    $cleaned_node_id_list = array();
    foreach ($parent_node_id_list as $pnid) {
      if (!in_array($pnid, $cleaned_node_id_list)) {
        $cleaned_node_id_list[] = $pnid;
      }
    }
    // update node with cleaned full list
    $node->field_uib_area_parents['und'] = array();
    for($i = 0; $i < count($cleaned_node_id_list); $i++) {
      $node->field_uib_area_parents['und'][$i] = array('target_id' => $cleaned_node_id_list[$i]);
    }
  }
}

/**
 * Rcursively tries to get uib_area parent_ids.
 *
 * @param [type] [varname] [description]
 * @param [type] [varname] [description]
 */
function uib_area__get_parentage($parent_node_id, &$parent_ids) {
  $parent_ids[] = $parent_node_id;
  if ($parent_node = node_load($parent_node_id)) {
    if (!empty($parent_node->field_uib_area_parents['und'])) {
      foreach ($parent_node->field_uib_area_parents['und'] as $this_parent) {
        uib_area__get_parentage($this_parent['target_id'],$parent_ids);
     }
    }
  }
}

/**
 * Find and obtain [and keep] reference to current uib_area
 * as indicated by node id in URL, or in the field_uib_area
 * of that node. That node is loaded if necessary.
 *
 * @return [type] [description]
 *   If no area reference is found, the function returns NULL.
 */
function uib_area__get_current() {
  static $current_area;
  if (!isset($current_area)) {
    // obtain area from node indicated in url
    if (arg(0) == 'node' && is_numeric(arg(1))) {
      $nn = intval(arg(1));
      $node = node_load($nn);
      if (!empty($node)) {
        if ($node->type == 'area') {
          $current_area = $node;
        }
        elseif (isset($node->field_uib_area['und'][0]['entity'])) {
          $current_area = $node->field_uib_area['und'][0]['entity'];
        }
        elseif (!empty($node->field_uib_area['und'][0]['target_id'])) {
          $current_area = node_load($node->field_uib_area['und'][0]['target_id']);
        }
        else {
          $current_area = NULL;
        }
      }
    }
  }
  return uib_area__get_current_by_language($current_area);
}

/**
* Get the area that corresponds to the global language if this
* is different from the articles language.
*
* @param node $current_area
*   The current uib_area before a check to se if the global
*   language is equal to the current uib_area's language
* @return node
*   The current uib_area in the global language
*/
function uib_area__get_current_by_language($current_area) {
  if (!$current_area)
    return NULL;
  global $language;
  if ($language->language != $current_area->language) {
    if ($current_area->nid == $current_area->tnid) {
      $result = db_select('node', 'n')
        ->fields('n', array('nid'))
        ->condition('tnid', $current_area->nid, '=')
        ->condition('nid', $current_area->nid, '<>')
        ->execute()
        ->fetchAssoc();
      $current_area = node_load($result);
    }
    else {
      $current_area = node_load($current_area->tnid);
    }
  }
  return $current_area;
}

/**
 * Get current node address as indicated by node id in URL.
 *
 * @return [type] [description]
 *   If no node reference is found in URL, the function returns NULL.
 */
function uib_area__get_current_node() {
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    return arg(0) . '/' . arg(1);
  }
  return NULL;
}

/**
 * Get the node type of an indicated node ('node/nid'), or
 * the current node as indicated by node id in URL.
 *
 * @param [type] [varname] [description]
 *
 * @return [type] [description]
 *   If no node or node type is found, the function returns NULL.
 */
function uib_area__get_node_type($node = NULL) {
  if (empty($node)) {
    $node = uib_area__get_current_node();
  }
  if (!empty($node)) {
    $tmp = explode('/',$node);
    if (is_numeric($tmp[1])) {
      $query = 'SELECT type FROM {node} WHERE nid = :nid'; // get node type
      $result = db_query($query, array(':nid' => $tmp[1]));
      foreach ($result as $record) {
        return $record->type;
      }
    }
  }
  return NULL;
}

/**
 * Find the OU nid referenced from an area or ou
 * (defaults to the ou nid of current area).
 *
 * @return [type] [description]
 *   If the area does not have an OU, the function will recursively search its
 *   area parents until an OU is ultimately found -- or return NULL.
 */
function uib_area__get_ou_nid($area = NULL) {
  if (empty($area)) {
    $area = uib_area__get_current();
  }
  elseif ($area->type == 'uib_ou') {
    return $area->nid;
  }
  if (!empty($area->field_uib_ou['und'][0]['target_id'])) {
    return $area->field_uib_ou['und'][0]['target_id'];
  }
  else {
    if (!empty($area->field_uib_area_parents)) {
      $i = 0;
      $nrof_parents = count($area->field_uib_area_parents['und']);
      $ou_nid = NULL;
      while (empty($ou_nid) && $i < $nrof_parents) {
        $ou_nid = uib_area__get_ou_nid(node_load($area->field_uib_area_parents['und'][$i]['target_id']));
        $i++;
      }
      if ($i < $nrof_parents) {
        uibx_log("Selected the first OU found [$ou_nid] for area node $area->nid among $nrof_parents parents.", "warning");
      }
      return $ou_nid;
    }
    else {
      return NULL;
    }
  }
}

/**
 * Find nid referenced from an area or ou
 *
 */
function uib_area__get_ou_nids_recursive($nid) {
  $node = node_load($nid);
  if (!$node)
    return NULL;

  if ($node->type == "area") {
    $nid = uib_area__get_ou_nid($node);
    if (!$nid)
      return NULL;
    $node = node_load($nid);
  }

  $res = array();
  $res[] = $node->nid;

  $code = $node->field_uib_ou_id['und'][0]['value'];
  if (substr($code, 2) == '0000')
    $like = substr($code, 0, 2) . '%';
  elseif (substr($code, 4) == '00')
    $like = substr($code, 0, 4) . '%';

  if (isset($like)) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'uib_ou')
      ->fieldCondition('field_uib_ou_id', 'value', $like, 'LIKE');
    $result = $query->execute();
    $res = array_keys($result['node']);
    sort($res);
  }

  $res = join('+', $res);
  return $res;
}

/**
 * Find the node id of the current uib_area.
 *
 * @return [type] [description]
 *   If no area reference is found, the function returns NULL.
 */
function uib_area__get_current_nid() {
  $a = uib_area__get_current();
  if (!empty($a)) {
    return $a->nid;
  }
  else {
    return NULL;
  }
}

/**
 * Find the menu to use for the current uib_area.
 *
 * @return [type] [description]
 *   If no area node id is found, the function returns NULL.
 */
function uib_area__get_current_menu() {
  $nid = uib_area__get_current_nid();
  if (!empty($nid)) {
    return "menu-area-$nid";
  }
  else {
    return NULL;
  }
}


/**
 * Find menu link for the current uib_area.
 *
 * @return [type] [description]
 *   If no area reference or no menu link is found, the function returns NULL.
 */
function uib_area__get_current_menu_link() {
  $ar = uib_area__get_current();
  if (! empty($ar)) {
    if (!empty($ar->nid)) {
      $menu_link = menu_link_get_preferred('node/' . $ar->nid, uib_area__get_current_menu());
      if (!empty($menu_link)) {
        return $menu_link;
      }
    }
  }
  return NULL;
}

/**
 * Find link item id of the current uib_area.
 *
 * @return [type] [description]
 *   If no menu link is found, the function returns NULL.
 */
function uib_area__get_current_mlid() {
  $menu_link = uib_area__get_current_menu_link();
  if (!empty($menu_link)) {
    return $menu_link['mlid'];
  }
  return NULL;
}

/**
 * Find menu link item id which is to be used as a starting point for the top
 * level area menu block.
 *
 * @return [type] [description]
 *   The function may not return something that evaluates to FALSE,
 *   because this will result in a menu containing the full area menu.
 *   Instead, this fix will return 1 upon failure which will
 *   result in an empty menu.
 *
 */
function uib_area__get_menustart() {
  $mlid = uib_area__get_current_mlid();
  if ($mlid > 0) {
    return $mlid;
  }
  else {
    return 1;
  }
}

/**
 * Implements hook_form_alter().
 */
function uib_area_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'area_node_form') {
    // list of fields that should be hidden (in area node form) from
    // both level 3 and level 2 users
    $not_for_level_2 = array(
      'field_uib_w2_id', // ID w2
      'field_uib_sebra_id', // Sebra ID
      'field_uib_area_type', // Type
      'title', // Title
      'field_uib_area_parents', // Parents
      'field_uib_ou', // Place
      'field_uib_menu_style', // Menu style
      );
    // list of fields that should be hidden from
    // level 3 users
    $not_for_level_3 = array(
      'field_uib_content_manager', // Content Manager
      'field_uib_staff', // Staff
      'field_uib_show_staff', // Show staff
      'field_uib_logo', // Logo
      'field_uib_important_message', // Important message
      );
    if ( (in_array('level 2', $GLOBALS['user']->roles, TRUE) OR in_array('level 3', $GLOBALS['user']->roles, TRUE)) AND (!in_array('level 1', $GLOBALS['user']->roles, TRUE)) ) {
      // Hide some fields for level 2 and level 3 users
      foreach ($not_for_level_2 as $l2) {
        if (isset($form[$l2])) {
          $form[$l2]['#access'] = FALSE;
        }
      }
      if (! in_array('level 2', $GLOBALS['user']->roles, TRUE)) {
        // Hide some additional fields for level 3 users
        foreach ($not_for_level_3 as $l3) {
          if (isset($form[$l3])) {
            $form[$l3]['#access'] = FALSE;
          }
        }
      }
    }
    $form['field_uib_area_parents']['#states'] = array(
      'required' => array(
        ':input[name="field_uib_area_type[und]"]' => array('value' => 'discipline'),
       ),
    );
    // Hiding fields for newspage/frontpage
    $form['field_uib_bottom_media']['#states'] = array(
      'invisible' => array(
        ':input[name="field_uib_area_type[und]"]' => array(
          array('value' => 'frontpage'),
          array('value' => 'newspage'),
        ),
      ),
    );
    $form['field_uib_profiled_testimonial']['#states'] = array(
      'invisible' => array(
        ':input[name="field_uib_area_type[und]"]' => array(
          array('value' => 'frontpage'),
          array('value' => 'newspage'),
        ),
      ),
    );
    $form['field_uib_bottom_text']['#states'] = array(
      'invisible' => array(
        ':input[name="field_uib_area_type[und]"]' => array(
          array('value' => 'frontpage'),
          array('value' => 'newspage'),
        ),
      ),
    );
    $form['field_uib_secondary_text']['#states'] = array(
      'invisible' => array(
        ':input[name="field_uib_area_type[und]"]' => array(
          array('value' => 'frontpage'),
          array('value' => 'newspage'),
        ),
      ),
    );
    $form['field_uib_tertiary_text']['#states'] = array(
      'invisible' => array(
        ':input[name="field_uib_area_type[und]"]' => array(
          array('value' => 'frontpage'),
          array('value' => 'newspage'),
        ),
      ),
    );
    // Showing profiled messages only for newspage and frontpage
    $form['field_uib_profiled_message']['#states'] = array(
      'visible' => array(
        ':input[name="field_uib_area_type[und]"]' => array(
          array('value' => 'frontpage'),
          array('value' => 'newspage'),
        ),
      ),
    );
    $form['field_uib_feed']['#states'] = array(
      'invisible' => array(
        ':input[name="field_uib_area_type[und]"]' => array('value' => 'frontpage'),
       ),
    );
  }
}

/**
 * Implements hook_node_validate().
 */
function uib_area_node_validate($node, $form, &$form_state) {
  if ($form['#form_id'] == 'area_node_form') {
    if ($form['field_uib_area_type']['und']['#value'] == 'discipline') {
      if (empty($form['field_uib_area_parents']['und'][0]['target_id']['#value'])) {
        form_set_error('field_uib_area_parents', t('Area parent is required'));
      }
    }
  }
}

/**
 * Adds aliases paths to an area node.
 *
 * Adds a number of project specific aliases for area nodes (if they do not exist)
 * These aliases correspond to views paths in the views "Staff", "Area map", "Recent news" etc
 *
 * @param [type] [varname] [description]
 * @param [type] [varname] [description]
 * @param [type] [varname] [description]
 *
 * @return [type] [description]
 */
function uib_area__create_area_aliases($node_nid, $node_alias, $language) {
  if (!empty($node_nid) AND !empty($node_alias)) {
    // Add aliases only to non employee pages
    if (stripos($node_alias, 'foransatte') === FALSE AND stripos($node_alias, 'foremployees') === FALSE) {
      $uib_area_aliases = array(
        '/persons',
        '/persons/faculty',
        '/persons/staff',
        '/map',
        '/news-archive',
        '/rss.xml',
        '/calrss.xml',
        '/calendar',
        '/courses',
        '/study-programmes',
        '/bachelor-programmes',
        '/master-programmes',
        '/one-year-programmes',
        '/research-groups',
        '/research-schools',
        '/disciplines',
        '/calendar',
      );
      $node_url = 'node/' . intval($node_nid);
      foreach ($uib_area_aliases as $pa) {
        $source_url = $node_url . $pa;
        $new_alias_url = $node_alias . $pa;
        if (empty($language)) {
          $new_path = array('source' => $source_url, 'alias' => $new_alias_url); // will create alias for all languages
        }
        else {
          $new_path = array('source' => $source_url, 'alias' => $new_alias_url, 'language' => $language);
        }
        if ($existing_alias = path_load($source_url)) { // get existing alias
           if ($existing_alias['alias'] != $new_alias_url) {
            // Alias exists for the source, but different one than this
            path_save($new_path);
          }
          elseif (!empty($language)) {
            if ($existing_alias['language'] != $language) {
              // Alias exists, but not for this language
              path_save($new_path);
            }
          }
        }
        else {
          path_save($new_path);
        }
      }
    }
  }
  else {
    return FALSE;
  }
}

/**
 * Deletes a number of alias paths from an area node.
 *
 * cf. the function uib_area__create_area_aliases() that creates them.
 *
 * @param [type] [varname] [description]
 *
 * @return [type] [description]
 */
function uib_area__remove_area_aliases($node_nid) {
  if (!empty($node_nid)) {
    $node_url = 'node/' . intval($node_nid);
    $uib_area_aliases = array(
      '/persons',
      '/persons/faculty',
      '/map',
      '/news-archive',
      '/rss.xml',
      '/calrss.xml',
      '/calendar',
      '/courses',
      '/study-programmes',
      '/bachelor-programmes',
      '/master-programmes',
      '/one-year-programmes',
      '/research-groups',
      '/research-schools',
      '/disciplines',
      '/calendar',
    );
    foreach ($uib_area_aliases as $pa) {
      $source_url = $node_url . $pa;
      if ($existing = path_load($source_url)) { // Check if alias exists
        path_delete($existing['pid']); // remove it
      }
    }
  } else {
    return FALSE;
  }
}

/**
 * Implements hook_node_insert().
 *
 */
function uib_area_node_insert($node) {
  if ($node->type == 'area') {
    if (isset($node->path['alias'])) {
      uib_area__create_area_aliases($node->nid, $node->path['alias'], $node->language);
    }
    if (uib_area_menu_is_allowed($node)) {
      // Create a unique menu for this area
      if ($node->nid) {
        $menu_machine_name = 'menu-area-' . $node->nid;
        if (!empty($node->path['alias'])) {
          $menu_title = 'area_' . str_replace('/', '_', $node->path['alias']);
          if ($node->language == 'en') {
            // Set suffix for English menus since nb and en aliases for different nodes may be the same
            $menu_title .= '_en';
          }
        }
        else {
          // A way out if no alias was set: use the node id
          $menu_title = 'area_' . $node->nid;
        }
        $menu_description = t('Menu for') . ' ' . $node->title;
        if (!menu_load($menu_machine_name)) {
          // Create new menu
          $menu = array(
            'menu_name' => $menu_machine_name,
            'title' => $menu_title,
            'description' => $menu_description,
            );
          menu_save($menu);
        }
      }
    }
  }
}

/**
 * Implements hook_node_update().
 */
function uib_area_node_update($node) {
  if ($node->type == 'area' && isset($node->path['alias'])) {
    // add uib area aliases if the node path was changed
    // any previous aliases will remain
    uib_area__create_area_aliases($node->nid, $node->path['alias'], $node->language);
  }
}

/**
 * Implements hook_node_delete().
 */
function uib_area_node_delete($node) {
  if ($node->type == 'area') {
    // remove uib area aliases
    uib_area__remove_area_aliases($node->nid);
    // remove the menu for this area
    if (uib_area_menu_is_allowed($node)) {
      $menu_machine_name = 'menu-area-' . $node->nid;
      if ($menu = menu_load($menu_machine_name)) {
        menu_delete($menu);
      }
    }
  }
}

/**
 * Control if the current node page is an employee page.
 */
function uib_area__is_employee_page() {
  $node = uib_area__get_current();
  if (isset($node->field_uib_sebra_id['und'][0]['value'])) {
    if ($node->field_uib_sebra_id['und'][0]['value'] == 519) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Is the given user a content manager for the given area
 */
function uib_area__is_content_manager($area, $user) {
    if (isset($area->field_uib_content_manager['und'])) {
      foreach ($area->field_uib_content_manager['und'] as $cm) {
        if ($user->uid == $cm['target_id'])
          return TRUE;
      }
    }
    return FALSE;
}

/**
 * Implements hook_node_access().
 *
 * Control access to edit an area
 */
function uib_area_node_access($node, $op, $user) {
  if ($op == 'view') {
    return NODE_ACCESS_IGNORE;
  }
  // $op is one of 'create', 'update', 'delete'
  if (is_object($node) && $node->type == 'area') {
    if (!uib_area__is_content_manager($node, $user)) {
      return NODE_ACCESS_DENY;
    }
  }
  if (is_object($node) && $node->type == 'uib_article') {
    if (!uib_area__is_content_manager(node_load($node->field_uib_area['und'][0]['target_id']), $user)) {
      return NODE_ACCESS_DENY;
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * If the 'edit' tab of a node is missing (because of missing node_access) then
 * also hide the 'revisions' and 'translate' tabs
 */
function uib_area_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if (!path_is_admin(current_path())) {
    if (empty($data['tabs']) || $data['tabs'][0]['output'][0]['#link']['path'] != 'node/%/view') {
      return;
    }

    $tabs = array();
    foreach ($data['tabs'][0]['output'] as $tab) {
      $path = $tab['#link']['path'];
      if ($path == 'node/%/edit') {
        // if we find the edit tab, do nothing
        return;
      }
      if ($path == 'node/%/revisions' || $path == 'node/%/translate') {
        // tabs to ignore
        continue;
      }
      $tabs[] = $tab;
    }

    // replace the tabs
    $data['tabs'][0]['count'] = count($tabs);
    $data['tabs'][0]['output'] = $tabs;
  }

/**
 * Assemble the current area menu for display on a page
 */
function uib_area_area_menu() {
  $area_menu = block_load('menu', uib_area__get_current_menu());
  $area_menu->title = 'area menu';
  $area_menu->region = 'navigation';
  $am = _block_get_renderable_array(_block_render_blocks(array($area_menu,)));
  // Cause nothing to happen when a user clicks on top level menu item
  foreach ($am as $key => $item) {
    if (strpos($key, 'menu-area') !== FALSE) {
      foreach ($item as $mlink => $menu_item) {
        if (is_numeric($mlink)) {
          $am[$key][$mlink]['#href'] = current_path();
        }
      }
    }
  }
  return $am;
}

/**
 * Generate a menu
 * @param string $menu_name
 *  The menu we want to retrieve
 * @param int $active_mlid
 *  The id of the active menu link
 * @return string
 *  HTML representing the chosen menu
 */
function uib_area__get_menu($menu_name, $active_mlid = FALSE) {
  $tree = menu_tree_all_data($menu_name, NULL, 2);
  $menu = array();
  uib_area__generate_menu_rec($menu, $tree, $active_mlid);
  $options = array();
  uib_area__menu_get_options($menu, '', $options);
  return $options;
}

/**
 * Fetch menu options (recursive)
 */
function uib_area__menu_get_options($menu, $indent, &$options) {
  foreach ($menu as $mlid => $item) {
    $options[$mlid] = $indent . $item['title'];
    if (!empty($item['below'])) {
      uib_area__menu_get_options($item['below'], $indent . '-- ', $options);
    }
  }
}

/**
 * Generate a menu array
 * [modified from menuux module]
 * This function is recursive
 *
 * @param array $menu
 *  The menu that is to be generated
 * @param array $raw_menu
 *  The menu as returned from menu_tree_all_data
 * @param int $active_mlid
 *  The id of the active link
 * @return boolean
 *  Was the mlid of the active item found in the menu?
 */
function uib_area__generate_menu_rec(&$menu, $raw_menu, $active_mlid = FALSE) {
  $has_active = FALSE;
  foreach ($raw_menu as $data) {
    if ($data['link']['hidden'] >= 0) {
      $title = truncate_utf8($data['link']['title'], 94, TRUE, FALSE);
      if ($data['link']['hidden']) {
        $title .= ' ('. t('disabled') .')';
      }
      $mlid = $data['link']['mlid'];
      $menu[$mlid]['title'] = $title;
      if ($mlid == $active_mlid) {
        $menu[$mlid]['active'] = TRUE;
        $has_active = TRUE;
      }
      $menu[$mlid]['expanded'] = FALSE;
      if ($data['below']) {
        $below = array();
        $active_child = uib_area__generate_menu_rec($below, $data['below'], $active_mlid);
        $has_active = $has_active || $active_child;
        if (!empty($below)) {
          $menu[$mlid]['below'] = $below;
        }
        if ($active_child) {
          $menu[$mlid]['expanded'] = TRUE;
        }
      }
    }
  }
  return $has_active;
}

/**
 * Checks if an area node is expected to have an area menu
 *
 * Returns TRUE if it is, FALSE if not
 *
 * @param ref $node
 * A fully populated area node object (reference)
 */
function uib_area_menu_is_allowed($node) {
  if (!empty($node) && $node->type == 'area') {
    $allowed = array(
      'faculty',
      'institute',
      'research group',
      'research school',
      'section',
      'unit',
    );
    if (!empty($node->field_uib_area_type['und'][0]['value']) && in_array($node->field_uib_area_type['und'][0]['value'], $allowed)) {
      return TRUE;
    }
  }
  return FALSE;
}
