<?php
/**
 * @file
 * Code for the UiB Feature Area feature.
 */

include_once 'uib_area.features.inc';

/**
 * Implements hook_block_info().
 *
 * area_parents contains a list of parents to the current area.
 */
function uib_area_block_info() {
  return array(
    'colophon' => array(
      'info' => t('Colophon'),
      'status' => TRUE,
    ),
    'jobbnorge' => array(
      'info' => t('Jobbnorge'),
      'status' => TRUE,
    ),
    'feed' => array(
      'info' => t('Feed'),
      'status' => TRUE,
    ),
    'area_parents' => array(
      'info' => t('Area parents'),
      'status' => TRUE,
    ),
    'newspage_recent_news' => array(
      'info' => t('Newspage recent news'),
      'status' => TRUE,
    ),
    'colophon_logos' => array(
      'info' => t('Colophon logos frontpage'),
      'status' => TRUE,
    ),
    'paahoyden_logo' => array(
      'info' => t('Paa hoyden logo on newspage'),
      'status' => TRUE,
    ),
    'area_banner' => array(
      'info' => t('Area global html container'),
      'status' => TRUE,
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function uib_area_block_view($delta='') {
  $area = uib_area__get_current();
  $block = array();
  switch ($delta) {
    case 'colophon':
      $block['subject'] = NULL;
      $block['content'] = array(
        'name' => array(
          '#type' => 'html_tag',
          '#tag' => 'h3',
          '#value' => t('University of Bergen'),
        ),
        'address' => array(
          '#theme' => 'key_value',
          '#key' => t('Address'),
          '#value' => t('P.O. Box 7800, NO-5020 BERGEN'),
        ),
        'phone' => array(
          '#theme' => 'key_value',
          '#key' => t('Phone'),
          '#value' => '+47 55 58 00 00',
        ),
        'fax' => array(
          '#theme' => 'key_value',
          '#key' => t('Fax'),
        ),
        'emergency' => array(
          '#theme' => 'key_value',
          '#key' => t('24-hour security hotline'),
          '#value' => '+47 55 58 80 81',
        ),
        'contact' => array(
          '#type' => 'link',
          '#title' => t('post@uib.no'),
          '#href' => 'mailto:post@uib.no',
          '#prefix' => t('Contact') . ': ',
        ),
        'responsible' => array(
          '#theme' => 'key_value',
          '#key' => t('Responsible'),
          '#value' => t('Director of Communications'),
        ),
      );
      if ($area && isset($area->field_uib_ou['und'])) {
        $place = node_load($area->field_uib_ou['und'][0]['target_id']);
        $block['content']['name']['#value'] .= ' | ' . check_plain($area->title);
        if (!empty($place->field_uib_phone)) {
          $block['content']['phone']['#value'] =
            $place->field_uib_phone['und'][0]['value'];
        }
        if (!empty($place->field_uib_fax)) {
          $block['content']['fax']['#value'] =
            $place->field_uib_fax['und'][0]['value'];
        }
        if (!empty($place->field_uib_mail_domain)) {
          $block['content']['contact']['#title'] = 'post@' . $place->field_uib_mail_domain['und'][0]['safe_value'];
          $block['content']['contact']['#href'] = 'mailto:post@' . $place->field_uib_mail_domain['und'][0]['safe_value'];
        }
        if (!empty($place->field_uib_postal_address)) {
          $block['content']['address']['#value'] = uib_area__format_address($place);
        }
      }
      elseif ($area) {
        if (isset($area->field_uib_area_parents['und'])) {
          $parent = node_load($area->field_uib_area_parents['und'][0]['target_id']);
          if (isset($parent->field_uib_ou['und'])) {
            $place = node_load($parent->field_uib_ou['und'][0]['target_id']);
            if (!empty($place->field_uib_postal_address)) {
              $block['content']['address']['#value'] = uib_area__format_address($place);
            }
          }
        }
      }
      hide($block['content']['emergency']);
    break;
    case 'jobbnorge':
      $whitelist = array('faculty', 'unit', 'institute');
      if ($area && in_array($area->field_uib_area_type['und'][0]['value'], $whitelist)) {
        if (!empty($area->field_uib_ou['und'])) {
          $place = node_load($area->field_uib_ou['und'][0]['target_id']);
        }
        if (empty($place->field_uib_jobbnorge_id['und'])) {
          continue;
        }
        else {
          $feed = 'http://www.jobbnorge.no/joblist/joblistbuilder.ashx?id=821a69c9-7674-4e36-90f8-41e443b99064&depid=' . $place->field_uib_jobbnorge_id['und'][0]['value'];
        }
        if ($area->language == 'en') {
          $feed .= '&langid=2';
        }
        $block['content'] = uib_area__feed_format($feed, t('Open Positions'), $limit = 999);
      }
    break;
    case 'feed':
      if ($area) {
        $elements = array();
        if (!empty($area->field_uib_feed['und'])) {
          foreach ($area->field_uib_feed['und'] as $delta => $item) {
            $url = url($item['url'], $item);
            if (strpos($url, '#')) {
              $limit = explode('#', $url);
            }
            $limit = (isset($limit[1]) && is_numeric($limit[1])) ? $limit[1] : 5;
            $elements[$delta] = uib_area__feed_format($url, $item['title'], $limit);
          }
        }
        $block['content'] = $elements;
      }
    break;
    case 'area_parents':
      $block['subject'] = t('Belongs to');
      if (!empty($area->field_uib_area_parents['und'])) {
        // Setup an SQL query to get parent titles from node ids listed.
        $nlist = array();
        $query = 'SELECT nid, title FROM {node} WHERE ';
        $glue = '';
        for ($i=0; $i < count($area->field_uib_area_parents['und']); $i++) {
          $nlist[":nid$i"] = $area->field_uib_area_parents['und'][$i]['target_id'];
          $query .= $glue . " nid = :nid$i";
          $glue = " OR";
        }
        $result = db_query($query, $nlist);
        // Setup each parental area node title on a separate line with link.
        foreach ($result as $record) {
          $title = '';
          if (substr($record->title, 0, 9) == 'Area stub') {
            if ($stub_origin = uib_area__get_stub_info($record->title)) {
              $title = $stub_origin['title'];
              $url = $stub_origin['url'];
            }
          }
          else {
            $title = t($record->title);
            $url = 'node/' . $record->nid;
          }
          if ($title) {
            $block['content'][$title]['#markup'] = l($title, $url) . '<br>';
          }
        }
      }
    break;
    case 'newspage_recent_news':
      $slideshow = db_select('field_data_field_uib_profiled_article', 'f')
        ->fields('f', array('field_uib_profiled_article_target_id'))
        ->condition('entity_id', $area->nid)
        ->execute()
        ->fetchCol();

      $profiled_messages = db_select('field_data_field_uib_profiled_message', 'f')
        ->fields('f', array('field_uib_profiled_message_target_id'))
        ->condition('entity_id', $area->nid)
        ->execute()
        ->fetchCol();

      $exludes_nodes = array_merge($slideshow, $profiled_messages);
      if ($exludes_nodes) {
        $query = new EntityFieldQuery;
        $query = $query
          ->entityCondition('entity_type', 'node')
          ->range(0, 5)
          ->propertyCondition('status', 1)
          ->propertyOrderBy('created', 'DESC')
          ->fieldCondition('field_uib_article_type','value', 'news', '=')
          ->fieldCondition('field_uib_area','target_id', $area->nid, '=')
          ->propertyCondition('nid', $exludes_nodes, 'NOT IN');
        $result = $query->execute();
        $nids = array_keys($result['node']);
        $nodes = node_load_multiple($nids);
        $block['content'] = node_view_multiple($nodes);
        $node_keys = array_keys($block['content']['nodes']);
        foreach ($node_keys as $key) {
          if (is_numeric($key) && empty($block['content']['nodes'][$key]['field_uib_main_media'])) {
            $block['content']['nodes'][$key]['field_uib_main_media']['#markup'] =
              '<div class="field-name-field-uib-main-media-recent-news"><img src="/' .
              path_to_theme() .
              '/images/Recent_High.png" alt=""></div>';
          }
        }
      }
    break;
    case 'colophon_logos':
      global $base_url;
      global $theme_path;
      $path = $base_url . '/' . $theme_path . '/images/';
      $logo0_nb = $path . 'grunnloven_nb.png';
      $logo0_en = $path . 'grunnloven_en.png';
      $logo1_nb = $path . 'alumni.png';
      $logo1_en = $path . 'alumni_en.png';
      if(!empty($area) && $area->field_uib_area_type['und'][0]['value'] == 'frontpage') {
        if ($area->language == 'en') {
          $block['content'] = '
            <div id="banner1" class="banner eng">
              <a title="Alumni days 2014" href="http://www.uib.no/en/alumnidays">
                <img alt="Alumni days 2014" src="' . $logo1_en . '"/>
              </a>
            </div>
            <div id="banner2" class="banner eng">
              <a title="The Bicentenary of the Norwegian Constitution in 2014" href="http://www.uib.no/en/constitution2014">
                <img alt="The Bicentenary of the Norwegian Constitution in 2014" src="' . $logo0_en . '"/>
              </a>
            </div>
          ';
        }
        else {
          $block['content'] = '
            <div id="banner1" class="banner">
              <a title="Alumnidagene 2014" href="http://www.uib.no/alumnusdagene">
                <img alt="Alumnidagene 2014" src="' . $logo1_nb . '" />
              </a>
            </div>
            <div id="banner2" class="banner">
              <a title="Grunnlovsjubileet 2014" href="http://www.uib.no/grunnlovsjubileet2014">
                <img alt="Grunnlovsjubileet 2014" src="' . $logo0_nb . '" />
              </a>
            </div>
          ';
        }
      }
    break;
    case 'paahoyden_logo':
      global $base_url;
      global $theme_path;
      $path = $base_url . '/' . $theme_path . '/images/';
      $logo = $path . 'paahoyden.png';
      if(!empty($area) && $area->field_uib_area_type['und'][0]['value'] == 'newspage') {
        if ($area->language == 'nb') {
          $block['content'] = '
            <div>
              <a title="På Høyden, Uavhengig avis for UiB" href="http://pahoyden.no/">
                <img alt="På Høyden, Uavhengig avis for UiB" src="' . $logo . '"/>
              </a>
            </div>
          ';
        }
      }
    break;
    case 'area_banner':
      if (!empty($area)) {
        $wrapped_area = entity_metadata_wrapper('node', $area);
        $block['subject'] = NULL;
        if ($wrapped_area->field_uib_area_banner->value()) {
          $block['content'] = $wrapped_area->field_uib_area_banner->value->value();
        }
      }
    break;
  }
  return $block;
}

/**
 * Returns the full address of a place as a string
 */
function uib_area__format_address($place) {
  if (empty($place->field_uib_postal_address))
    return;
  $address = $place->field_uib_postal_address['und'][0]['thoroughfare'];
  $p_code = $place->field_uib_postal_address['und'][0]['postal_code'];
  $p_place = $place->field_uib_postal_address['und'][0]['locality'];
  return $address . ', ' . t('N-') . $p_code . ' ' . $p_place;
}

/**
 * uib_area_change_to_h2 description missing
 * @param  [type] $markup  [description]
 * @param  [type] $element [description]
 *
 * @return [type]          [description]
 */
function uib_area_change_to_h2($markup, $element) {
  $markup = preg_replace('/<h3(.*?)>(.*?)<\/h3>/','<h2\1>\2</h2>', $markup);
  return $markup;
}

/**
 * [uib_area__feed_format description]
 * @param  [type] $url   [description]
 * @param  [type] $title [description]
 * @param  [type] $limit [description]
 *
 * @return [type]        [description]
 */
function uib_area__feed_format($url, $title, $limit) {
  return array(
    '#cache' => array(
      'keys' => array($url, $title, $limit),
      'expire' => time() + 30*60,
    ),
    '#pre_render' => array('uib_area__feed_format_pre_render'),
    '#post_render' => array('uib_area__feed_format_post_render'),
  );
}

/**
 * The heavy stuff done during uib_area__feed_form()
 */
function uib_area__feed_format_pre_render($element) {
  list($url, $title, $limit) = $element['#cache']['keys'];
  $content = @file_get_contents($url);
  if (!$content) {
    return $element;
  }
  $xml = @simplexml_load_string($content);
  if ($xml === FALSE) {
    return $element;
  }
  if ($xml->channel->item) {
    $element['list'] = array(
      '#title' => $title,
      '#items' => array(),
      '#theme' => 'item_list',
      '#post_render' => array('uib_area_change_to_h2'),
    );
    foreach ($xml->channel->item as $entry) {
      $pubDate = $entry->pubDate;
      if (!empty($pubDate)) {
        $pubDate_t = strtotime($pubDate);
        if ($pubDate_t) {
          $pubDate_f = strftime("%Y-%m-%d", $pubDate_t);
          $entry->title .= " ($pubDate_f)";
        }
      }
      $element['list']['#items'][] = l($entry->title, $entry->link);
      if (--$limit == 0)
        break;
    }
  }
  if (!isset($element['list'])) {
    $element = array();
  }
  return $element;
}

/**
 * Adds markup for blue square on feed block titles
 */
function uib_area__feed_format_post_render($markup) {
  $markup = preg_replace('/<h2>/', '<h2><span></span>', $markup, 1);
  $markup = '<div class="blue-block">' . $markup . '</div>';
  return $markup;
}

/**
 * Implements hook_field_formatter_info().
 */
function uib_area_field_formatter_info() {
  return array(
    'uib_area_link_feed' => array(
      'label' => t('View as an rss feed'),
      'field types' => array('link_field'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function uib_area_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  foreach ($items as $delta => $item) {
    $url = url($item['url'], $item);
      if (strpos($url, '#')) {
        $limit = explode('#', $url);
      }
      $limit = (isset($limit[1]) && is_numeric($limit[1])) ? $limit[1] : 5;
    $elements[$delta] = uib_area__feed_format($url, $item['title'], $limit);
  }
  return $elements;
}

/**
 * Implements hook_theme().
 */
function uib_area_theme() {
  return array(
    'uib_area_formatter_uib_area_link_feed' => array(
      'variables' => array('element' => NULL),
    ),
  );
}

/**
 * Implements hook_node_presave().
 */
function uib_area_node_presave($node) {
  // obtain full list of parent areas
  $parent_node_id_list = array();
  if (!empty($node->field_uib_area_parents['und'])) {
    foreach ($node->field_uib_area_parents['und'] as $parent) {
      uib_area__get_parentage($parent['target_id'], $parent_node_id_list);
    }
    // remove duplicate area node ids if present
    $cleaned_node_id_list = array();
    foreach ($parent_node_id_list as $pnid) {
      if (!in_array($pnid, $cleaned_node_id_list)) {
        $cleaned_node_id_list[] = $pnid;
      }
    }
    // update node with cleaned full list
    $node->field_uib_area_parents['und'] = array();
    for($i = 0; $i < count($cleaned_node_id_list); $i++) {
      $node->field_uib_area_parents['und'][$i] = array('target_id' => $cleaned_node_id_list[$i]);
    }
  }
}

/**
 * Rcursively tries to get uib_area parent_ids.
 *
 * @param [type] [varname] [description]
 * @param [type] [varname] [description]
 */
function uib_area__get_parentage($parent_node_id, &$parent_ids) {
  $parent_ids[] = $parent_node_id;
  if ($parent_node = node_load($parent_node_id)) {
    if (!empty($parent_node->field_uib_area_parents['und'])) {
      foreach ($parent_node->field_uib_area_parents['und'] as $this_parent) {
        uib_area__get_parentage($this_parent['target_id'],$parent_ids);
     }
    }
  }
}

/**
 * Find and obtain [and keep] reference to current uib_area
 * as indicated by node id in URL, or in the field_uib_area
 * of that node. That node is loaded if necessary.
 *
 * The current area may be set "manually" by passing an area node id
 *
 * @param [integer] Optional area node id to set as current area
 * @return [type] [description]
 *   If no area reference is found, the function returns NULL.
 */
function uib_area__get_current($area_nid = NULL) {
  static $current_area;
  if (!empty($area_nid)) {
    $area_nid = intval($area_nid);
    $node = node_load($area_nid);
    if ($node->type == 'area') {
      $current_area = $node;
    }
  }
  if (!isset($current_area)) {
    // obtain area from node indicated in url
    if (arg(0) == 'node' && is_numeric(arg(1))) {
      $nn = intval(arg(1));
      $node = node_load($nn);
      if (!empty($node)) {
        if ($node->type == 'area') {
          $current_area = $node;
        }
        elseif ($node->type == 'uib_study') {
          $study_area_nid = variable_get('uib_study_area_nid');
          if ($study_area_nid)
            $current_area = node_load($study_area_nid);
        }
        elseif (isset($node->field_uib_area['und'][0]['entity'])) {
          $current_area = $node->field_uib_area['und'][0]['entity'];
        }
        elseif (!empty($node->field_uib_area['und'][0]['target_id'])) {
          $current_area = node_load($node->field_uib_area['und'][0]['target_id']);
        }
        else {
          $current_area = NULL;
        }
      }
    }
  }
  return uib_area__get_current_by_language($current_area);
}

/**
 * Get the area that corresponds to the global language if this
 * is different from the articles language.
 *
 * @param node $current_area
 *   The current uib_area before a check to se if the global
 *   language is equal to the current uib_area's language.
 * @return node
 *   The current uib_area in the global language.
 */
function uib_area__get_current_by_language($current_area) {
  if (!$current_area)
    return NULL;
  global $language;
  if ($language->language != $current_area->language) {
    if ($current_area->nid == $current_area->tnid) {
      $result = db_select('node', 'n')
        ->fields('n', array('nid'))
        ->condition('tnid', $current_area->nid, '=')
        ->condition('nid', $current_area->nid, '<>')
        ->execute()
        ->fetchAssoc();
      $current_area = node_load($result['nid']);
    }
    else {
      $current_area = node_load($current_area->tnid);
    }
  }
  return $current_area;
}

/**
 * Get current node address as indicated by node id in URL.
 *
 * @return [type] [description]
 *   If no node reference is found in URL, the function returns NULL.
 */
function uib_area__get_current_node() {
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    return arg(0) . '/' . arg(1);
  }
  return NULL;
}

/**
 * Get the node type of an indicated node ('node/nid'), or
 * the current node as indicated by node id in URL.
 *
 * @param [type] [varname] [description]
 *
 * @return [type] [description]
 *   If no node or node type is found, the function returns NULL.
 */
function uib_area__get_node_type($node = NULL) {
  if (empty($node)) {
    $node = uib_area__get_current_node();
  }
  if (!empty($node)) {
    $tmp = explode('/',$node);
    if (is_numeric($tmp[1])) {
      $query = 'SELECT type FROM {node} WHERE nid = :nid'; // get node type
      $result = db_query($query, array(':nid' => $tmp[1]));
      foreach ($result as $record) {
        return $record->type;
      }
    }
  }
  return NULL;
}

/**
 * Find the OU nid referenced from an area or ou
 * (defaults to the ou nid of current area).
 *
 * @return [type] [description]
 *   If the area does not have an OU, the function will recursively search its
 *   area parents until an OU is ultimately found -- or return NULL.
 */
function uib_area__get_ou_nid($area = NULL) {
  if (empty($area)) {
    $area = uib_area__get_current();
  }
  elseif ($area->type == 'uib_ou') {
    return $area->nid;
  }
  if (!empty($area->field_uib_ou['und'][0]['target_id'])) {
    return $area->field_uib_ou['und'][0]['target_id'];
  }
  else {
    if (!empty($area->field_uib_area_parents)) {
      $i = 0;
      $nrof_parents = count($area->field_uib_area_parents['und']);
      $ou_nid = NULL;
      while (empty($ou_nid) && $i < $nrof_parents) {
        $ou_nid = uib_area__get_ou_nid(node_load($area->field_uib_area_parents['und'][$i]['target_id']));
        $i++;
      }
      if ($i < $nrof_parents) {
        uibx_log("Selected the first OU found [$ou_nid] for area node $area->nid among $nrof_parents parents.", "warning");
      }
      return $ou_nid;
    }
    else {
      return NULL;
    }
  }
}

/**
 * Find nid referenced from an area or ou.
 *
 */
function uib_area__get_ou_nids_recursive($nid) {
  $node = node_load($nid);
  if (!$node)
    return NULL;

  if ($node->type == "area") {
    $nid = uib_area__get_ou_nid($node);
    if (!$nid)
      return NULL;
    $node = node_load($nid);
  }

  $res = array();
  $res[] = $node->nid;

  $code = $node->field_uib_ou_id['und'][0]['value'];
  if (substr($code, 2) == '0000')
    $like = substr($code, 0, 2) . '%';
  elseif (substr($code, 4) == '00')
    $like = substr($code, 0, 4) . '%';

  if (isset($like)) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'uib_ou')
      ->fieldCondition('field_uib_ou_id', 'value', $like, 'LIKE');
    $result = $query->execute();
    $res = array_keys($result['node']);
    sort($res);
  }

  $res = join('+', $res);
  return $res;
}

/**
 * Find the node id of the current uib_area.
 *
 * @return [type] [description]
 *   If no area reference is found, the function returns NULL.
 */
function uib_area__get_current_nid() {
  $a = uib_area__get_current();
  if (!empty($a)) {
    return $a->nid;
  }
  else {
    return NULL;
  }
}

/**
 * Find the menu to use for the current uib_area.
 *
 * @return [type] [description]
 *   Returns NULL if there is no current area node
 *   or there should be no menu for the area.
 */
function uib_area__get_current_menu() {
  $menu_name = NULL;
  $curr_node = uib_area__get_current();
  if ($curr_node) {
    if (uib_area_menu_is_allowed($curr_node)) {
      if (!empty($curr_node->nid)) {
        $menu_name = 'menu-area-' . $curr_node->nid;
      }
    }
  }
  return $menu_name;
}

/**
 * Find menu link for the current uib_area.
 *
 * @return [type] [description]
 *   If no area reference or no menu link is found, the function returns NULL.
 */
function uib_area__get_current_menu_link() {
  $ar = uib_area__get_current();
  if (! empty($ar)) {
    if (!empty($ar->nid)) {
      $menu_link = menu_link_get_preferred('node/' . $ar->nid, uib_area__get_current_menu());
      if (!empty($menu_link)) {
        return $menu_link;
      }
    }
  }
  return NULL;
}

/**
 * Find link item id of the current uib_area.
 *
 * @return [type] [description]
 *   If no menu link is found, the function returns NULL.
 */
function uib_area__get_current_mlid() {
  $menu_link = uib_area__get_current_menu_link();
  if (!empty($menu_link)) {
    return $menu_link['mlid'];
  }
  return NULL;
}

/**
 * Find menu link item id which is to be used as a starting point for the top
 * level area menu block.
 *
 * @return [type] [description]
 *   The function may not return something that evaluates to FALSE,
 *   because this will result in a menu containing the full area menu.
 *   Instead, this fix will return 1 upon failure which will
 *   result in an empty menu.
 *
 */
function uib_area__get_menustart() {
  $mlid = uib_area__get_current_mlid();
  if ($mlid > 0) {
    return $mlid;
  }
  else {
    return 1;
  }
}

/**
 * Implements hook_form_alter().
 */
function uib_area_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'area_node_form') {
    // list of fields that should be hidden (in area node form) from
    // both level 3 and level 2 users
    $not_for_level_2 = array(
      'field_uib_w2_id', // ID w2
      'field_uib_sebra_id', // Sebra ID
      'field_uib_area_type', // Type
      'title', // Title
      'field_uib_area_parents', // Parents
      'field_uib_ou', // Place
      'field_uib_menu_style', // Menu style
      'field_uib_logo', // Logo
      'field_uib_area_banner', // Banner
      );
    // list of fields that should be hidden from
    // level 3 users
    $not_for_level_3 = array(
      'field_uib_content_manager', // Content Manager
      'field_uib_staff', // Staff
      'field_uib_show_staff', // Show staff
      'field_uib_important_message', // Important message
      );
    if ( (in_array('level 2', $GLOBALS['user']->roles, TRUE) OR in_array('level 3', $GLOBALS['user']->roles, TRUE)) AND (!in_array('level 1', $GLOBALS['user']->roles, TRUE)) ) {
      // Hide some fields for level 2 and level 3 users
      foreach ($not_for_level_2 as $l2) {
        if (isset($form[$l2])) {
          $form[$l2]['#access'] = FALSE;
        }
      }
      if (! in_array('level 2', $GLOBALS['user']->roles, TRUE)) {
        // Hide some additional fields for level 3 users
        foreach ($not_for_level_3 as $l3) {
          if (isset($form[$l3])) {
            $form[$l3]['#access'] = FALSE;
          }
        }
      }
    }
    $form['field_uib_area_parents']['#states'] = array(
      'required' => array(
        ':input[name="field_uib_area_type[und]"]' => array('value' => 'discipline'),
       ),
    );
    // Hiding fields for newspage/frontpage
    $form['field_uib_bottom_media']['#states'] = array(
      'invisible' => array(
        ':input[name="field_uib_area_type[und]"]' => array(
          array('value' => 'frontpage'),
          array('value' => 'newspage'),
        ),
      ),
    );
    $form['field_uib_profiled_testimonial']['#states'] = array(
      'invisible' => array(
        ':input[name="field_uib_area_type[und]"]' => array(
          array('value' => 'frontpage'),
          array('value' => 'newspage'),
        ),
      ),
    );
    $form['field_uib_bottom_text']['#states'] = array(
      'invisible' => array(
        ':input[name="field_uib_area_type[und]"]' => array(
          array('value' => 'frontpage'),
          array('value' => 'newspage'),
        ),
      ),
    );
    $form['field_uib_secondary_text']['#states'] = array(
      'invisible' => array(
        ':input[name="field_uib_area_type[und]"]' => array(
          array('value' => 'frontpage'),
          array('value' => 'newspage'),
        ),
      ),
    );
    $form['field_uib_tertiary_text']['#states'] = array(
      'invisible' => array(
        ':input[name="field_uib_area_type[und]"]' => array(
          array('value' => 'frontpage'),
          array('value' => 'newspage'),
        ),
      ),
    );
    // Showing profiled messages only for newspage and frontpage
    $form['field_uib_profiled_message']['#states'] = array(
      'visible' => array(
        ':input[name="field_uib_area_type[und]"]' => array(
          array('value' => 'frontpage'),
          array('value' => 'newspage'),
        ),
      ),
    );
    $form['field_uib_feed']['#states'] = array(
      'invisible' => array(
        ':input[name="field_uib_area_type[und]"]' => array('value' => 'frontpage'),
       ),
    );
  }
  elseif ($form_id == 'menu_edit_item') {
    if (!user_access('administer menu')) {
      // For content managers: Restrict options to the current area menu
      $area_menu = substr($form['parent']['#default_value'], 0, strpos($form['parent']['#default_value'], ':'));
      $opt = array();
      foreach ($form['parent']['#options'] as $key => $value) {
        if (substr($key, 0, strpos($key, ':')) == $area_menu) {
          $opt[$key] = $value;
        }
      }
      $form['parent']['#options'] = $opt;
      $form_state['rebuild'] = TRUE;
    }
  }
}

/**
 * Implements hook_node_validate().
 */
function uib_area_node_validate($node, $form, &$form_state) {
  if ($form['#form_id'] == 'area_node_form') {
    if ($form['field_uib_area_type']['und']['#value'] == 'discipline') {
      if (empty($form['field_uib_area_parents']['und'][0]['target_id']['#value'])) {
        form_set_error('field_uib_area_parents', t('Area parent is required'));
      }
    }
  }
}

/**
 * Lists general aliases paths for an area node.
 *
 * @param string $node_alias Node alias
 *
 * @return array List of aliases to be added or removed for this node
 */
function uib_area__list_area_aliases($node_alias = NULL) {
  if (!empty($node_alias) && (stripos($node_alias, 'foransatte') || stripos($node_alias, 'foremployees'))) {
    return array(
      '/rss.xml',
      '/calrss.xml',
    );
  }
  else {
    return array(
      '/persons',
      '/persons/faculty',
      '/persons/staff',
      '/map',
      '/news-archive',
      '/rss.xml',
      '/calrss.xml',
      '/calendar',
      '/courses',
      '/study-programmes',
      '/bachelor-programmes',
      '/master-programmes',
      '/one-year-programmes',
      '/research-groups',
      '/research-schools',
      '/disciplines',
      '/calendar',
      '/calendar/year',
      '/calendar/day',
    );
  }
}

/**
 * Adds aliases paths to an area node.
 *
 * Adds a number of project specific aliases for area nodes (if they do not exist)
 * These aliases correspond to views paths in the views "Staff", "Area map",
 * "Recent news" etc.
 *
 * @param integer $node_nid   Node id [nid] of the node
 * @param string  $node_alias Node alias
 * @param string  $language   Language code for the node
 *
 * @return FALSE is returned if input parameters are missing
 */
function uib_area__create_area_aliases($node_nid, $node_alias, $language = NULL) {
  if (!empty($node_nid) AND !empty($node_alias)) {
    $uib_area_aliases = uib_area__list_area_aliases($node_alias);
    $node_url = 'node/' . intval($node_nid);
    foreach ($uib_area_aliases as $pa) {
      $source_url = $node_url . $pa;
      $new_alias_url = $node_alias . $pa;
      if (empty($language)) {
        $new_path = array('source' => $source_url, 'alias' => $new_alias_url); // will create alias for all languages
      }
      else {
        $new_path = array('source' => $source_url, 'alias' => $new_alias_url, 'language' => $language);
      }
      if ($existing_alias = path_load($source_url)) { // get existing alias
         if ($existing_alias['alias'] != $new_alias_url) {
          // Alias exists for the source, but different one than this
          path_save($new_path);
        }
        elseif (!empty($language)) {
          if ($existing_alias['language'] != $language) {
            // Alias exists, but not for this language
            path_save($new_path);
          }
        }
      }
      else {
        path_save($new_path);
      }
    }
  }
  else {
    return FALSE;
  }
}

/**
 * Deletes a number of alias paths from an area node.
 *
 * cf. the function uib_area__create_area_aliases() that creates them.
 *
 * @param integer $node_nid Node id [nid] of the node
 *
 * @return FALSE is returned if no input parameter
 */
function uib_area__remove_area_aliases($node_nid) {
  if (!empty($node_nid)) {
    $node_url = 'node/' . intval($node_nid);
    $uib_area_aliases = uib_area__list_area_aliases();
    foreach ($uib_area_aliases as $pa) {
      $source_url = $node_url . $pa;
      if ($existing = path_load($source_url)) { // Check if alias exists
        path_delete($existing['pid']); // remove it
      }
    }
  } else {
    return FALSE;
  }
}

/**
 * Implements hook_node_insert().
 *
 */
function uib_area_node_insert($node) {
  if ($node->type == 'area') {
    if (isset($node->path['alias'])) {
      uib_area__create_area_aliases($node->nid, $node->path['alias'], $node->language);
    }
    if (uib_area_menu_is_allowed($node)) {
      if (empty($node->field_uib_w2_id['und'][0])) {
        // Create a unique menu for this area
        if ($node->nid) {
          $menu_machine_name = 'menu-area-' . $node->nid;
          if (!empty($node->path['alias'])) {
            $menu_title = 'area_' . str_replace('/', '_', $node->path['alias']);
            if ($node->language == 'en') {
              // Set suffix for English menus since nb and en aliases for different nodes may be the same
              $menu_title .= '_en';
            }
          }
          else {
            // A way out if no alias was set: use the node id
            $menu_title = 'area_' . $node->nid;
          }
          $menu_description = t('Menu for') . ' ' . $node->title;
          if (!menu_load($menu_machine_name)) {
            // Create new menu
            $menu = array(
              'menu_name' => $menu_machine_name,
              'title' => $menu_title,
              'description' => $menu_description,
              );
            menu_save($menu);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_node_update().
 */
function uib_area_node_update($node) {
  if ($node->type == 'area' && isset($node->path['alias'])) {
    // add uib area aliases if the node path was changed
    // any previous aliases will remain
    uib_area__create_area_aliases($node->nid, $node->path['alias'], $node->language);
  }
}

/**
 * Implements hook_node_delete().
 */
function uib_area_node_delete($node) {
  if ($node->type == 'area') {
    global $user;
    // remove uib area aliases
    uib_area__remove_area_aliases($node->nid);
    // remove the menu for this area
    if (uib_area_menu_is_allowed($node)) {
      $menu_machine_name = 'menu-area-' . $node->nid;
      if ($menu = menu_load($menu_machine_name)) {
        menu_delete($menu);
      }
    }
    // remove content owned by the area
    uib_area__cleanup($node);
    uibx_log("node/$node->nid [$node->type] deleted by user $user->uid", 'notice');
  }
}

/**
 * Control if the current node page is an employee page.
 */
function uib_area__is_employee_page() {
  $node = uib_area__get_current();
  if (isset($node->field_uib_sebra_id['und'][0]['value'])) {
    if ($node->field_uib_sebra_id['und'][0]['value'] == 519) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Is the given user a content manager for the given area.
 *
 * @return [type] [description]
 */
function uib_area__is_content_manager($area, $user) {
  if (isset($area->field_uib_content_manager['und'])) {
    foreach ($area->field_uib_content_manager['und'] as $cm) {
      if ($user->uid == $cm['target_id'])
        return TRUE;
    }
  }
  return FALSE;
}

/**
 * List the areas (node ids) a user is content manager for.
 *
 * @param StdObject $user
 *  The user object
 * @return array
 *  A list of node ids that the user is content manager for.
 */
function uib_area__may_manage_these_areas($user) {
  $areas = array();
  $query = new EntityFieldQuery;
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'area')
    ->fieldCondition('field_uib_content_manager', 'target_id', $user->uid)
    ->execute();
  if ($result) {
    $areas = array_keys($result['node']);
  }
  return $areas;
}

/**
 * Implements hook_node_access().
 *
 * Control access to edit an area.
 */
function uib_area_node_access($node, $op, $user) {
  if ($op == 'view') {
    return NODE_ACCESS_IGNORE;
  }
  // $op is one of 'create', 'update', 'delete'
  if (is_object($node) && $node->type == 'area') {
    if (!uib_area__is_content_manager($node, $user)) {
      return NODE_ACCESS_DENY;
    }
  }
  if (is_object($node) && $node->type == 'uib_article') {
    if (!uib_area__is_content_manager(node_load($node->field_uib_area['und'][0]['target_id']), $user)) {
      return NODE_ACCESS_DENY;
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * If the 'edit' tab of a node is missing (because of missing node_access) then
 * also hide the 'revisions' and 'translate' tabs
 */
function uib_area_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if (!path_is_admin(current_path())) {
    if (empty($data['tabs']) || $data['tabs'][0]['output'][0]['#link']['path'] != 'node/%/view') {
      return;
    }

    $tabs = array();
    foreach ($data['tabs'][0]['output'] as $tab) {
      $path = $tab['#link']['path'];
      if ($path == 'node/%/edit') {
        // if we find the edit tab, do nothing
        return;
      }
      if ($path == 'node/%/revisions' || $path == 'node/%/translate') {
        // tabs to ignore
        continue;
      }
      $tabs[] = $tab;
    }

    // replace the tabs
    $data['tabs'][0]['count'] = count($tabs);
    $data['tabs'][0]['output'] = $tabs;
  }
}

/**
 * Assemble the current area menu for display on a page
 *
 * Implements hook_block_list_alter().
 * @param  [type] $blocks
 */
function uib_area_block_list_alter(&$blocks) {
  $current_area_menu_name = uib_area__get_current_menu();
  if ($current_area_menu_name) {
    $area_menu = block_load('menu', $current_area_menu_name);
    $area_menu->region = 'navigation';
    $area_menu->visibility = 1;
    $blocks[] = $area_menu;
  }
}

/**
 * Generate a menu.
 * @param string $menu_name
 *  The menu we want to retrieve.
 *
 * @param int $active_mlid
 *  The id of the active menu link.
 *
 * @return string
 *  HTML representing the chosen menu.
 */
function uib_area__get_menu($menu_name, $active_mlid = FALSE) {
  $tree = menu_tree_all_data($menu_name, NULL, 2);
  $menu = array();
  uib_area__generate_menu_rec($menu, $tree, $active_mlid);
  $options = array();
  uib_area__menu_get_options($menu, '', $options);
  return $options;
}

/**
 * Fetch menu options (recursive)
 */
function uib_area__menu_get_options($menu, $indent, &$options) {
  foreach ($menu as $mlid => $item) {
    $options[$mlid] = $indent . $item['title'];
    if (!empty($item['below'])) {
      uib_area__menu_get_options($item['below'], $indent . '-- ', $options);
    }
  }
}

/**
 * Generate a menu array
 * [modified from menuux module]
 * This function is recursive
 *
 * @param array $menu
 *  The menu that is to be generated
 * @param array $raw_menu
 *  The menu as returned from menu_tree_all_data
 * @param int $active_mlid
 *  The id of the active link
 * @return boolean
 *  Was the mlid of the active item found in the menu?
 */
function uib_area__generate_menu_rec(&$menu, $raw_menu, $active_mlid = FALSE) {
  $has_active = FALSE;
  foreach ($raw_menu as $data) {
    if ($data['link']['hidden'] >= 0) {
      $title = truncate_utf8($data['link']['title'], 94, TRUE, FALSE);
      if ($data['link']['hidden']) {
        $title .= ' ('. t('disabled') .')';
      }
      $mlid = $data['link']['mlid'];
      $menu[$mlid]['title'] = $title;
      if ($mlid == $active_mlid) {
        $menu[$mlid]['active'] = TRUE;
        $has_active = TRUE;
      }
      $menu[$mlid]['expanded'] = FALSE;
      if ($data['below']) {
        $below = array();
        $active_child = uib_area__generate_menu_rec($below, $data['below'], $active_mlid);
        $has_active = $has_active || $active_child;
        if (!empty($below)) {
          $menu[$mlid]['below'] = $below;
        }
        if ($active_child) {
          $menu[$mlid]['expanded'] = TRUE;
        }
      }
    }
  }
  return $has_active;
}

/**
 * Checks if an area node is expected to have an area menu
 *
 * Returns TRUE if it is, FALSE if not
 *
 * @param ref $node
 * A fully populated area node object (reference)
 */
function uib_area_menu_is_allowed($node) {
  if (!empty($node) && $node->type == 'area') {
    $allowed = array(
      'faculty',
      'institute',
      'research group',
      'research school',
      'section',
      'unit',
      'frontpage',
      'focus area',
      'discipline',
    );
    if (!empty($node->field_uib_area_type['und'][0]['value']) && in_array($node->field_uib_area_type['und'][0]['value'], $allowed)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_permission.
 */
function uib_area_permission() {
  $perms = array('administer uib area menus' =>
    array('title' => t('Administer uib area menus')),
    );
  return $perms;
}

/**
 * Implements hook_menu_alter.
 */
function uib_area_menu_alter(&$items) {
  // Modified from "menu admin per menu" module
  $items['admin/structure/menu']['page callback'] = 'uib_area__menu_overview_page';
  $items['admin/structure/menu']['access callback'] = 'uib_area__menupage_access';
  unset($items['admin/structure/menu']['access arguments']);
  $items['admin/structure/menu/manage/%menu']['access callback'] = 'uib_area__menu_access';
  $items['admin/structure/menu/manage/%menu']['access arguments'] = array(4);
  $items['admin/structure/menu/manage/%menu/add']['access callback'] = 'uib_area__menu_access';
  $items['admin/structure/menu/manage/%menu/add']['access arguments'] = array(4);
  $items['admin/structure/menu/item/%menu_link/edit']['access callback'] = 'uib_area__menulink_access';
  $items['admin/structure/menu/item/%menu_link/edit']['access arguments'] = array(4);
  $items['admin/structure/menu/item/%menu_link/reset']['access callback'] = 'uib_area__menulink_access';
  $items['admin/structure/menu/item/%menu_link/reset']['access arguments'] = array(4);
  $items['admin/structure/menu/item/%menu_link/delete']['access callback'] = 'uib_area__menulink_access';
  $items['admin/structure/menu/item/%menu_link/delete']['access arguments'] = array(4);
}

/**
 * Callback to check access to menu administration page.
 */
function uib_area__menupage_access() {
  if (user_access('administer menu')) {
    return TRUE;
  }
  if (user_access('administer uib area menus')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Callback to check access to relevant area menus.
 */
function uib_area__menu_access($menu = NULL) {
  global $user;
  if (user_access('administer menu')) {
    return TRUE;
  }
  $managing_areas = uib_area__may_manage_these_areas($user);
  foreach ($managing_areas as $area_nid) {
    if ($menu['menu_name'] == 'menu-area-' . $area_nid) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Callback to check access to relevant area menu links.
 */
function uib_area__menulink_access($menu_link = NULL) {
  global $user;
  if (user_access('administer menu')) {
    return TRUE;
  }
  $managing_areas = uib_area__may_manage_these_areas($user);
  foreach ($managing_areas as $area_nid) {
    if ($menu_link['menu_name'] == 'menu-area-' . $area_nid) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Creates a menu overview page,
 * showing only those menus that the user has access to
 * The user need to have the 'administer uib area menus' permission set
 * and needs to be content manager for the area.
 *
 * @return [type] [description]
 */
function uib_area__menu_overview_page() {
  // Modified from "menu admin per menu" module
  if (user_access('administer menu')) {
    return menu_overview_page();
  }

  $result = db_query("SELECT * FROM {menu_custom} ORDER BY title", array(), array('fetch' => PDO::FETCH_ASSOC));
  $header = array(t('Title'), array('data' => t('Operations'), 'colspan' => '2'));
  $rows = array();
  foreach ($result as $menu) {
    if (uib_area__menu_access($menu)) {
      $row = array(theme('menu_admin_overview', array('title' => $menu['title'], 'name' => $menu['menu_name'], 'description' => $menu['description'])));
      $row[] = array('data' => l(t('list links'), 'admin/structure/menu/manage/' . $menu['menu_name']));
      $row[] = array('data' => l(t('add link'), 'admin/structure/menu/manage/' . $menu['menu_name'] . '/add'));
      $rows[] = $row;
    }
  }
  return theme('table', array('header' => $header, 'rows' => $rows));
}

/**
 * Implements hook_field_group_build_pre_render_alter().
 * Add non field elements to field group.
 */
function uib_area_field_group_build_pre_render_alter(&$element) {
  if ($element['#entity_type'] == 'node' && $element['#bundle'] == 'area') {
    if ($element['group_two_column']['group_column_first']) {
      $nid = $element['#node']->nid;
      $tmp_block_html = views_embed_view('faculty_departments_kids', 'block', $nid);
      if (stripos($tmp_block_html, 'view-content') !== FALSE) {
        if (uib_area__has_bg_box('views-faculty-department-kids')) {
          $ptr = mb_strpos($tmp_block_html, '>') + 1;
          $tmp_block_html = drupal_substr($tmp_block_html, 0, $ptr) . '<div class="opaque-box">' . drupal_substr($tmp_block_html, $ptr) . '</div>';
        }
        $element['group_two_column']['group_column_first']['field_uib_kids']['#markup'] = $tmp_block_html;
        $element['group_two_column']['group_column_first']['field_uib_kids']['#weight'] = 6;
      }
    }
    if ($element['group_two_column']) {
      $column_first_empty = TRUE;
      if ($element['group_two_column']['group_column_first']) {
        foreach ($element['group_two_column']['group_column_first'] as $key => $value) {
          if (substr($key, 0, 1) != '#') {
            if (!empty($value)) {
              $column_first_empty = FALSE;
              break;
            }
          }
        }
      }
      $column_second_empty = TRUE;
      if ($element['group_two_column']['group_column_second']) {
        foreach ($element['group_two_column']['group_column_second'] as $key => $value) {
          if (substr($key, 0, 1) != '#') {
            if (!empty($value)) {
              $column_second_empty = FALSE;
              break;
            }
          }
        }
      }
      if ($column_first_empty || $column_second_empty) {
        $element['group_two_column']['#prefix'] .= '<div class="full-width">';
        $element['group_two_column']['#suffix'] .= '</div>';
      }
    }
  }
}

/**
 * Determine if a field (etc) should have background box on area pages
 */
function uib_area__has_bg_box($field_name) {
  $boxed = array(
    'field_uib_secondary_text',
    'field_uib_link_section',
    'field_uib_profiled_testimonial',
    'views-faculty-department-kids',
  );
  if (!empty($field_name) && in_array($field_name, $boxed)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Overrides theme_field on area pages
 * [uib_zen_field__area description]
 * @param  [type] $variables
 * @return [type]
 */
function uib_zen_field__area($variables) {
  $output = '';

  if (!$variables['label_hidden']) {
    $output .= '<div class="field-label"' . $variables['title_attributes'] . '>' . $variables['label'] . ':&nbsp;</div>';
  }

  // Render the items.
  $output .= '<div class="field-items"' . $variables['content_attributes'] . '>';
  foreach ($variables['items'] as $delta => $item) {
    $classes = 'field-item ' . ($delta % 2 ? 'odd' : 'even');
    $output .= '<div class="' . $classes . '"' . $variables['item_attributes'][$delta] . '>' . drupal_render($item) . '</div>';
  }
  $output .= '</div>';

  $prefix = '<div class="' . $variables['classes'] . '"' . $variables['attributes'] . '>';
  if (!empty($variables['element']['#field_name']) && uib_area__has_bg_box($variables['element']['#field_name'])) {
    if (!empty($variables['element']['#object']->$variables['element']['#field_name'])) {
      $output = $prefix . '<div class="opaque-box">' . $output . '</div></div>';
    }
  }
  else {
    $output = $prefix . $output . '</div>';
  }

  return $output;
}

/**
 * Return some area information for an area stub before it is migrated
 * @param  string $stubtitle the stub title "Area stub for w2-id"
 * @return array of two strings: area title and its url.
 */
function uib_area__get_stub_info($stubtitle) {
  if (!module_exists('uib_migrate')) {
    return FALSE;
  }
  $tmp = explode(' ', $stubtitle);
  $w2_id = trim($tmp[3]);
  if (!is_numeric($w2_id)) {
    return FALSE;
  }
  try {
    $w2 = new XTopic($w2_id, FALSE, 'stub lookup');
    if ($w2) {
      $url = 'http://www.uib.no/' . $w2->path;
      if ($w2->site_lang == 'en') {
        $url .= '/en';
      }
      return array(
        'title' => $w2->title,
        'url' => $url,
        );
    }
  }
  catch (Exception $e) {
    return FALSE;
  }
}

/**
 * Implements hook_query_alter().
 */
function uib_area_query_uib_study_order_by_title_alter(QueryAlterableInterface $query) {
  $order_by =& $query->getOrderBy();
  if (isset($order_by['field_data_field_uib_study_title_field_uib_study_title_value'])) {
    $query->addExpression('lower(field_data_field_uib_study_title.field_uib_study_title_value)', 'lower_title');

    // replace orderBy entry with the lower case version
    $copy = $order_by;
    $order_by = array();
    foreach ($copy as $key => $value) {
      $order_by[
        $key == 'field_data_field_uib_study_title_field_uib_study_title_value' ?
        'lower_title' : $key
       ] = $value;
    }
    //dpm((string)$query);
  }
}

/**
 * Implements hook_menu().
 */
function uib_area_menu() {
  $items['node/%node/ties'] = array(
    'title' => 'Ties',
    'page callback' => 'uib_area__ties',
    'page arguments' => array(1),
    'access callback' => 'uib_area__ties_access_check',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Check access to the ties local task
 */
function uib_area__ties_access_check() {
  $node = node_load(arg(1));
  if ($node && $node->type == 'area') {
    if (user_access('delete any area content')) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Setup contents of the ties local task tab
 */
function uib_area__ties($node) {
  $ties = array();
  // Node info
  $ties['area_node'] = uib_area__ties_node($node);
  // Menu info
  $ties['menu'] = uib_area__ties_menu($node->nid);
  // Menu links
  $ties['menu_links'] = uib_area__ties_menu_links($node->nid);
  // Aliases
  $ties['aliases'] = uib_area__ties_aliases($node->nid);
  // Redirects
  $ties['redirects'] = uib_area__ties_redirects($node->nid);
  // Children
  $ties['children'] = uib_area__ties_children($node->nid);
  // Connected content
  $ties['connected'] = uib_area__ties_content($node->nid);
  return $ties;
}

/**
 * Format the node section of the ties tab
 */
function uib_area__ties_node($area_node) {
  if (empty($area_node) || $area_node->type != 'area') {
    return array();
  }
  $published = ($area_node->status) ? t('published') : t('unpublished');
  return array(
    '#prefix' => '<div id="node-info">',
    '#suffix' => '</div>',
    'title' => array(
      '#type' => 'html_tag',
      '#tag' => 'h1',
      '#value' => $area_node->title,
      ),
    'text' => array(
      '#markup' => '<p>' . drupal_ucfirst($area_node->type) . ' ' . t('node') . ' ' . $area_node->nid . '<br>' .
      t('status') . ': ' . $published . '<br>' .
      t('language') . ': ' . $area_node->language . '</p>',
      ),
    );
}

/**
 * Build the menu section of the ties tab
 */
function uib_area__ties_menu($area_nid) {
  // Menu and menu links
  $area_path = 'node/' . $area_nid;
  $menu_connection = array(
  '#prefix' => '<div id="connected-menu">',
  '#suffix' => '</div>',
  'title' => array(
    '#type' => 'html_tag',
    '#tag' => 'h2',
    '#value' => t('Menu'),
    ),
  );
  if ($area_menu = menu_load('menu-area-' . $area_nid)) {
    $menu_connection['menu'] = array(
      '#markup' => '<p><span class="menu-title">' . $area_menu['title'] . '</span><br>' . t('machine name') . ': ' . $area_menu['menu_name'] . '</p>',
      );
  }
  else {
    $menu_connection['menu'] = array(
      '#markup' => '<p>' . t('No menu') . '</p>',
      );
  }
  return $menu_connection;
}

/**
 * Build the menu links section of the ties tab
 */
function uib_area__ties_menu_links($area_nid) {
  $area_path = 'node/' . $area_nid;
  $menu_links = array(
    '#prefix' => '<div id="menu-links">',
    '#suffix' => '</div>',
    'title' => array(
      '#type' => 'html_tag',
      '#tag' => 'h2',
      '#value' => t('Menu links'),
      ),
    );
  $result = db_query('SELECT mlid, link_path, menu_name, link_title, hidden FROM {menu_links} WHERE link_path LIKE :lpt',
    array(':lpt' => $area_path . '%')
    );
  if ($result) {
    $lnk_table = array(
      '#theme' => 'table',
      '#header' => array(t('link id'), t('menu name'), t('path'), t('link title'), t('hidden')),
      );
    $rows = array();
    foreach ($result as $lnk) {
      if ($lnk->menu_name != 'area') {
        $tmp = array($lnk->mlid, $lnk->menu_name, l($lnk->link_path, $lnk->link_path), truncate_utf8($lnk->link_title, 80, TRUE, TRUE));
        $tmp[] = ($lnk->hidden) ? t('yes') : t('no');
        $rows[] = $tmp;
      }
    }
    if (!empty($rows)) {
      $lnk_table['#rows'] = $rows;
      $menu_links['links'] = $lnk_table;
    }
  }
  if (empty($menu_links['links'])) {
    $menu_links['links'] = array(
      '#markup' => '<p>' . t('No menu links point to this node') . '</p>',
      );
  }
  return $menu_links;
}

/**
 * Build the aliases section of the ties tab
 */
function uib_area__ties_aliases($area_nid) {
  // Aliases
  $area_path = 'node/' . $area_nid;
  $aliases = array(
    '#prefix' => '<div id="aliases">',
    '#suffix' => '</div>',
    'title' => array(
      '#type' => 'html_tag',
      '#tag' => 'h2',
      '#value' => t('Aliases'),
      ),
    );
  $result = db_query('SELECT source, alias, language FROM {url_alias} WHERE source LIKE :lpt',
    array(':lpt' => $area_path . '%')
    );
  if ($result) {
    $alias_table = array(
      '#theme' => 'table',
      '#header' => array(t('alias'), t('source'), t('language')),
      );
    $rows = array();
    foreach ($result as $alias) {
      $rows[] = array($alias->alias, l($alias->source, $alias->source), $alias->language);
    }
    if (!empty($rows)) {
      $alias_table['#rows'] = $rows;
      $aliases['aliases'] = $alias_table;
    }
  }
  if (empty($aliases['aliases'])) {
    $aliases['aliases'] = array(
      '#markup' => '<p>' . t('No aliases') . '</p>',
      );
  }
  return $aliases;
}

/**
 * Build the redirects section of the ties tab
 */
function uib_area__ties_redirects($area_nid) {
  // Redirects
  $area_path = 'node/' . $area_nid;
  $redirects = array(
    '#prefix' => '<div id="redirects">',
    '#suffix' => '</div>',
    'title' => array(
      '#type' => 'html_tag',
      '#tag' => 'h2',
      '#value' => t('Redirects'),
      ),
    );
  $area_alias = path_load($area_path);
  $query = 'SELECT source, count FROM {redirect} WHERE redirect = :lpt';
  $data = array(':lpt' => $area_path);
  if (!empty($area_alias['alias'])) {
    $query .= ' OR redirect = :als OR redirect = :lal';
    $data[':als'] = $area_alias['alias'];
    $data[':lal'] = $area_alias['language'] . '/' . $area_alias['alias'];
  }
  $result = db_query($query, $data);
  if ($result) {
    $redirects_table = array(
      '#theme' => 'table',
      '#header' => array(t('source'), t('count')),
      );
    $rows = array();
    foreach ($result as $redirect) {
      $rows[] = array(l($redirect->source, $redirect->source), $redirect->count);
    }
    if (!empty($rows)) {
      $redirects_table['#rows'] = $rows;
      $redirects['redirects'] = $redirects_table;
    }
  }
  if (empty($redirects['redirects'])) {
    $redirects['redirects'] = array(
      '#markup' => '<p>' . t('No redirects') . '</p>',
      );
  }
  return $redirects;
}

/**
 * Build the node children section of the ties tab
 */
function uib_area__ties_children($area_nid) {
  // Is parent of
  $children = array(
    '#prefix' => '<div id="children">',
    '#suffix' => '</div>',
    'title' => array(
      '#type' => 'html_tag',
      '#tag' => 'h2',
      '#value' => t('Area children'),
      ),
    'text' => array(
      '#markup' => '<p>' . t('Areas of which this area is a parent') . '</p>',
      ),
    );
  $query = new EntityFieldQuery;
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->fieldCondition('field_uib_area_parents', 'target_id', $area_nid)
    ->execute();
  if ($result) {
    $children_table = array(
      '#theme' => 'table',
      '#header' => array(t('path')),
      );
    $rows = array();
    foreach ($result['node'] as $child) {
      $child_path = 'node/' . $child->nid;
      $child_path_alias = path_load($child_path);
      $rows[] = array(l($child_path, $child_path), $child_path_alias['alias']);
    }
    if (!empty($rows)) {
      $children_table['#rows'] = $rows;
      $children['children'] = $children_table;
    }
  }
  if (empty($children['children'])) {
    $children['children'] = array(
      '#markup' => '<p>' . t('No children') . '</p>',
      );
  }
  return $children;
}

/**
 * Build the connected content section of the ties tab
 */
function uib_area__ties_content($area_nid) {
  // Connected content
  $connected_content = array(
    '#prefix' => '<div id="connected-articles">',
    '#suffix' => '</div>',
    'title' => array(
      '#type' => 'html_tag',
      '#tag' => 'h2',
      '#value' => t('Connected content nodes'),
      ),
  );
  $query = new EntityFieldQuery;
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->fieldCondition('field_uib_area', 'target_id', $area_nid)
    ->execute();
  if ($result) {
    $connect_tbl = array();
    $connect_tbl['#theme'] = 'table';
    $connect_tbl['#header'] = array(t('node'), t('title'), t('type'), t('article type'), t('owned'), t('shared'), t('related from'));
    $rows = array();
    $related_nodes = entity_load('node', array_keys($result['node']));
    foreach ($related_nodes as $rnid => $rnode) {
      $related = entity_metadata_wrapper('node', $rnode);
      $tmp = array(l($related->getIdentifier(), 'node/' . $related->getIdentifier()),
        truncate_utf8($related->title->value(), 70, TRUE, TRUE),
        $related->type->value(),
        );
      $tmp[] = ($related->type->value() == 'uib_article') ? $related->field_uib_article_type->value() : '';
      $tmp[] = ($related->field_uib_area[0]->raw() == $area_nid) ? t('yes') : t('no');
      $tmp[] = (count($rnode->field_uib_area['und']) > 1) ? t('yes') : t('no');
      // Check if this is related content
      $result = db_select('field_data_field_uib_relation', 'r')
        ->fields('r', array('entity_id'))
        ->condition('field_uib_relation_target_id', $rnid, '=')
        ->execute()
        ->fetchAssoc();
      if ($result) {
        $rel = '';
        foreach ($result as $entity_id) {
          $rel .= l($entity_id, "node/$entity_id") . ' ';
        }
        $tmp[] = $rel;
      }
      else {
        $tmp[] = '';
      }
      $rows[] = $tmp;
    }
    $connect_tbl['#rows'] = $rows;
    $connected_content['connected'] = $connect_tbl;
  }
  else {
    $connected_content['text'] = array('#markup' => '<p>' . t('No content') . '</p>');
  }
  return $connected_content;
}

/**
 * Cleanup when an area is to be deleted.
 *
 * @param StdObject $area_node
 *   Node object of the area node
 */
function uib_area__cleanup($area_node) {
  if (empty($area_node)) {
    return FALSE;
  }
  global $user;
  $area = $area_node->nid;
  $area_path = 'node/' . $area;

  // Remove any menu links pointing to the area node
  $result = db_query('SELECT mlid FROM {menu_links} WHERE link_path LIKE :lpt',
    array(':lpt' => $area_path . '%')
    );
  if ($result) {
    foreach ($result as $record) {
      menu_link_delete($record->mlid);
    }
  }

  // Remove any aliases pointing to the node
  $area_alias = path_load($area_path);
  path_delete(array('source' => $area_path,));

  // Remove any redirects pointing to the node
  redirect_delete_by_path($area_path);
  if (!empty($area_alias['alias'])) {
    redirect_delete_by_path($area_alias['alias']);
    redirect_delete_by_path($area_alias['language'] . '/' . $area_alias['alias']);
  }

  // Connected content
  $query = new EntityFieldQuery;
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->fieldCondition('field_uib_area', 'target_id', $area)
    ->execute();
  if ($result) {
    $related_nodes = entity_load('node', array_keys($result['node']));
    foreach ($related_nodes as $rnid => $rnode) {
      if ($rnode->field_uib_area['und'][0]['target_id'] == $area) {

        // Remove articles etc owned by the area
        uibx_log("node/$rnode->nid [$rnode->type] deleted by user $user->uid", 'notice');
        node_delete($rnid);

        // Remove related content indications pointing to the deleted article
        $query = new EntityFieldQuery;
        $result = $query
          ->entityCondition('entity_type', 'node')
          ->fieldCondition('field_uib_relation', 'target_id', $rnid)
          ->execute();
        if ($result) {
          $rc_nodes = entity_load('node', array_keys($result['node']));
          foreach ($rc_nodes as $rc_node) {
            $rc_last = count($rc_node->field_uib_relation['und']) - 1;
            for ($i = $rc_last; $i >= 0; $i--) {
              if ($rc_node->field_uib_relation['und'][$i]['target_id'] == $rnid) {
                unset($rc_node->field_uib_relation['und'][$i]);
              }
            }
            node_save($rc_node);
          }
        }
      }
      else {
        // Remove the area from articles not owned by the area ("bobbling")
        $area_last = count($rnode->field_uib_area['und']) - 1;
        for ($i = $area_last; $i >= 0; $i--) {
          if ($rnode->field_uib_area['und'][$i]['target_id'] == $area) {
            unset($rnode->field_uib_area['und'][$i]);
          }
        }
        node_save($rnode);
      }
    }
  }

  // Connect any area children to their grand-parent, if possible
  $grand_parent_nid = FALSE;
  if (!empty($area_node->field_uib_area_parents['und'][0]['target_id'])) {
    $grand_parent_nid = $area_node->field_uib_area_parents['und'][0]['target_id'];
  }
  $query = new EntityFieldQuery;
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->fieldCondition('field_uib_area_parents', 'target_id', $area)
    ->execute();
  if ($result) {
    $children = entity_load('node', array_keys($result['node']));
   foreach ($children as $child) {
      $grand_parent_present = FALSE;
      $area_last = count($child->field_uib_area_parents['und']) - 1;
      for ($i = $area_last; $i >= 0; $i--) {
        if ($child->field_uib_area_parents['und'][$i]['target_id'] == $grand_parent_nid) {
          $grand_parent_present = TRUE;
        }
        if ($child->field_uib_area_parents['und'][$i]['target_id'] == $area) {
          unset($child->field_uib_area_parents['und'][$i]);
        }
      }
      if (!$grand_parent_present && $grand_parent_nid) {
        $child->field_uib_area_parents['und'][] = $grand_parent_nid;
      }
      node_save($child);
    }
  }
}
