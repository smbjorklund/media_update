<?php
/**
 * @file
 * Code for the UiB Feature Area feature.
 */

include_once 'uib_area.features.inc';

/**
 * Implements hook_menu_block_blocks
 */

function uib_area_menu_block_blocks() {
  return array(
    'top-area-menu' => array(
      'menu_name'   => 'area',
      'title_link'  => FALSE,
      'admin_title' => 'Top level area menu',
      'depth'       => 2,
      'expanded'    => 1,
      'parent_mlid' => uib_area__get_menustart(),
    ),
    'page-area-menu' => array(
      'menu_name'   => 'area',
      'title_link'  => FALSE,
      'admin_title' => 'Page level area menu',
      'follow'      => 1,
      'level'       => 4,
      'depth'       => 1,
      'expanded'    => 1,
    ),
  );
}

/**
 * Implements hook_block_info().
 */

function uib_area_block_info() {
  return array(
    'colophon' => array(
      'info' => t('Colophon'),
      'status' => TRUE,
    ),
    'jobbnorge' => array(
      'info' => t('Jobbnorge'),
      'status' => TRUE,
    ),
    'feed' => array(
      'info' => t('Feed'),
      'status' => TRUE,
    ),
    'area_parents' => array(
      'info' => t('Area parents'),
      'status' => TRUE,
    ),
      'node_children' => array(
      'info' => t('Node children teasers'),
      'status' => TRUE,
    ),

  );
}


/**
 * Implements hook_block_view().
 */

function uib_area_block_view($delta='') {
  $block = array();
  switch ($delta) {
    case 'colophon':
      $block['subject'] = NULL;
      $block['content'] = array(
        'name' => array(
          '#type' => 'html_tag',
          '#tag' => 'h3',
          '#value' => t('University of Bergen'),
        ),
        'address' => array(
          '#theme' => 'key_value',
          '#key' => t('Address'),
          '#value' => 'Postboks 7800, 5020 BERGEN',
        ),
        'phone' => array(
          '#theme' => 'key_value',
          '#key' => t('Phone'),
          '#value' => '+47 55 58 00 00',
        ),
        'fax' => array(
          '#theme' => 'key_value',
          '#key' => t('Fax'),
        ),
        'emergency' => array(
          '#theme' => 'key_value',
          '#key' => t('24-hour security hotline'),
          '#value' => '+47 55 58 80 81',
        ),
        'responsible_this_page' => array(
          '#theme' => 'key_value',
          '#key' => t('Responsible for this page'),
        ),
        'contact' => array(
          '#theme' => 'key_value',
          '#key' => t('Contact'),
          '#value' => 'post@uib.no',
        ),
        'responsible' => array(
          '#theme' => 'key_value',
          '#key' => t('Responsible'),
          '#value' => t('Director of Communications'),
        ),
      );
      $area = uib_area__get_current();
      if ($area && isset($area->field_uib_ou['und'])) {
        $place = node_load($area->field_uib_ou['und'][0]['target_id']);
        $block['content']['name']['#value'] .= ' | ' . check_plain($area->title);
        $block['content']['responsible_this_page']['#value'] = $place->title;
        if (isset($place->field_uib_phone)) {
          $block['content']['phone']['#value'] =
            $place->field_uib_phone['und'][0]['value'];
        }
        if (isset($place->field_uib_fax)) {
          $block['content']['fax']['#value'] =
            $place->field_uib_fax['und'][0]['value'];
        }
        if (isset($place->field_uib_mail_domain)) {
          $block['content']['contact']['#value'] =
            'post@' . $place->field_uib_mail_domain['und'][0]['safe_value'];
        }
      }
      hide($block['content']['emergency']);
      break;
    case 'jobbnorge':
      $area = uib_area__get_current();
      $whitelist = array('faculty', 'unit', 'institute');
      if ($area && in_array($area->field_uib_area_type['und'][0]['value'], $whitelist)) {
        $place = node_load($area->field_uib_ou['und'][0]['target_id']);
        if (empty($place->field_uib_jobbnorge_id['und']))
         continue;
        else
         $feed = 'http://www.jobbnorge.no/joblist/joblistbuilder.ashx?id=821a69c9-7674-4e36-90f8-41e443b99064&depid=' . $place->field_uib_jobbnorge_id['und'][0]['value'];
        if ($area->language == 'en')
          $feed .= '&langid=2';
        $block['subject'] = t('Open Positions');
        $block['content'] = uib_area__feed_format($feed, $title='', $limit = 999);
        }
      break;
    case 'feed':
      $area = uib_area__get_current();
      if($area){
        $elements = array();
        if(!empty($area->field_uib_feed['und'])){
          foreach ($area->field_uib_feed['und'] as $delta => $item) {
            $url = url($item['url'], $item);
            if (strpos($url, '#')) {
              $limit = explode('#', $url);
            }
            $limit = (isset($limit[1]) && is_numeric($limit[1])) ? $limit[1] : 5;
            $elements[$delta] = uib_area__feed_format($url, $item['title'], $limit);
          }
        }
      $block['content'] = $elements;
      }
      break;
    case 'area_parents': // A block to display a linked list to parents of current area [if any]
      $block['subject'] = t('Belongs to');
      $area = uib_area__get_current();
      if (!empty($area->field_uib_area_parents['und'])) {
        // Setup an SQL query to get parent titles from node ids listed
        $nlist = array();
        $query = 'SELECT nid, title FROM {node} WHERE ';
        $glue = "";
        for ($i=0; $i < count($area->field_uib_area_parents['und']); $i++) {
          $nlist[":nid$i"] = $area->field_uib_area_parents['und'][$i]['target_id'];
          $query .= $glue . " nid = :nid$i";
          $glue = " OR";
        }
        $result = db_query($query, $nlist);
        // Setup each parental area node title on a separate line with link
        foreach ($result as $record) {
          $title = t($record->title);
          $block['content'][$title]['#markup'] = l($title, 'node/' . $record->nid) . '<br>';
        }
      }
      break;
    case 'node_children': // A block to display a list of teasers of children [nodes only] to current node
      $block['subject'] = "";
      $menu_link = menu_link_get_preferred(uib_area__get_current_node(), 'area'); // get menu link of the current node
      if (empty($menu_link)) {
        $menu_link = uib_area__get_current_menu_link(); // get menu link of current area
      }
      //dsm($menu_link);
      $items = menu_navigation_links('area', $menu_link['depth']);
      if (!empty($items)) {
        foreach ($items as $menu_item) {
          $node_title = $menu_item['title'];
          $teaser_text = '';
          $tmp = explode('/',$menu_item['href']);
          $entity_type = trim($tmp[0]);
          if ($entity_type == 'node') {
            $node_id = intval($tmp[1]); // cast to integer, just to be sure
            $query = 'SELECT type FROM {node} WHERE nid = :nid'; // get node type
            $result = db_query($query, array(':nid' => $node_id));
            foreach ($result as $record) {
              $node_type = $record->type;
            }
            // get teaser text
            if ($node_type == 'area') {
              $result = db_select('field_data_field_uib_primary_text', 'f')
                ->fields('f', array('field_uib_primary_text_value'))
                ->condition('entity_type', $entity_type)
                ->condition('bundle', 'uib_area')
                ->condition('entity_id', $node_id)
                ->execute()
                ->fetchCol();
                if (!empty($result[0])) {
                  $teaser_text = $result[0];
                }
              }
            else { // article (uib_article) or testimonial
              $result = db_select('field_data_field_uib_lead', 'f')
                ->fields('f', array('field_uib_lead_value'))
                ->condition('entity_type', $entity_type)
                ->condition('bundle', 'uib_article')
                ->condition('entity_id', $node_id)
                ->execute()
                ->fetchCol();
                if (!empty($result[0])) {
                  $teaser_text = $result[0];
                }
            }
             $children_classes_array = array('uib-child-teaser');
            // Check if the node has children
            $child_menu_link = menu_link_get_preferred($menu_item['href'], 'area');
            if (! empty($child_menu_link)) {
              if ($child_menu_link['has_children']) {
                $children_classes_array[] = 'uib-child-has-children';
              }
            }
            $node_title = t($node_title);
            $children_classes = implode(' ', $children_classes_array);
            $block['content'][$node_title]['#markup'] = "<div class=\"$children_classes\">" . l($node_title, $menu_item['href']) . '<br>';
            $block['content'][$node_title . '_text']['#markup'] = $teaser_text . '</div>';
          }
        }
      }
    break;
  }
  return $block;
}

function uib_area_change_to_h2($markup, $element) {
  $markup = preg_replace('/<h3(.*?)>(.*?)<\/h3>/','<h2\1>\2</h2>', $markup);
  return $markup;
}

function uib_area__feed_format($url, $title, $limit) {
  $items = array();
  $content = @file_get_contents($url);
    if (!$content) {
      return;
    }
    $xml = @simplexml_load_string($content);
    if ($xml === FALSE) {
      return;
    }
    if ($xml->channel->item) {
      $items = array(
      'list' => array(
        '#title' => $title,
        '#items' => array(),
        '#theme' => 'item_list',
        '#post_render' => array('uib_area_change_to_h2'),
        ),
      );
      foreach ($xml->channel->item as $entry) {
       $pubDate = $entry->pubDate;
       $pubDate = strftime("%Y-%m-%d", strtotime($pubDate));
       if(!empty($pubDate))
         $entry->title .= '('.$pubDate .')';
       $items['list']['#items'][] = l($entry->title, $entry->link);
       if (--$limit == 0)
        break;
      }
    }

  return $items;
}

/**
 * Implements hook_field_formatter_info().
 */
function uib_area_field_formatter_info() {
  return array(
    'uib_area_link_feed' => array(
      'label' => t('View as an rss feed'),
      'field types' => array('link_field'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}

/**
 * Implements hook_field_formatter_view()
 */
function uib_area_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
   foreach ($items as $delta => $item) {
    $url = url($item['url'], $item);
      if (strpos($url, '#')) {
        $limit = explode('#', $url);
      }
      $limit = (isset($limit[1]) && is_numeric($limit[1])) ? $limit[1] : 5;
    $elements[$delta] = uib_area__feed_format($url, $item['title'], $limit);

  }

  return $elements;
}

/**
 * Implements hook_theme().
 */
function uib_area_theme() {
  return array(
    'uib_area_formatter_uib_area_link_feed' => array(
      'variables' => array('element' => NULL),
    ),
  );
}

/**
 * Implements hook_node_presave
 */

function uib_area_node_presave($node) {
  // obtain full list of parent areas
  $parent_node_id_list = array();
  if (!empty($node->field_uib_area_parents['und'])) {
    foreach ($node->field_uib_area_parents['und'] as $parent) {
      uib_area__get_parentage($parent['target_id'], $parent_node_id_list);
    }
    // remove duplicate area node ids if present
    $cleaned_node_id_list = array();
    foreach ($parent_node_id_list as $pnid) {
      if (!in_array($pnid, $cleaned_node_id_list)) {
        $cleaned_node_id_list[] = $pnid;
      }
    }
    // update node with cleaned full list
    $node->field_uib_area_parents['und'] = array();
    for($i = 0; $i < count($cleaned_node_id_list); $i++) {
      $node->field_uib_area_parents['und'][$i] = array('target_id' => $cleaned_node_id_list[$i]);
    }
  }
}

/**
* Function to recursively get uib_area parent_ids
*/
function uib_area__get_parentage($parent_node_id, &$parent_ids) {
  $parent_ids[] = $parent_node_id;
  if ($parent_node = node_load($parent_node_id)) {
    if (!empty($parent_node->field_uib_area_parents['und'])) {
      foreach ($parent_node->field_uib_area_parents['und'] as $this_parent) {
        uib_area__get_parentage($this_parent['target_id'],$parent_ids);
     }
    }
  }
}

/**
* Function to obtain [and keep] reference to current uib_area
*    as indicated by node id in URL, or in the field_uib_area
*    of that node. That node is loaded if necessary.
*
* If no area reference is found, the function returns NULL.
*/
function uib_area__get_current() {
  static $current_area;
  if (!isset($current_area)) {
    // obtain area from node indicated in url
    if (arg(0) == 'node' && is_numeric(arg(1))) {
      $node = node_load(arg(1));
      if ($node->type == 'area') {
        $current_area = $node;
      }
      elseif (isset($node->field_uib_area['und'][0]['entity'])) {
        $current_area = $node->field_uib_area['und'][0]['entity'];
      }
      elseif (!empty($node->field_uib_area['und'][0]['target_id'])) {
        $current_area = node_load($node->field_uib_area['und'][0]['target_id']);
      }
      else {
        $current_area = NULL;
      }
    }
  }
  return $current_area;
}

/**
* Function to get current node address
*    as indicated by node id in URL
*
* If no node reference is found in URL, the function returns NULL.
*/
function uib_area__get_current_node() {
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    return arg(0) . '/' . arg(1);
  }
  return NULL;
}

/**
* Function to get the node type of an indicated node ('node/nid'), or
*    the current node as indicated by node id in URL
*
* If no node or node type is found, the function returns NULL.
*/
function uib_area__get_node_type($node = NULL) {
  if (empty($node)) {
    $node = uib_area__get_current_node();
  }
  if (!empty($node)) {
    $tmp = explode('/',$node);
    if (is_numeric($tmp[1])) {
      $query = 'SELECT type FROM {node} WHERE nid = :nid'; // get node type
      $result = db_query($query, array(':nid' => $tmp[1]));
      foreach ($result as $record) {
        return $record->type;
      }
    }
  }
  return NULL;
}

/**
* Function to find the OU nid referenced from an the current area
*
*
* If no area is found, the function returns NULL.
*/
function uib_area__get_ou_nid() {
  $area = uib_area__get_current();
  if(!empty($area)){
    $ounid = $area->field_uib_ou['und'][0]['target_id'];
    return $ounid;
  }
  else
    return NULL;
}

/**
* Function that returns the node id of the current uib_area
*
* If no area reference is found, the function returns NULL.
*/
function uib_area__get_current_nid() {
  $a = uib_area__get_current();
  if (!empty($a)) {
    return $a->nid;
  }
  else {
    return NULL;
  }
}

/**
* Function that returns the menu link for the current uib_area
*
* If no area reference or no menu link is found, the function returns NULL.
*/
function uib_area__get_current_menu_link() {
  $ar = uib_area__get_current();
  if (! empty($ar)) {
    if (!empty($ar->nid)) {
      $menu_link = menu_link_get_preferred('node/' . $ar->nid, 'area');
      if (!empty($menu_link)) {
        return $menu_link;
      }
    }
  }
  return NULL;
}

/**
* Function that returns the menu link item id of the current uib_area
*
* If no menu link is found, the function returns NULL.
*/
function uib_area__get_current_mlid() {
  $menu_link = uib_area__get_current_menu_link();
  if (!empty($menu_link)) {
    return $menu_link['mlid'];
  }
  return NULL;
}

/**
* Function that returns the menu link item id which is to be used
* as a starting point for the top level area menu block.
*
* The function may not return something that evaluates to FALSE,
* because this will result in a menu containing the full area menu.
* Instead, this fix will return 1 upon failure which will
* result in an empty menu.
*
*/
function uib_area__get_menustart() {
  $mlid = uib_area__get_current_mlid();
  if ($mlid > 0) {
    return $mlid;
  }
  else {
    return 1;
  }

}


/**
 * Implements hook_form_alter
 */
function uib_area_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'area_node_form') {
    // list of fields that should be hidden (in area node form) from
    // both level 3 and level 2 users
    $not_for_level_2 = array(
      'field_uib_w2_id', // ID w2
      'field_uib_sebra_id', // Sebra ID
      'field_uib_area_type', // Type
      'title', // Title
      'field_uib_area_parents', // Parents
      'field_uib_ou', // Place
      );
    // list of fields that should be hidden from
    // level 3 users
    $not_for_level_3 = array(
      'field_uib_content_manager', // Content Manager
      'field_uib_staff', // Staff
      'field_uib_show_staff', // Show staff
      'field_uib_menu_style', // Menu style
      'field_uib_logo', // Logo
      'field_uib_important_message', // Important message
      );
    if ( (in_array('level 2', $GLOBALS['user']->roles, TRUE) OR in_array('level 3', $GLOBALS['user']->roles, TRUE)) AND (!in_array('level 1', $GLOBALS['user']->roles, TRUE)) ) {
      // Hide some fields for level 2 and level 3 users
      foreach ($not_for_level_2 as $l2) {
        if (isset($form[$l2])) {
          hide($form[$l2]);
        }
      }
      if (! in_array('level 2', $GLOBALS['user']->roles, TRUE)) {
        // Hide some additional fields for level 3 users
        foreach ($not_for_level_3 as $l3) {
          if (isset($form[$l3])) {
            hide($form[$l3]);
          }
        }
      }
    }
  }
}

/**
* Function that adds a number of alias paths to an area node
*
* Adds a number of project specific aliases for area nodes (if they do not exist)
* These aliases correspond to views paths in the views "Staff", "Area map", "Recent news"
*/
function uib_area__create_area_aliases($node_nid, $node_alias, $language) {
  if (!empty($node_nid) AND !empty($node_alias)) {
    $uib_area_aliases = array(
      '/persons',
      '/persons/faculty',
      '/map',
      '/news-archive',
    );
    $node_url = 'node/' . intval($node_nid);
    foreach ($uib_area_aliases as $pa) {
      $source_url = $node_url . $pa;
      $new_alias_url = $node_alias . $pa;
      if (empty($language)) {
        $new_path = array('source' => $source_url, 'alias' => $new_alias_url); // will create alias for all languages
      }
      else {
        $new_path = array('source' => $source_url, 'alias' => $new_alias_url, 'language' => $language);
      }
      if ($existing_alias = path_load($source_url)) { // Check if alias exists
        if ($existing_alias['alias'] != $new_alias_url) {
          path_save($new_path);
        }
      }
      else {
        path_save($new_path);
      }
    }

  }
  else {
    return FALSE;
  }
}

/**
* Function that deletes a number of alias paths from an area node
*
* cf. the function uib_area__create_area_aliases() that creates them.
*/
function uib_area__remove_area_aliases($node_nid) {
  if (!empty($node_nid)) {
    $node_url = 'node/' . intval($node_nid);
    $uib_area_aliases = array(
      '/persons',
      '/persons/faculty',
      '/map',
      '/news-archive',
    );
    foreach ($uib_area_aliases as $pa) {
      $source_url = $node_url . $pa;
      if ($existing = path_load($source_url)) { // Check if alias exists
        path_delete($existing['pid']); // remove it
      }
    }
  } else {
    return FALSE;
  }
}

/**
 * Implements hook_node_insert(
 */
function uib_area_node_insert($node) {
  if ($node->type == 'area' && isset($node->path['alias'])) {
    uib_area__create_area_aliases($node->nid, $node->path['alias'], $node->language);
  }
}

/**
 * Implements hook_node_update(
 */
function uib_area_node_update($node) {
  if ($node->type == 'area' && isset($node->path['alias'])) {
    // add uib area aliases if the node path was changed
    // any previous aliases will remain
    uib_area__create_area_aliases($node->nid, $node->path['alias'], $node->language);
  }
}

/**
 * Implements hook_node_delete(
 */
function uib_area_node_delete($node) {
  if ($node->type == 'area') {
    // remove uib area aliases
    uib_area__remove_area_aliases($node->nid);
  }
}

/**
* Function to check if the current node page is an employee page
*/
function uib_area__is_employee_page() {
  $node = uib_area__get_current();
  if (isset($node->field_uib_sebra_id['und'][0]['value'])) {
    if ($node->field_uib_sebra_id['und'][0]['value'] == 519) {
      return TRUE;
    }
  }
  return FALSE;
}
