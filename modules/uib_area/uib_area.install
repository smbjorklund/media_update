<?php
/**
 * @file
 *
 */

/**
 * Implements hook_install()
 */
function uib_area_install() {
  menu_save(array(
    'menu_name' => 'area',
    'title' => 'Areas',
    'description' => 'All areas should have a top level entry in this menu.  Under the area this menu is used for the main organization of content',
  ));
}

/**
 * Implements hook_update_dependencies().
 */
function uib_area_update_dependencies() {
  $dependencies['uib_area'][7004] = array(
    'uib_setup' => 7003,
    'uib_article' => 7003,
    );
  return $dependencies;
}

/**
 * Update aliases for areas already present
 */
function uib_area_update_7000() {
  // get all area nodes
  $result = db_select('node', 'f')
    ->fields('f', array('nid', 'language'))
    ->condition('type', 'area')
    ->execute();
  foreach ($result as $row) {
    $node_path = 'node/' . $row->nid;
    $node_alias = path_load($node_path); // get existing alias from node
    if (!empty($node_alias['alias'])) {
      uib_area__create_area_aliases($row->nid, $node_alias['alias'], $row->language); // create aliases that do not already exist
    }
  }
}

/**
 * Update aliases for areas already present
 */
function uib_area_update_7001() {
  // do it once more
  uib_area_update_7000();
}

/**
* Create frontpage areas
*/
function uib_area_update_7002() {
  $languages = array(
    'nb' => 'Universitetet i Bergen',
    'en' => 'University of Bergen',
  );
  foreach ($languages as $lang => $title) {
    $node = new stdClass();
    $node->title = $title;
    $node->language = $lang;
    $node->type = 'area';
    $node->field_uib_area_type['und'][0]['value'] = 'frontpage';
    node_save($node);
    i18n_variable_set('site_frontpage', 'node/' . $node->nid, $lang);
  }
}

/**
* Create frontpage menues
*/
function uib_area_update_7003() {
  $query = new EntityFieldQuery;
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'area')
    ->fieldCondition('field_uib_area_type', 'value', 'frontpage')
    ->execute();

  $menu_template = drupal_json_decode(file_get_contents(dirname(__FILE__) . '/frontpage-menu.json'));

  foreach (node_load_multiple(array_keys($result['node'])) as $area) {
    $area->field_uib_menu_style['und'][0]['value'] = 'expanded';
    node_save($area);

    $mlink = array(
      'menu_name' => 'area',
      'link_title' => $area->title . ' (frontpage)',
      'link_path' => 'node/' . $area->nid,
      'weight' => 1,
      'expanded' => 1,
    );
    $mlid = menu_link_save($mlink);

    foreach ($menu_template[$area->language] as $index => $item) {
      uib_area__create_menu_tree('area', $item, $index, $mlid);
    }
  }
}

function uib_area__create_menu_tree($menu_name, $item, $weight, $plid = 0) {
  $base_url = 'http://www.uib.no';
  $menu_item = array(
    'link_title' => $item['title'],
    'menu_name' => $menu_name,
    'link_path' => $base_url . $item['url'],
    'weight' => $weight,
    'plid' => $plid,
    'expanded' => 1,
  );
  $mlid = menu_link_save($menu_item);
  if (isset($item['listings'])) {
    foreach ($item['listings'] as $k => $i) {
      uib_area__create_menu_tree($menu_name, $i, $k, $mlid);
    }
  }
}

/**
 * Splitting area menu (This may take some time...).
 */
function uib_area_update_7004() {
  // check and fix area menu
  drush_uib_area_menu_chk();
  // split area menu into one menu per area
  drush_uib_area_split_menu();
  // move menu items of depth > 2 into entity relations
  drush_uib_area_menu_to_relation();
}

/**
 * Remove traces of mistakenly migrated Democracy research group(s)
 */
function uib_area_update_7005() {
  // Make migrate forget that these areas were migrated before
  $areas_to_forget = array(
    'fg/demrett' => 17519,
    'rg/demlaw' => 17611,
  );
  $manually_removed_nodes = array(
    'navpage' => array(
      24792,
      ),
    'infopage' => array(
      21851,
      21961,
      22132,
      22165,
      22196,
      22276,
      22576,
      22626,
      22639,
      22686,
      23075,
      23083,
      23331,
      23391,
      23449,
      23557,
      23682,
      24017,
      24229,
      ),
  );
  foreach ($areas_to_forget as $area) {
    db_delete('migrate_map_area')
      ->condition('destid1', $area)
      ->execute();

    // Make migrate forget that nodes belonging to these areas were migrated before
    $query = new EntityFieldQuery;
    $result = $query
      ->entityCondition('entity_type', 'node')
      ->fieldCondition('field_uib_area', 'target_id', $area)
      ->execute();
    $related_nodes = entity_load('node', array_keys($result['node']));
    foreach ($related_nodes as $rnid => $rnode) {
      if ($rnode->field_uib_area['und'][0]['target_id'] == $area) {
        $migrate_table = 'migrate_map_';
        $table = FALSE;
        if ($rnode->type == 'uib_article') {
          $migrate_table .= $rnode->field_uib_article_type['und'][0]['value'];
          $table = TRUE;
        }
        elseif ($rnode->type == 'uib_testimonial') {
          $migrate_table .= 'testimonial';
          $table = TRUE;
        }
        else {
          uibx_log("Unexpected node type: $rnode->type, node $rnid", 'error');
        }
        if ($table) {
          db_delete($migrate_table)
            ->condition('destid1', $rnid)
            ->execute();
          if ($migrate_table == 'migrate_map_infopage') {
            // navpages have their own table in migrate, but are not possible
            // to distinguish from infopages in w3. Thus, try also other table.
            $migrate_table = 'migrate_map_navpage';
            db_delete($migrate_table)
              ->condition('destid1', $rnid)
              ->execute();
          }
        }
      }
    }
    foreach ($manually_removed_nodes as $node_type => $removed_nodes) {
      $migrate_table = 'migrate_map_' . $node_type;
      foreach ($removed_nodes as $rnid) {
        db_delete($migrate_table)
          ->condition('destid1', $rnid)
          ->execute();
      }
    }

    // Wipe the slate clean
    drush_uib_area_area_cleanup($area);
  }
}

/**
 * Remove incorrectly migrated area fg/rtpr.
 */
function uib_area_update_7006() {
  $areas_to_forget = array(
    'fg/rtpr' => 17615,
  );

  foreach ($areas_to_forget as $area) {
    db_delete('migrate_map_area')
      ->condition('destid1', $area)
      ->execute();

    // Make migrate forget that nodes belonging to these areas were migrated before
    $query = new EntityFieldQuery;
    $result = $query
      ->entityCondition('entity_type', 'node')
      ->fieldCondition('field_uib_area', 'target_id', $area)
      ->execute();
    $related_nodes = entity_load('node', array_keys($result['node']));
    foreach ($related_nodes as $rnid => $rnode) {
      if ($rnode->field_uib_area['und'][0]['target_id'] == $area) {
        $migrate_table = 'migrate_map_';
        $table = FALSE;
        if ($rnode->type == 'uib_article') {
          $migrate_table .= $rnode->field_uib_article_type['und'][0]['value'];
          $table = TRUE;
        }
        elseif ($rnode->type == 'uib_testimonial') {
          $migrate_table .= 'testimonial';
          $table = TRUE;
        }
        else {
          uibx_log("Unexpected node type: $rnode->type, node $rnid", 'error');
        }
        if ($table) {
          db_delete($migrate_table)
            ->condition('destid1', $rnid)
            ->execute();
          if ($migrate_table == 'migrate_map_infopage') {
            // navpages have their own table in migrate, but are not possible
            // to distinguish from infopages in w3. Thus, try also other table.
            $migrate_table = 'migrate_map_navpage';
            db_delete($migrate_table)
              ->condition('destid1', $rnid)
              ->execute();
          }
        }
      }
    }

    // Wipe the slate clean
    drush_uib_area_area_cleanup($area);
  }
}


/**
* Creating phd page for both languages
*/
function uib_area_update_7007() {
  /* English */
    $node = new stdClass();
    $node->title = 'New phds';
    $node->language = 'en';
    $node->type = 'area';
    $node->field_uib_area_type['und'][0]['value'] = 'phdpresspage';
    $node->path = array('alias' => 'new_phds', 'pathauto' => FALSE);
    node_save($node);
    // Setting node id as translate nid
    $node->tnid = $node->nid;
    node_save($node);
    /* Norwegian */
    $node_nb = new stdClass();
    $node_nb->title = 'Nye doktorgrader';
    $node_nb->language = 'nb';
    $node_nb->type = 'area';
    $node_nb->tnid = $node->nid;
    $node_nb->field_uib_area_type['und'][0]['value'] = 'phdpresspage';
    $node_nb->path = array('alias' => 'nye_doktorgrader', 'pathauto' => FALSE);
    $values = array(
      'field_name' => 'field_uib_link_section',
      'field_uib_title' => array(
        LANGUAGE_NONE => array(array('value' => 'Arkiv')),
      ),
      'field_uib_links' => array(
        LANGUAGE_NONE => array(
          array('url' => '?date=2012','title' => '2012'),
          array('url' => '?date=2011','title' => '2011'),
          array('url' => '?date=2010','title' => '2010'),
          array('url' => '?date=2009','title' => '2009'),
          array('url' => '?date=2008','title' => '2008'),
        ),
      ),
    );
    $entity = entity_create('field_collection_item', $values);
    $entity->setHostEntity('node', $node_nb);
    $entity->save();
    node_save($node_nb);
}

/**
 * Create menus for disciplines
 */
function uib_area_update_7008() {
  $query = new EntityFieldQuery;
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'area')
    ->fieldCondition('field_uib_area_type', 'value', 'discipline')
    ->execute();
  $discipline_nodes = entity_load('node', array_keys($result['node']));
  foreach ($discipline_nodes as $nid => $node) {
    $menu_machine_name = 'menu-area-' . $nid;
    if (!menu_load('menu-area-' . $nid)) {
      // Create a menu if none is present
      $alias = drupal_get_path_alias('node/' . $nid, $node->language);
      if (substr($alias, 0, 5) == 'node/') {
        $alias = $nid;
      }
      $menu_title = 'area_' . str_replace('/', '_', $alias);
      if ($node->language == 'en') {
        $menu_title .= '_en';
      }
      $menu_description = t('Menu for') . ' ' . trim($node->title);
      $menu = array(
        'menu_name' => $menu_machine_name,
        'title' => $menu_title,
        'description' => $menu_description,
        );
      menu_save($menu);
      uibx_log("$menu_description created", 'notice');
    }
  }
}

/**
 * Remove the retired uib_geo field on uib_ou
 */
function uib_area_update_7009() {
  field_delete_field('field_uib_geo');
  field_purge_batch(1000);
}

/**
 * Set uib_ou nodes to be Norwegian
 */
function uib_area_update_7010() {
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'uib_ou')
    ->execute();
  if (!empty($result['node'])) {
    $ous = entity_load('node', array_keys($result['node']));
    foreach ($ous as $ou) {
      $ou->language = 'nb';
      node_save($ou);
    }
  }
}
