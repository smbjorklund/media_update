<?php

/**
 * Order a list of publications
 *
 * Wraps the list in two arrays "category" and "year",
 *   and sorts the publication data within those.
 * Categories are sorted according to a preset order, defined here.
 * If sort type is not "category" there will only be one
 *   dummy category: "year".
 * Publications are sorted by year [Descending], and authors [ascending]
 *   by using a callback function 'uib_cristin__compare'.
 *
 * Returns an array containing the list and labels for the categories.
 */
function uib_cristin_sort($unsorted, $sort_type = 'category', $limit) {
  global $language;
  usort($unsorted, 'uib_cristin__compare');
  if (count($unsorted) > $limit) {
    for ($i = count($unsorted); $i >= $limit; $i--) {
      unset($unsorted[$i]);
    }
  }
  $sorted = array();
  $category_order = array(
    'BOK' => 1,
    'TIDSSKRIFTPUBL' => 2,
    'RAPPORT' => 3,
    'BOKRAPPORTDEL' => 4,
    'FOREDRAG' => 6,
    'PRODUKT' => 7,
    'UTSTILLING' => 8,
    'KUNST_PRODUKSJON' => 5,
    'INFORMASJONSMATR' => 9,
    'MEDIEBIDRAG' => 10,
    'OVERSETTELSESARB' => 11,
    'KOMMERSIALISERIN' => 12,
    );
  $uib_category_labels = array(
    'BOK' => array(
      'en' => 'Books',
      'nb' => 'BÃ¸ker',
      ),
    'TIDSSKRIFTPUBL' => array(
      'en' => 'Journal articles',
      'nb' => 'Tidsskriftartikler',
      ),
    'RAPPORT' => array(
      'en' => 'Reports and theses',
      'nb' => 'Rapporter/avhandlinger',
      ),
    'BOKRAPPORTDEL' => array(
      'en' => 'Book sections',
      'nb' => 'Bokkapitler',
      ),
    'KUNST_PRODUKSJON' => array(
      'en' => 'Artistic production',
      'nb' => 'Kunstnerisk produksjon',
      ),
    );

  $category_names = array();
  $cnt = 0;

  foreach ($unsorted as $publ) {
    if ($sort_type == 'category') {
      $category = $category_order[$publ['fellesdata']['kategori']['hovedkategori']['kode']];
      if (!isset($category_names[$category])) {
        $category_names[$category] = $uib_category_labels[$publ['fellesdata']['kategori']['hovedkategori']['kode']][$language->language];
      }
    }
    else {
      $category = 'year';
    }
    $sorted['list'][$category][$publ['fellesdata']['ar']][] = $publ;
  }
  if (!empty($category_names)) {
    $sorted['category_labels'] = $category_names;
  }
  if (!empty($sorted['list']) && $sort_type == 'category') {
    ksort($sorted['list'], SORT_NUMERIC);
  }
  return $sorted;
}

/**
 * Callback function to usort
 * Descending by year, Ascending by authors
 */
function uib_cristin__compare($a, $b) {
  $a_cvalue = $a['fellesdata']['ar'] . uib_cristin_author_string($b['fellesdata']['person']);
  $b_cvalue = $b['fellesdata']['ar'] . uib_cristin_author_string($a['fellesdata']['person']);
  if ($a_cvalue > $b_cvalue) { return -1; }
  if ($a_cvalue < $b_cvalue) { return 1; }
  return 0;
}

/**
 * List authors in correct order in a string
 */
function uib_cristin_author_string($authors_in) {
  $authors_out = array();
  if (isset($authors_in['id'])) {
    // single author
    $authors_out[$authors_in['rekkefolgenr']] = $authors_in['etternavn'] . ', ' . $authors_in['fornavn'];
  }
  else {
    // list of authors
    foreach ($authors_in as $author) {
      $authors_out[$author['rekkefolgenr']] = $author['etternavn'] . ', ' . $author['fornavn'];
    }
  }
  ksort($authors_out, SORT_NUMERIC);
  return implode('; ', $authors_out);
}

/**
 * Get publications for a user
 */
function uib_cristin_publications($user) {
  $limit = 200;
  if (!empty($user->field_uib_user_cristin_nr)) {
    $limit = $user->field_uib_user_cristin_nr['und'][0]['value'];
  }
  $sort_type = 'category';
  if (!empty($user->field_uib_user_cristin_sort)) {
    $sort_type = $user->field_uib_user_cristin_sort['und'][0]['value'];
  }
  $publications = array();
  $default_categories = array(
    'BOK',
    'TIDSSKRIFTPUBL',
    'RAPPORT',
    'BOKRAPPORTDEL',
    'KUNST_PRODUKSJON',
    );

  foreach ($default_categories as $category) {
    $cmd = "hentVarbeiderPerson?navn=$user->name&eierkode=UIB&utplukk=nyeste&hovedkategori=$category&maksantall=$limit";
    $cristin_data = uib_cristin__get_json($cmd);
    if (!empty($cristin_data)) {
      $tmp_publ = drupal_json_decode($cristin_data);
      if (!empty($tmp_publ['forskningsresultat'])) {
        $publications = array_merge($publications, $tmp_publ['forskningsresultat']);
      }
    }
  }
  $publications = uib_cristin_sort($publications, $sort_type, $limit);
  return $publications;
}

/**
 * Get most important publications for a user
 */
function uib_cristin_important($username) {
  $limit = 200;
  $important = NULL;

  $cmd = "hentVarbeiderPerson?navn=$username&eierkode=UIB&utplukk=viktigste&maksantall=$limit";
  $cristin_data = uib_cristin__get_json($cmd);
  if (!empty($cristin_data)) {
    $important = drupal_json_decode($cristin_data);
    $important = $important['forskningsresultat'];
  }
  return $important;
}

/**
 * CRIStin will sometimes improperly give us
 *   an array instead of a string.
 * Avoid giving an array to check_plain
 * and handle some incoming html-entities
 */
function uib_cristin__check_plain($data) {
  if (empty($data)) {
    return '';
  }
  else {
    if (is_array($data)) {
      $data = implode(' ', $data);
    }
    // CRIStin may give us some html entites that
    // would be escaped and shown in plain.
    $data = html_entity_decode($data, ENT_COMPAT, 'UTF-8');
  }
  return check_plain($data);
}

/**
 * Generate markup for publications tab
 */
function uib_cristin_publications_tab_format($publications) {
  $markup = array();
  if (!empty($publications['list'])) {
    $markup[] = '<div class="uib-cristin-publications">';
    foreach ($publications['list'] as $category => $years) {
      $tmp_markup = '';
      foreach ($years as $year) {
        $tmp_markup .= uib_cristin_format($year);
      }
      if ($category == 'year') {
        $markup[] = $tmp_markup;
      }
      else {
        $markup[] = theme('ctools_collapsible',
          array(
            'handle' => $publications['category_labels'][$category],
            'content' => $tmp_markup,
            'collapsed' => TRUE,
            )
        );
      }
    }
    $markup[] = '</div>';
  }
  return implode('', $markup);
}

/**
 * Generate markup for a set of CRIStin publications
 */
function uib_cristin_format($publications) {
  $markup = array();
  if (!empty($publications)) {
    $markup[] = '<div class="uib-cristin-publications-set">';
    $markup[] = '<ul>';
    foreach ($publications as $publ) {
      $markup[] = '<li><div class="uib-cristin-' . $publ['fellesdata']['kategori']['hovedkategori']['kode'] . '">';
      // Author(s)
      if (!empty($publ['fellesdata']['person'])) {
        $markup[] = '<span class="uib-cristin-authors">';
        $markup[] = rtrim(uib_cristin__check_plain(uib_cristin_author_string($publ['fellesdata']['person'])), '.');
        $markup[] = '.</span> ';
      }
      // Year
      if (!empty($publ['fellesdata']['ar'])) {
        $markup[] = '<span class="uib-cristin-year">' . uib_cristin__check_plain($publ['fellesdata']['ar']) . '.</span> ';
      }
      // Title
      if (!empty($publ['fellesdata']['tittel'])) {
        $markup[] = '<span class="uib-cristin-title">' . uib_cristin__check_plain($publ['fellesdata']['tittel']);
        $ending_char = substr($publ['fellesdata']['tittel'], -1);
        if ($ending_char == '.' || $ending_char == '?' || $ending_char == '!') {
          $markup[] = '</span> ';
        }
        else {
          $markup[] = '.</span> ';
        }
      }
      // Publication data
      switch ($publ['fellesdata']['kategori']['hovedkategori']['kode']) {
        case 'BOK':
          $markup[] = uib_cristin__format_book($publ);
          break;
        case 'TIDSSKRIFTPUBL':
          $markup[] = uib_cristin__format_journal_article($publ);
          break;
        case 'RAPPORT':
          $markup[] = uib_cristin__format_report($publ);
          break;
        case 'BOKRAPPORTDEL':
          $markup[] = uib_cristin__format_section($publ);
          break;
      }
      $markup[] = '</div></li>';
    }
  $markup[] = '</ul>';
  $markup[] = '</div>';
  }
  return implode('', $markup);
}

/**
 * Generate markup for journal-article-specific publication data
 */
function uib_cristin__format_journal_article(&$publ) {
  $markup = array();
  $what = array_keys($publ['kategoridata']);
  $what = $what[0];
  $markup[] = '<span class="uib-cristin-journal">' . uib_cristin__check_plain($publ['kategoridata'][$what]['tidsskrift']['navn']) . '.</span> ';
  $bibliographics_output = FALSE;
  $volume_exists = FALSE;
  if (!empty($publ['kategoridata'][$what]['volum'])) {
    $markup[] = '<span class="uib-cristin-journal-volume">' . uib_cristin__check_plain($publ['kategoridata'][$what]['volum']) . '</span>';
    $bibliographics_output = TRUE;
    $volume_exists = TRUE;
  }
  elseif (!empty($publ['kategoridata'][$what]['hefte'])) {
    $markup[] = '<span class="uib-cristin-journal-issue">' . uib_cristin__check_plain($publ['kategoridata'][$what]['hefte']) . '</span>';
    $bibliographics_output = TRUE;
  }
  if (!empty($publ['kategoridata'][$what]['sideangivelse'])) {
    if (!empty($publ['kategoridata'][$what]['sideangivelse']['sideFra'])) {
      if ($bibliographics_output) {
        if ($volume_exists) {
          $markup[] = ': ';
        }
        else {
          $markup[] = '. ';
        }
      }
      $markup[] = '<span class="uib-cristin-journal-pages">';
      $markup[] = uib_cristin__check_plain($publ['kategoridata'][$what]['sideangivelse']['sideFra']);
      $bibliographics_output = TRUE;
      if (!empty($publ['kategoridata'][$what]['sideangivelse']['sideTil'])) {
        $markup[] = '-' . uib_cristin__check_plain($publ['kategoridata'][$what]['sideangivelse']['sideTil']);
      }
      $markup[] =  '</span>';
    }
    elseif (!empty($publ['kategoridata'][$what]['sideangivelse']['antallSider'])) {
      if ($bibliographics_output) {
          $markup[] = '. ';
      }
      $markup[] = '<span class="uib-cristin-journal-pages">';
      $markup[] = uib_cristin__check_plain($publ['kategoridata'][$what]['sideangivelse']['antallSider']) . ' ' . t('pages');
      $markup[] =  '</span>';
      $bibliographics_output = TRUE;
    }
  }
  if ($bibliographics_output) {
    $markup[] = '. ';
  }
  if (!empty($publ['kategoridata'][$what]['dato'])) {
    $markup[] = '<span class="uib-cristin-journal-date">' . t('Published') . ' ' . uib_cristin__check_plain($publ['kategoridata'][$what]['dato']) . '.</span> ';
  }
  if (!empty($publ['kategoridata'][$what]['doi'])) {
    $doi = $publ['kategoridata'][$what]['doi'];
    if (is_array($doi)) {
      $doi = $doi[0];
    }
    $doi = trim($doi);
    $doi = trim($doi, '.');
    if (!empty($doi)) {
    $markup[] = '<span class="uib-cristin-doi">doi:&nbsp;' . l($doi, 'http://dx.doi.org/' . $doi, array('attributes' => array('target' => '_blank'))) . '</span>';
    }
  }
  return implode('', $markup);
}

/**
 * Generate markup for book-specific publication data
 */
function uib_cristin__format_book(&$publ) {
  $markup = array();
  $what = array_keys($publ['kategoridata']);
  $what = $what[0];
  if (!empty($publ['kategoridata'][$what]['forlag'])) {
    $markup[] = '<span class="uib-cristin-publisher">' . uib_cristin__check_plain($publ['kategoridata'][$what]['forlag']['navn']) . '.</span> ';
  }
  if (!empty($publ['kategoridata'][$what]['antallSider'])) {
    $markup[] = '<span class="uib-cristin-pages">' . uib_cristin__check_plain($publ['kategoridata'][$what]['antallSider']) . ' ' . t('pages') . '.</span> ';
  }
  if (!empty($publ['kategoridata'][$what]['isbn'])) {
    $markup[] = '<span class="uib-cristin-isbn">ISBN: ' . uib_cristin__check_plain($publ['kategoridata'][$what]['isbn']) . '.</span> ';
  }
  return implode('', $markup);
}

/**
 * Generate markup for report-specific publication data
 */
function uib_cristin__format_report(&$publ) {
  $markup = array();
  $what = array_keys($publ['kategoridata']);
  $what = $what[0];
  if (!empty($publ['kategoridata'][$what]['serie'])) {
    $markup[] = '<span class="uib-cristin-serial">'. uib_cristin__check_plain($publ['kategoridata'][$what]['serie']['navn']) . '.</span> ';
  }
  if (!empty($publ['kategoridata'][$what]['volum'])) {
    $markup[] = '<span class="uib-cristin-serial-volume">' . uib_cristin__check_plain($publ['kategoridata'][$what]['volum']) . '</span>';
  }
  if (!empty($publ['kategoridata'][$what]['hefte'])) {
    if (!empty($publ['kategoridata'][$what]['volum'])) {
      $markup[] = ': ';
    }
    $markup[] = '<span class="uib-cristin-issue">' . uib_cristin__check_plain($publ['kategoridata'][$what]['hefte']) . '</span>';
  }
  if (!empty($publ['kategoridata'][$what]['volum']) || !empty($publ['kategoridata'][$what]['hefte'])) {
    $markup[] = '. ';
  }
  if (!empty($publ['kategoridata'][$what]['utgiver']['navn'])) {
    $markup[] = '<span class="uib-cristin-serial-publisher">' . uib_cristin__check_plain($publ['kategoridata'][$what]['utgiver']['navn']);
    if (!empty($publ['kategoridata'][$what]['utgiver']['sted'])) {
      $markup[] = ', ' . uib_cristin__check_plain($publ['kategoridata'][$what]['utgiver']['sted']);
    }
    $markup[] = '.</span> ';
  }
  if (!empty($publ['kategoridata'][$what]['antallSider'])) {
    $markup[] = '<span class="uib-cristin-pages">' . uib_cristin__check_plain($publ['kategoridata'][$what]['antallSider']) . ' ' . t('pages') . '.</span> ';
  }
  return implode('', $markup);
}

/**
 * Generate markup for book-section-specific publication data
 */
function uib_cristin__format_section(&$publ) {
  $markup = array();
  $what = array_keys($publ['kategoridata']);
  $what = $what[0];
  if (!empty($publ['kategoridata'][$what]['delangivelse'])) {
    $markup[] = '<span class="uib-cristin-section">' . uib_cristin__check_plain($publ['kategoridata'][$what]['delangivelse']) . '</span>';
  }
  if (!empty($publ['kategoridata'][$what]['sideangivelse'])) {
    if (!empty($publ['kategoridata'][$what]['delangivelse'])) {
      $markup[] = ', ' . t('pages') . ' ';
    }
    $markup[] = '<span class="uib-cristin-section-pages">';
    if (!empty($publ['kategoridata'][$what]['sideangivelse']['sideFra'])) {
      $markup[] = uib_cristin__check_plain($publ['kategoridata'][$what]['sideangivelse']['sideFra']);
    }
    if (!empty($publ['kategoridata'][$what]['sideangivelse']['sideTil'])) {
      $markup[] = '-' . uib_cristin__check_plain($publ['kategoridata'][$what]['sideangivelse']['sideTil']);
    }
    $markup[] =  '</span>';
  }
  if (!empty($publ['kategoridata'][$what]['delangivelse']) || !empty($publ['kategoridata'][$what]['sideangivelse'])) {
    $markup[] = '. ';
  }
  $markup[] = t('In') . ': ';
  $markup[] = uib_cristin_format(array($publ['kategoridata'][$what]['delAv']['forskningsresultat']));

  return implode('', $markup);
}

/**
 * Get an url to a user's CRIStin user page
 */
function uib_cristin_url($username = NULL) {
  return variable_get('uib_cristin_userlink', 'https://www.cristin.no/as/WebObjects/cristin.woa/wa/personVis?type=PERSON&instnr=184&bruker=') . $username;
}

/**
 * Return a link to a user page in CRIStin
 */
function uib_cristin_link($username = NULL) {
  $pub_link = NULL;

  // Check if there are ANY publications for this user
  $cmd = 'hentVarbeiderPerson?navn=' . $username . '&eierkode=UIB&utplukk=nyeste&maksantall=1';
  $cristin_data = uib_cristin__get_json($cmd);
  if (!empty($cristin_data)) {
    $pub_link = l(t('Publications in national current research information system (CRIStin)'), uib_cristin_url($username), array('attributes' => array('target' => '_blank')));
  }
  return $pub_link;
}

/**
 * Get json data from cristin
 */
function uib_cristin__get_json($cmd) {
  $data = NULL;
  $url = uib_cristin__ws_url($cmd) . '&format=json';
  $res = drupal_http_request($url);
  if ($res->code == 200) {
    $data = $res->data;
  }
  elseif ($res->code != 404) {
    // 404 means: no search hits
    uibx_log("Could not fetch from CRIStin. id=$res->code", "warning");
  }
  return $data;
}

/**
 * Assemble a cristin ws command url
 */
function uib_cristin__ws_url($cristin_command) {
  $url = variable_get('uib_cristin_ws', 'http://cristin.no/ws/');
  $url .= $cristin_command;
  return $url;
}

/**
 * Implements hook_field_attach_view_alter().
 */
function uib_cristin_field_attach_view_alter(&$output, $context) {
  if ($context['entity_type'] != 'user' || $context['view_mode'] != 'full') {
    return;
  }
  $user = $context['entity'];
  $instances = _field_invoke_get_instances('user', 'user', array('default' => TRUE, 'deleted' => FALSE));

  // Selected publications
  if ($selected = uib_cristin_important($user->name)) {
    $selected = uib_cristin_format($selected);
    $selected_markup = '<div class="uib-user-selected-publications"><div class="field-label">' . t('Selected publications') . '</div>';
    $selected_markup .= $selected;
    $selected_markup .= '</div>';
    $output['selected_publications'] = array(
      '#weight' => 40,
      0 => array('#markup' => $selected_markup),
    );
  }

  // Publications tab
  $field_name = 'field_uib_user_publications';
  $existing_markup = '';
  if (!empty($output[$field_name][0]['#markup'])) {
    $existing_markup = $output[$field_name][0]['#markup'];
  }
  $cristin_before = TRUE;
  if (!empty($user->field_uib_user_cristin_place)) {
    if ($user->field_uib_user_cristin_place['und'][0]['value']) {
      $cristin_before = FALSE;
    }
  }

  if (empty($user->field_uib_user_cristin_nr) || $user->field_uib_user_cristin_nr['und'][0]['value'] > 0) {
    if ($publications = uib_cristin_publications($user)) {
      $publications = uib_cristin_publications_tab_format($publications);
      if (!empty($publications)) {
        $cristin_user_link = l(t('More information in national current research information system (CRIStin)'), uib_cristin_url($user->name), array('attributes' => array('target' => '_blank')));
      }
    }
  }
  else {
    // Only link to CRIStin
    $cristin_user_link = uib_cristin_link($user->name);
  }
  $cristin_markup = '';
  if (!empty($publications)) {
    $cristin_markup .= $publications;
  }
  if (!empty($cristin_user_link)) {
    $cristin_markup .= '<p>' . $cristin_user_link . '</p>';
  }

  if ($cristin_markup) {
    // Load field information
    $instance = $instances[$field_name];
    $display = field_get_display($instance, 'full', $user);
    $field = field_info_field($field_name);
    // Set output for field.
    if (!$existing_markup) {
      $output[$field_name] = array(
        '#theme' => 'field',
        '#title' => t($instance['label']),
        '#label_display' => 'above',
        '#field_type' => $field['type'],
        '#field_name' => $field_name,
        '#bundle' => 'user',
        '#view_mode' => 'full',
        '#object' => $context['entity'],
        '#items' => array(array()),
        '#entity_type' => 'user',
        '#weight' => $display['weight'],
      );
    }
    if ($cristin_before) {
      $output[$field_name][0]['#markup'] = $cristin_markup . $existing_markup;
    }
    else {
      $output[$field_name][0]['#markup'] =  $existing_markup . $cristin_markup;
    }
  }
}
