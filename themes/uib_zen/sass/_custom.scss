//
// Custom sass mixins
//
// To use a mixin in this file, add this line to the top of your .scss file:
//   @import "base";
// Then to use a mixin for a particular rule, add this inside the ruleset's
// curly brackets:
//   @include mix-in-name;


// element-invisible as defined by http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
@mixin element-invisible {
  position: absolute !important;
  height: 1px;
  width: 1px;
  overflow: hidden;
  @if $legacy-support-for-ie6 or $legacy-support-for-ie7 {
    clip: rect(1px 1px 1px 1px); // IE6 and IE7 use the wrong syntax.
  }
  clip: rect(1px, 1px, 1px, 1px);
}

// Turns off the element-invisible effect.
@mixin element-invisible-off {
  position: static !important;
  clip: auto;
  height: auto;
  width: auto;
  overflow: auto;
}

@mixin element-focusable {
  @include element-invisible;

  &:active,
  &:focus {
    @include element-invisible-off;
  }
}

// The word "Unpublished" displayed underneath unpublished nodes and comments.
@mixin unpublished-div {
  height: 0;
  overflow: visible;
  color: #d8d8d8;
  font-size: 75px;
  line-height: 1;
  font-family: Impact, "Arial Narrow", Helvetica, sans-serif;
  font-weight: bold;
  text-transform: uppercase;
  text-align: center;
  word-wrap: break-word; // A very nice CSS3 property

  @if $legacy-support-for-ie6 or $legacy-support-for-ie7 {
    .lt-ie8 &>* {
      position: relative; // Otherwise these elements will appear below the "Unpublished" text.
    }
  }
}

// Resizing of sprites
@mixin resize-sprite($map, $sprite, $percent) {
  $spritePath:    sprite-path($map);
  $spriteWidth:   image-width($spritePath);
  $spriteHeight:  image-height($spritePath);
  $width: image-width(sprite-file($map, $sprite));
  $height: image-height(sprite-file($map, $sprite));

  @include background-size(ceil($spriteWidth * ($percent/100)) ceil($spriteHeight * ($percent/100)));
  width: ceil($width*($percent/100));
  height: ceil($height*($percent/100));
  background-position: 0 floor(nth(sprite-position($map, $sprite), 2)  * ($percent/100) );
}

@mixin resize-sprite-set($map, $percent, $only...) {
  $name: sprite_map_name($map);

  @each $sprite in sprite_names($map) {
    @if length($only) == 0 or index($only, $sprite) != false {
      .#{$name}-#{$sprite} {
        @include resize-sprite($map, $sprite, $percent);
      }
    }
  }
}

// Custom sass extendables

%over-and-underline {
  border-top: $sidebar-border;
  border-bottom: $sidebar-border;
}

/**
 * Media block layout.
 *
 * @param string $media_element_size
 *   Size of the entire element.
 * @param string $media_element_float
 *   Float direction of the entire element.
 * @param numeric $image_size
 *   Size of the image should be scaled to.
 * @param string $image
 *   Float direction of image element.
 */
@mixin media_element($media_element_size, $media_element_float, $background: transparent) {
  margin: 0 0 zen-gutter() 0;
  float: $media_element_float;
  width: $media_element_size;
  background-color: $background;
  @if $media_element_float == "left" {
  }
  @if $media_element_float == "right" {
  }
  @if $media_element_size == "100%" {
    margin: 20px;
  }
}

@mixin media($image_size, $image_float: none) {
  width: $image_size;
  @if $image_float == "left" {
    float: $image_float;
    margin: 0;
  }
  @if $image_float == "right" {
    float: $image_float;
    margin: 0;
  }
}

@mixin media_content() {
  display: table-cell;
  width: 10000px;
}

@mixin media_content_wrapper() {
  padding: 0 0 0 zen-half-gutter();
}

@mixin color_box($color: transparent, $color_text: none) {
  margin: zen-half-gutter();
  @if $color != transparent {
    background-color: $color;
    color: $color_text;
  }
}
