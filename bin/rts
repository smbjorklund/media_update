#!/usr/bin/env perl

use utf8;
use strict;
use warnings;

use Getopt::Long qw(GetOptions);
use JSON qw(from_json to_json);

(my $PROGNAME = $0) =~ s,.*/,,;
binmode(STDOUT, ":utf8");

GetOptions(\my %OPT,
    'verbose',
    'json',
    'open',
    'url',
    'patches',
    'full',
) || usage();

my $DB = "var/rts";
my $CMD = shift || usage();

if ($CMD =~ /^\d+$/) {
    unshift(@ARGV, $CMD);
    $CMD = 'show';
}
else {
    $CMD =~ s/-/_/g;
}

my $do_cmd = "do_$CMD";
unless (defined &$do_cmd) {
    require Text::Abbrev;
    my @cmds;
    for my $name (keys %main::) {
        push(@cmds, $name) if $name =~ s/^do_//;
    }
    my $abbrev = Text::Abbrev::abbrev(@cmds);
    if (my $cmd = $abbrev->{$CMD}) {
        $do_cmd = "do_$cmd";
    }
    else {
        require Text::Wrap;
        usage(Text::Wrap::wrap("", "  ",
                  "Unrecognized command '$CMD'; try one of " .
                  join(", ", sort @cmds)
              )
        );
    }
}

eval {
    no strict 'refs';
    &$do_cmd();
};
if ($@) {
    print STDERR "$PROGNAME $CMD failed: $@";
    exit 1;
}
else {
    exit;
}

sub usage {
    my $msg = shift;
    print STDERR "$msg\n" if $msg;
    die <<EOT;
Usage: $PROGNAME <cmd> [options] ...

Subcommands:

    update [--full]
    [show] [--json] <id>...
    release
    release <rid> [--patches]
    list [--open] [--patches]
    branches
    merge-status <id>
EOT
}

sub do_update {
    my $implict = shift;

    require LWP::UserAgent;
    require URI;
    require URI::QueryParam;

    my $ua = LWP::UserAgent->new;
    $ua->show_progress($OPT{verbose});

    my $u = URI->new('https://rts.uib.no');
    $u->path("issues.json");
    $u->query_param(project_id => 'w3');
    $u->query_param(limit => 999);

    my $fh;
    open($fh, "<", "$ENV{HOME}/.rts.key") || die "Can't open ~/.rts.key: $!";
    my $key = <$fh>;
    chomp($key);
    close($fh);

    $u->query_param(key => $key);

    system("mkdir -p $DB");

    my @closed_issues = $OPT{full} ? () : (grep !$_->{open}, _get_issues());

    my @all_issues;
    for my $status (qw(open closed)) {
	next if $status eq "closed" && !$OPT{full};

	$u->query_param(status_id => $status);
	my $total_count;
	my $offset = 0;
	do {
	    $u->query_param('offset' => $offset);

	    my $res = $ua->get($u);
	    die $res->status_line unless $res->is_success;

	    my $data = from_json($res->content);

	    $total_count = $data->{total_count}
		unless defined $total_count;

	    my $issues = delete $data->{issues};
	    for my $issue (@$issues) {
		$issue->{open} = $status eq "open";
		for my $k (keys %$issue) {
		    if (ref($issue->{$k}) eq "HASH" && exists $issue->{$k}{name}) {
			$issue->{$k} = $issue->{$k}{name};
		    }
		}
		for my $f (@{delete $issue->{custom_fields} || []}) {
		    my $k = $f->{name};
		    $k =~ s/ /_/g;
		    $k = "x_$k";
		    $issue->{$k} = $f->{value};
		}
	    }
	    push(@all_issues, @$issues);
	    $offset += @$issues;
	    printf STDERR "%-6s %3.0f%%\r", $status, 100*$offset/$total_count if $total_count;
	} while $offset < $total_count;
    }
    push(@all_issues, @closed_issues) if @closed_issues;

    @all_issues = sort { $a->{id} <=> $b->{id} } @all_issues;

    rename("$DB/issues.json", "$DB/issues-old.json");
    open($fh, ">", "$DB/issues.json") || die;
    binmode($fh, ":utf8");
    print $fh to_json(\@all_issues);
    close($fh) || die;

    print " " x 40, "\r";
    print scalar(@all_issues), " issues saved to $DB/issues.json\n"
	unless $implict;
}

sub get_issues {
    if (!-e "$DB/issues.json" || -M _ > 1) {
	do_update(1);
    }
    return _get_issues(@_);
}

sub _get_issues {
    open(my $fh, "<", "$DB/issues.json") || die;
    binmode($fh, ":utf8");
    my $json = do { local $/; <$fh>; };
    close($fh);
    my $issues = from_json($json);
    return @$issues;
}

sub filter_issues {
    my $wanted = shift;
    my @issues;
    for my $issue (get_issues()) {
	push(@issues, $issue) if $wanted->($issue);
    }
    return @issues;
}

sub list_issues {
    for my $issue (@_) {
	if ($OPT{url}) {
	    printf "https://rts.uib.no/issues/%-4s", $issue->{id};
	}
	else {
	    printf "RTS-%-4s", $issue->{id};
	}
	printf " %-2s %s\n", issue_status($issue), shorten($issue->{subject});
	if ($OPT{patches}) {
	    for my $p (get_patches($issue->{id})) {
		print "  - $p\n";
	    }
	}
    }
}

sub issue_status {
    my $issue = shift;

    my $status = $issue->{status};
    $status = "-" if $status eq "Avsluttet" || $status eq "Levert";
    $status = "âœ…" if $status eq "Verifisert";
    $status = "ðŸ˜´" if $status eq "Venter";
    my $st = substr($status, 0, 1) || "?";

    my $v = $issue->{x_Avsluttet_som} || "";
    $v = "-" if $v eq "LÃ¸st";
    $v = "?" if $v eq "Kan ikke gjenskapes";
    $st .= substr($v, 0, 1);

    return $st;
}

sub shorten {
    my $s = shift;
    my $max = shift || 60;
    if (length($s) > $max) {
	my $len1 = int($max * 2/3);
	my $len2 = $max - $len1;
	$len1 -= 3;
	$s = substr($s, 0, $len1) . "..." . substr($s, -$len2);
    }
    return $s;
}

my %ISSUE_NAME;
sub issue_name {
    my $issue_id = shift;

    unless (%ISSUE_NAME) {
	for my $issue (get_issues()) {
	    my $name = $issue->{subject};
	    $name .= " [$issue->{fixed_version}]" if $issue->{fixed_version};
	    $ISSUE_NAME{$issue->{id}} = $name;
	}
    }

    my $name = $ISSUE_NAME{$issue_id} || "?";
    $name = shorten($name);
    return $name;
}

sub get_patches {
    my $issue_id = shift;
    my @patches = qx(git log --oneline origin/master..origin/rts/$issue_id 2>/dev/null);
    for (@patches) {
	chomp;
	s/ RTS-\#?$issue_id\s+/ /;
    }
    return @patches;
}

sub do_show {
    usage("No issue id given") unless @ARGV;
    my %want_ids;
    for (@ARGV) {
	s/^RTS-?//i;
	s/^#//;
	$want_ids{$_}++;
    }
    my @issues = filter_issues(sub { $want_ids{$_[0]{'id'}} });
    die "$ARGV[0]: No such issue\n" if !@issues && @ARGV == 1;
    if ($OPT{json}) {
	print to_json(\@issues, { pretty => 1, canonical => 1 });
	return;
    }
    list_issues(@issues);
}

sub do_list {
    if ($OPT{open}) {
	list_issues(filter_issues(sub { $_[0]{open} }));
    }
    else {
	list_issues(get_issues());
    }
}

sub do_release {
    if (@ARGV) {
	my $release = shift(@ARGV);
	$release = "R$release" unless $release =~ /^r/i;
	$release = lc($release);
	my @issues = filter_issues(sub { lc($_[0]{'fixed_version'} || 'none') eq $release });
	if (@issues) {
	    list_issues(@issues);
	    return;
	}
    }
    print "Releases:\n";
    my %R;
    filter_issues(sub { $R{$_[0]{'fixed_version'} || 'none'}++; 0 });
    for (sort keys %R) {
	printf "  %-7s %4d\n", $_, $R{$_};
    }
}

sub do_branches {
    my %local;
    my %remote;

    system('git fetch --prune >/dev/null');

    for (qx(git branch -a)) {
	if (m,(/origin/)?rts/(\d+),) {
	    if ($1) {
		$remote{$2}++;
	    }
	    else {
		$local{$2}++;
	    }
	}
    }

    #use Data::Dump; dd \%local, \%remote;

    my %all = (%local, %remote);

    for (sort keys %all) {
	my $suffix;
	if ($local{$_} && !$remote{$_}) {
	    print "L";
	    $suffix = count_cherries("rts/$_");
	}
	elsif ($remote{$_} && !$local{$_}) {
	    print "R";
	    $suffix = count_cherries("origin/rts/$_");
	}
	else {
	    print "=";
	    $suffix = count_cherries("rts/$_");
	}
	print " rts/$_";
	print " $suffix" if $suffix;
	print " ", issue_name($_+0), "\n";

	if ($remote{$_}) {
	    print "  *** merge conflicts (run 'rts merge-status $_' for details)\n" if git_merge_tree($_) =~ /^\+<<<<<+ \.our/m;
	}
    }
}

sub do_merge_status {
    my $issue = shift(@ARGV) || die;
    my $merge_report = git_merge_tree($issue);
    die "Can't merge origin/rts/$issue" unless $merge_report;
    print $merge_report;
}

sub git_merge_tree {
    my $issue = shift || die;

    my $base = `git merge-base origin/master origin/rts/$issue`;
    chomp($base);
    if ($base) {
	my $cmd = "git merge-tree $base origin/master origin/rts/$issue";
	my $merge_report = qx($cmd);
	return $merge_report;
    }
    return undef;
}

sub count_commits {
    my($from, $to) = @_;
    my $c = qx(git rev-list --count $from..$to);
    chomp($c);
    return $c;
}

sub count_cherries {
    my($head, $upstream) = @_;
    $upstream ||= "origin/master";
    my $picked = 0;
    my $unpicked = 0;
    open(my $fh, "git cherry $upstream $head|") || die;
    local $_;
    while (<$fh>) {
	$picked++   if /^\- /;
	$unpicked++ if /^\+ /;
    }
    my $all = $picked + $unpicked;
    unless (wantarray) {
	return 0 unless $all;
	return "$picked/$all";
    }
    return $picked, $all;
}
