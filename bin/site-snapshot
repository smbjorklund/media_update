#!/usr/bin/perl

use strict;
use Getopt::Long qw(GetOptions);

die "site should be a link" unless -l "site";

my $psql = qx(bin/site-drush sql-connect 2>/dev/null);
chomp($psql);
die "Unexpected '$psql'" unless $psql =~ /^psql / && $psql =~ /\s--dbname=(\S+)/;
my $dbname = $1;

my @ts = localtime;
my $ts = sprintf "%4d%02d%02d_%02d%02d", $ts[5]+1900, $ts[4]+1, reverse @ts[1..3];

my @snapshots;
for (pg_query("\@\\l")) {  # list databases
    push(@snapshots, $1) if /^ \Q$dbname\E_(\d{8}_\d{4}(?:_\w+)?) /;
}
@snapshots = reverse sort @snapshots;

if (!@ARGV || $ARGV[0] =~ /^--tag(?:=(.*))?/) {
    my $tag = "";
    if (@ARGV) {
	$tag = $1 || $ARGV[1] || usage();
    }
    # make a new snapshot
    $tag =~ s/\W+/_/g;
    $ts .= "_$tag" if $tag;
    pg_query("DROP DATABASE \"${dbname}_$ts\"") if grep $_ eq $ts, @snapshots;
    pg_query("CREATE DATABASE \"${dbname}_$ts\" TEMPLATE \"$dbname\"");
}
elsif ($ARGV[0] eq "list") {
    for (@snapshots) {
	if (/^(\d\d\d\d)(\d\d)(\d\d)_(\d\d)(\d\d(:?_(\w+))?)$/) {
	    print "$1-$2-$3_$4:$5\n";
	}
	else {
	    warn $_;
	}
    }
}
elsif ($ARGV[0] eq "clear") {
    for (@snapshots) {
	pg_query("DROP DATABASE \"${dbname}_$_\"");
    }
}
elsif ($ARGV[0] eq "restore") {
    my $match = $ARGV[1] || "";
    $match =~ s/[-:]//g;
    my $found;
    for (@snapshots) {
	if (/^\Q$match/) {
	    restore($_);
	    $found++;
	    last;
	}
    }
    die "No snapshort that matches '^$match' found\n"
	unless $found;
}
elsif ($ARGV[0] eq "pop") {
    die "No snapshots" unless @snapshots;
    restore($snapshots[0], 1);
}
else {
    usage();
}

sub usage {
    (my $progname = $0) =~ s,.*/,,;
    die <<EOT;
Usage: $progname [ "--tag" <tag> | "list" | "clear" | "pop" | "restore" <name>  ]

Without argument make a snapshot of the current $dbname database.
You might name you snapshot something with --tag.
EOT
}

sub restore {
    my $snap = shift;
    my $pop = shift;
    #print "Restore $snap\n";
    pg_query("DROP DATABASE \"$dbname\"", "postgres");
    if ($pop) {
        pg_query("ALTER DATABASE \"${dbname}_$snap\" RENAME TO \"$dbname\"", "postgres");
    }
    else {
        pg_query("CREATE DATABASE \"${dbname}\" TEMPLATE \"${dbname}_$snap\"", "postgres");
    }
}

sub pg_query {
    my $sql = shift;
    my $dbname = shift;
    my $cmd = "$psql ";
    if ($dbname) {
       $cmd =~ s/\s--dbname=\S+/ --dbname=$dbname/;
    }
    my $silent = $sql =~ s/^\@//;
    $cmd .= shell_quote("-c", "$sql");
    print "$cmd\n" unless $silent;
    return qx($cmd) if defined(wantarray);
    system($cmd);
}

sub shell_quote {
    my @copy;
    for (defined(wantarray) ? (@copy = @_) : @_) {
	if ($_ eq "" || /[^\w\.\-\/]/) {
	    s/([\\\$\"\`])/\\$1/g;
	    $_ = qq("$_");
	}
    }
    wantarray ? @copy : join(" ", @copy);
}
