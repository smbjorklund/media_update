#!/usr/bin/env perl

use strict;
use warnings;

my $module = shift;
my $vers = shift;

$module || usage();
$module =~ s,^m/,,; $module =~ s,/$,,;  # clean out m/*/ names
die "Bad module name [$module]" unless $module =~ /^\w+$/;

my @make = qx(cat drupal.make);
die "Can't find the 'drupal.make' file" unless @make;
die "Not clean; see 'git status'" if qx(git status --porcelain);

my $core;
my $old_vers;
my $idx = 0;
my $updated;
for (@make) {
    if (/^core\s*=\s*(\S+)/) {
	$core = $1;
    }
    elsif (/^projects\[(\w+)]\[version] = (\S+)/ && $1 eq $module) {
	$old_vers = $2;
	if (!$vers) {
	    $vers = $2;
	}
	elsif ($vers ne $2) {
	    # update the entry
	    $_ = "projects[$1][version] = $vers\n";
	    $updated++;
	}
	last;
    }
    $idx++;
}

die unless $core;

unless ($old_vers) {
    usage() unless $vers;

    # insert it then
    my $mod;
    $idx = 0;
    for (@make) {
	if (/^; modules/ .. /^$/) {
	    if (/^projects\[(\w+)]\[version]/) {
		my $mod = $1;
		#use Data::Dump; dd $mod, $module;
		if ($mod gt $module) {
		    # we should insert it here
		    last;
		}
	    }
	    elsif (/^$/) {
		last;
	    }
	}
	$idx++;
    }
    splice(@make, $idx, 0, "projects[$module][version] = $vers\n");
    $updated++;
}

if ($updated) {
    open(my $fh, ">", "drupal.make") || die "Can't open drupal.make: $!";
    print $fh @make;
    close($fh) || die "Can't write to drupal.make: $!";
    warn "Wrote drupal.make\n";
}

my $mod_dir = "modules";
if ($module eq 'zen') {
    $mod_dir = 'themes';
}

run("rm -rf drupal/sites/all/$mod_dir/$module");
run("ln -s drupal/sites");
run("drush make drupal.make . --projects=$module --libraries= --no-core");
run("rm sites");

my $msg = ($old_vers ?
    ($old_vers eq $vers ?
	"Refreshed $module-$core-$vers"
	: "Upgrade to $module-$core-$vers (was $old_vers)")
    : "Imported $module-$core-$vers"
);
run("(cd drupal && git add --all sites/all/$mod_dir/$module)");
run("(cd drupal && git commit -m '$msg')");
run("git add drupal.make drupal");
run("git commit -m '$msg'");

sub run {
    print ">>> @_\n";
    system(@_);
    die "Failed $?" if $?;
}

sub usage {
    (my $progname = $0) =~ s,.*/,,;
    die "Usage: $progname <module> <version>\n";
}
